ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
V/Volumes/Macintosh HD/Users/poppe076/Desktop/source_monitoring_task/data/ok_source_monitoring_2015_Jun_24_1539
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'source_monitoring'
p11
sS'dataNames'
p12
(lp13
S'choice'
p14
asS'autoLog'
p15
I01
sS'extraInfo'
p16
(dp17
S'pitch lower result amount'
p18
cnumpy.core.multiarray
scalar
p19
(cnumpy
dtype
p20
(S'f8'
I0
I1
tRp21
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00\x00\x00\x00\x80'
tRp22
sS'participant'
p23
Vok
p24
sS'pitch lower result block'
p25
I0
sS'frameRate'
p26
NsS'pitch higher result amount'
p27
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp28
sS'expName'
p29
g11
sS'date'
p30
V2015_Jun_24_1539
p31
sS'listMethod'
p32
Vrandom
p33
sS'pitch higher result block'
p34
I0
ssS'loopsUnfinished'
p35
(lp36
sS'saveWideText'
p37
I01
sS'thisEntry'
p38
(dp39
sS'version'
p40
S''
sS'_paramNamesSoFar'
p41
(lp42
S'word'
p43
aS'amount'
p44
aS'list'
p45
aS'trialtype'
p46
aS'block'
p47
asS'entries'
p48
(lp49
(dp50
S'trials.thisIndex'
p51
g19
(g20
(S'i4'
I0
I1
tRp52
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00'
tRp53
sg43
S'word3.26'
p54
sS'trials.thisRepN'
p55
I0
sg23
g24
sg45
S'list3'
p56
sg26
NsS'trials.thisN'
p57
I0
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp58
sg29
g11
sS'trials.thisTrialN'
p59
I0
sg46
S'pitch higher'
p60
sg30
g31
sg32
g33
sg14
S'other'
p61
sg47
g19
(g20
(S'i8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp63
sa(dp64
S'trials.thisIndex'
p65
g19
(g52
S'\x01\x00\x00\x00'
tRp66
sg43
S'word2.29'
p67
sS'trials.thisRepN'
p68
I0
sg23
g24
sg45
S'list2'
p69
sg26
NsS'trials.thisN'
p70
I1
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp71
sg29
g11
sS'trials.thisTrialN'
p72
I1
sg46
S'unmodified'
p73
sg30
g31
sg32
g33
sg14
g61
sg47
g19
(g62
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp74
sa(dp75
S'trials.thisIndex'
p76
g19
(g52
S'\x02\x00\x00\x00'
tRp77
sg43
S'word1.29'
p78
sS'trials.thisRepN'
p79
I0
sg23
g24
sg45
S'list1'
p80
sg26
NsS'trials.thisN'
p81
I2
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp82
sg29
g11
sS'trials.thisTrialN'
p83
I2
sg46
S'pitch lower'
p84
sg30
g31
sg32
g33
sg14
g61
sg47
g19
(g62
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp85
sa(dp86
S'trials.thisIndex'
p87
g19
(g52
S'\x03\x00\x00\x00'
tRp88
sg43
S'word1.13'
p89
sS'trials.thisRepN'
p90
I0
sg23
g24
sg45
g80
sg26
NsS'trials.thisN'
p91
I3
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp92
sg29
g11
sS'trials.thisTrialN'
p93
I3
sg46
g84
sg30
g31
sg32
g33
sg14
g61
sg47
g19
(g62
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp94
sa(dp95
S'trials.thisIndex'
p96
g19
(g52
S'\x04\x00\x00\x00'
tRp97
sg43
S'word3.5'
p98
sS'trials.thisRepN'
p99
I0
sg23
g24
sg45
g56
sg26
NsS'trials.thisN'
p100
I4
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp101
sg29
g11
sS'trials.thisTrialN'
p102
I4
sg46
g60
sg30
g31
sg32
g33
sg14
g61
sg47
g19
(g62
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp103
sa(dp104
S'trials.thisIndex'
p105
g19
(g52
S'\x05\x00\x00\x00'
tRp106
sg43
S'word2.12'
p107
sS'trials.thisRepN'
p108
I0
sg23
g24
sg45
g69
sg26
NsS'trials.thisN'
p109
I5
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp110
sg29
g11
sS'trials.thisTrialN'
p111
I5
sg46
g73
sg30
g31
sg32
g33
sg14
g61
sg47
g19
(g62
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp112
sa(dp113
S'trials.thisIndex'
p114
g19
(g52
S'\x06\x00\x00\x00'
tRp115
sg43
S'word1.2'
p116
sS'trials.thisRepN'
p117
I0
sg23
g24
sg45
g80
sg26
NsS'trials.thisN'
p118
I6
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp119
sg29
g11
sS'trials.thisTrialN'
p120
I6
sg46
g84
sg30
g31
sg32
g33
sg14
g61
sg47
g19
(g62
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp121
sa(dp122
S'trials.thisIndex'
p123
g19
(g52
S'\x07\x00\x00\x00'
tRp124
sg43
S'word3.23'
p125
sS'trials.thisRepN'
p126
I0
sg23
g24
sg45
g56
sg26
NsS'trials.thisN'
p127
I7
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp128
sg29
g11
sS'trials.thisTrialN'
p129
I7
sg46
g60
sg30
g31
sg32
g33
sg14
g61
sg47
g19
(g62
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp130
sa(dp131
S'trials.thisIndex'
p132
g19
(g52
S'\x08\x00\x00\x00'
tRp133
sg43
S'word2.10'
p134
sS'trials.thisRepN'
p135
I0
sg23
g24
sg45
g69
sg26
NsS'trials.thisN'
p136
I8
sg44
g28
sg29
g11
sS'trials.thisTrialN'
p137
I8
sg46
g73
sg30
g31
sg32
g33
sg14
g61
sg47
g19
(g62
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp138
sa(dp139
S'trials.thisIndex'
p140
g19
(g52
S'\t\x00\x00\x00'
tRp141
sg43
S'word3.10'
p142
sg18
g22
sS'trials.thisRepN'
p143
I0
sg25
I0
sg45
g56
sg26
NsS'trials.thisN'
p144
I9
sg30
g31
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp145
sg29
g11
sS'trials.thisTrialN'
p146
I9
sg46
g60
sg32
g33
sg27
g28
sg23
g24
sg14
g61
sg34
I0
sg47
g19
(g62
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp147
sasS'loops'
p148
(lp149
g1
(cpsychopy.data
TrialHandler
p150
g3
NtRp151
(dp152
S'origin'
p153
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things like STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000a\u000a# Ensure that relative paths start from the same directory as this script\u000a_thisDir = os.path.dirname(os.path.abspath(__file__))\u000aos.chdir(_thisDir)\u000a\u000a# Store info about the experiment session\u000aexpName = 'source_monitoring'  # from the Builder filename that created this script\u000aexpInfo = {}\u000a\u000amyDlg = gui.Dlg(title=expName, size=gui.wx.Size(-1,-75))\u000amyDlg.addField(u'participant: ', u'')\u000amyDlg.addField('word lists: ', choices=['random','set your own']) \u000amyDlg.show()\u000aif myDlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['participant'] = myDlg.data[0]\u000aexpInfo['listMethod'] = myDlg.data[1]\u000aprint expInfo['listMethod']\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a\u000aif expInfo['listMethod']=='set your own':\u000a    myDlg2 = gui.Dlg(title='Set Word Lists')\u000a    conditions = ['unmodified', 'pitch - higher', 'pitch - lower']\u000a    for cNum in range(len(conditions)):\u000a        myDlg2.addField(conditions[cNum], choices=[1,2,3], initial=cNum+1)\u000a    myDlg2.show()\u000a    if myDlg2.OK == False: core.quit()  # user pressed cancel\u000a    expInfo['listOrder'] = myDlg2.data\u000a    \u000afrom psychopy import visual\u000a\u000a\u000a# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc\u000afilename = _thisDir + os.sep + 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# Setup the Window\u000awin = visual.Window(size=(1440, 900), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color=[-1,-1,-1], colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a# Initialize components for Routine "initialize_code"\u000ainitialize_codeClock = core.Clock()\u000afrom psychopy import gui\u000afrom pyo import *\u000aimport math, sys, csv, random\u000afrom collections import OrderedDict\u000aserv = Server().boot()\u000a\u000a## SETTINGS ##\u000a\u000a# This is the amount to change the pitch on each block of trials (both higher and lower)\u000aPITCH_DELTA = 0.5\u000a\u000a# This is the word list file\u000aWORD_LIST_FILE = "wordlist.csv"\u000a\u000a# Colors of the choice buttons\u000aSELF_BOX_FILL_COLOR = '#A6A9FF'\u000aSELF_BOX_BORDER_COLOR = '#3E45FA'\u000aOTHER_BOX_FILL_COLOR = '#FFFCA6'\u000aOTHER_BOX_BORDER_COLOR = '#FAF33E'\u000a\u000a## END SETTINGS ##\u000a\u000a\u000a# this function ends a routine immediately\u000adef endRoutine():\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "status"):\u000a            thisComponent.status = FINISHED\u000a        continueRoutine = False\u000a\u000a\u000a# initialize this variable - it keeps track of whether \u000a# the subject is finished speaking during a time stretch trial\u000afinished = True\u000a\u000a##########################################################\u000a### read in the original word list file and save word list file for this subject\u000a##########################################################\u000a# container array for file contents\u000aorig_words = []\u000a# read csv file with the original word lists (in same directory as this experiment script)\u000awith open(WORD_LIST_FILE, 'rU') as csvfile:\u000a    test = csv.reader(csvfile)\u000a    for i in test:\u000a        orig_words.append(i)\u000a\u000a# depending on experiementer's selection at run time, either randomize word lists or\u000a# use the experimenter's order\u000adef fixList(x):\u000a    return int(x)-1\u000a\u000aif expInfo['listMethod']=='set your own':\u000a    assignment_order = map(fixList, expInfo['listOrder'])\u000aelse:\u000a    assignment_order = random.sample([0,1,2], 3)\u000a\u000a# initialize word containers for the trial types\u000aunmodified_words = []\u000apitch_higher_words = []\u000apitch_lower_words = []\u000a\u000a# assign words to those containers\u000afor row in orig_words:\u000a    unmodified_words.append(row[assignment_order[0]])\u000a    pitch_higher_words.append(row[assignment_order[1]])\u000a    pitch_lower_words.append(row[assignment_order[2]])\u000a\u000a# save word lists for each trial type\u000aunmodified_word_list = unmodified_words.pop(0)\u000apitch_higher_word_list = pitch_higher_words.pop(0)\u000apitch_lower_word_list = pitch_lower_words.pop(0)\u000a\u000a# randomize words in their lists\u000arandom.shuffle(unmodified_words)\u000arandom.shuffle(pitch_higher_words)\u000arandom.shuffle(pitch_lower_words)\u000a\u000a# this will be the name of the wordlist csv file for this subject\u000awordlist_filename = filename+'_wordlist.csv'\u000aresults_filename = filename+'_summarized_results.csv'\u000a\u000a# build a big array with all the words and also attach trialtype, block, and amount data,\u000a# like this: [block, word, trialtype, amount, list]\u000amaster_list = []\u000a\u000a# start pitch change at 0\u000apitch_amount = 0\u000a\u000a# create blocks of 9 words and add them to master list\u000afor block_num in range(10):\u000a    block_words = []\u000a    pitch_amount = pitch_amount + PITCH_DELTA\u000a    for i in range(3):\u000a        word_index = block_num * 3 + i\u000a        subgroup = []\u000a        subgroup.append([block_num, unmodified_words[word_index], 'unmodified', 0, unmodified_word_list])\u000a        subgroup.append([block_num, pitch_higher_words[word_index], 'pitch higher', pitch_amount, pitch_higher_word_list])\u000a        subgroup.append([block_num, pitch_lower_words[word_index], 'pitch lower', -1 * pitch_amount, pitch_lower_word_list])\u000a        random.shuffle(subgroup)\u000a        block_words += subgroup\u000a    master_list += block_words\u000a\u000a# save csv file to disk\u000awith open(wordlist_filename,'wb') as w:\u000a    writer=csv.writer(w)\u000a    writer.writerow(['block', 'word', 'trialtype', 'amount', 'list'])\u000a    for row in master_list:\u000a        writer.writerow(row)\u000a\u000a# create container for stats\u000a# this keeps track of how many times the subject chooses "other" for\u000a#   each trial type per block\u000a# it gets reset each block\u000achoice_stats = OrderedDict()\u000achoice_stats['unmodified'] = 0 # we shouldn't need this one\u000achoice_stats['pitch higher'] = 0\u000achoice_stats['pitch lower'] = 0\u000achoice_stats['pitch higher block'] = 0\u000achoice_stats['pitch lower block'] = 0\u000achoice_stats['pitch higher amount'] = 0\u000achoice_stats['pitch lower amount'] = 0\u000a\u000a# these hold the "done" status for each pitch trial type\u000apitch_higher_done = False\u000apitch_lower_done = False\u000a\u000a# start with block number = 0\u000athis_block = 0\u000a\u000a# Initialize components for Routine "instructions"\u000ainstructionsClock = core.Clock()\u000atext_4 = visual.TextStim(win=win, ori=0, name='text_4',\u000a    text='Instructions will go here.',    font='Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aserv.start()\u000amic = Input(chnl=0)\u000atext = visual.TextStim(win=win, ori=0, name='text',\u000a    text='default text',    font='Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=-1.0)\u000a\u000a# Initialize components for Routine "choose_source"\u000achoose_sourceClock = core.Clock()\u000aquestion = visual.TextStim(win=win, ori=0, name='question',\u000a    text='Whose voice did you hear?',    font='Arial',\u000a    pos=[0, .5], height=0.1, wrapWidth=2,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000aself_box = visual.Rect(win=win, name='self_box',\u000a    width=[0.5, 0.5][0], height=[0.5, 0.5][1],\u000a    ori=0, pos=[-.5, -.5],\u000a    lineWidth=5, lineColor=SELF_BOX_BORDER_COLOR, lineColorSpace='rgb',\u000a    fillColor=SELF_BOX_FILL_COLOR, fillColorSpace='rgb',\u000a    opacity=1,depth=-1.0, \u000ainterpolate=True)\u000aself_label = visual.TextStim(win=win, ori=0, name='self_label',\u000a    text='Mine',    font='Arial',\u000a    pos=[-.5, -.5], height=0.1, wrapWidth=None,\u000a    color='black', colorSpace='rgb', opacity=1,\u000a    depth=-2.0)\u000aother_box = visual.Rect(win=win, name='other_box',\u000a    width=[0.5, 0.5][0], height=[0.5, 0.5][1],\u000a    ori=0, pos=[.5, -.5],\u000a    lineWidth=5, lineColor=OTHER_BOX_BORDER_COLOR, lineColorSpace='rgb',\u000a    fillColor=OTHER_BOX_FILL_COLOR, fillColorSpace='rgb',\u000a    opacity=1,depth=-3.0, \u000ainterpolate=True)\u000aother_label = visual.TextStim(win=win, ori=0, name='other_label',\u000a    text='Other',    font='Arial',\u000a    pos=[.5, -.5], height=0.1, wrapWidth=None,\u000a    color='black', colorSpace='rgb', opacity=1,\u000a    depth=-4.0)\u000amouse = event.Mouse(win=win)\u000ax, y = [None, None]\u000a\u000a\u000a# Initialize components for Routine "thankyou"\u000athankyouClock = core.Clock()\u000atext_3 = visual.TextStim(win=win, ori=0, name='text_3',\u000a    text=u'Thank you for participating!',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a\u000a# Initialize components for Routine "display_results"\u000adisplay_resultsClock = core.Clock()\u000aresults_text = visual.TextStim(win=win, ori=0, name='results_text',\u000a    text='default text',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=2,\u000a    color=u'white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "initialize_code"-------\u000at = 0\u000ainitialize_codeClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000a\u000a# keep track of which components have finished\u000ainitialize_codeComponents = []\u000afor thisComponent in initialize_codeComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "initialize_code"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = initialize_codeClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in initialize_codeComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "initialize_code"-------\u000afor thisComponent in initialize_codeComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a\u000a# the Routine "initialize_code" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a#------Prepare to start Routine "instructions"-------\u000at = 0\u000ainstructionsClock.reset()  # clock \u000aframeN = -1\u000aroutineTimer.add(5.000000)\u000a# update component parameters for each repeat\u000a# keep track of which components have finished\u000ainstructionsComponents = []\u000ainstructionsComponents.append(text_4)\u000afor thisComponent in instructionsComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instructions"-------\u000acontinueRoutine = True\u000awhile continueRoutine and routineTimer.getTime() > 0:\u000a    # get current time\u000a    t = instructionsClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *text_4* updates\u000a    if t >= 0.0 and text_4.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        text_4.tStart = t  # underestimates by a little under one frame\u000a        text_4.frameNStart = frameN  # exact frame index\u000a        text_4.setAutoDraw(True)\u000a    if text_4.status == STARTED and t >= (0.0 + (5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a        text_4.setAutoDraw(False)\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instructionsComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "instructions"-------\u000afor thisComponent in instructionsComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a\u000a# set up handler to look after randomisation of conditions etc\u000atrials = data.TrialHandler(nReps=1, method='sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(wordlist_filename),\u000a    seed=None, name='trials')\u000athisExp.addLoop(trials)  # add the loop to the experiment\u000athisTrial = trials.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisTrial.rgb)\u000aif thisTrial != None:\u000a    for paramName in thisTrial.keys():\u000a        exec(paramName + '= thisTrial.' + paramName)\u000a\u000afor thisTrial in trials:\u000a    currentLoop = trials\u000a    # abbreviate parameter names if possible (e.g. rgb = thisTrial.rgb)\u000a    if thisTrial != None:\u000a        for paramName in thisTrial.keys():\u000a            exec(paramName + '= thisTrial.' + paramName)\u000a    \u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(11.000000)\u000a    # update component parameters for each repeat\u000a    # check for new block. \u000a    # if it's a new block, check if previous block had 3 "other" votes for either pitch type\u000a    # if so,  1) record appropriate block number for that type\u000a    #  2) set "done" flag to true for that type\u000a    # if both pitch types are done, end the trials loop\u000a    if(block != this_block):\u000a        this_amount = trials.getEarlierTrial(-1).amount\u000a        if(choice_stats['pitch higher'] == 3):\u000a            expInfo['pitch higher result block'] = this_block\u000a            expInfo['pitch higher result amount'] = this_amount\u000a            choice_stats['pitch higher block'] = this_block\u000a            choice_stats['pitch higher amount'] = this_amount\u000a            pitch_higher_done = True\u000a        if(choice_stats['pitch lower'] == 3):\u000a            expInfo['pitch lower result block'] = this_block\u000a            expInfo['pitch lower result amount'] = -1 * this_amount\u000a            choice_stats['pitch lower block'] = this_block\u000a            choice_stats['pitch lower amount'] = this_amount\u000a            pitch_lower_done = True\u000a        if(pitch_lower_done and pitch_higher_done):\u000a            trials.finished = True\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        this_block = block\u000a        choice_stats['pitch higher'] = 0\u000a        choice_stats['pitch lower'] = 0\u000a    \u000a    \u000a    b = Harmonizer(mic, transpo=float(amount))\u000a    c = Gate(b, thresh=-90, falltime=0.02, lookahead=20.0).mix(2).out()\u000a    d = Follower2(b)\u000a    talkThresh = .08\u000a    talkStarted = False\u000a    stoppedTalking = False\u000a    stopTime = 100\u000a    \u000a    text.setText(word)\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(text)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        if d.get() > talkThresh:\u000a                talkStarted = True\u000a        \u000a        if talkStarted and not stoppedTalking:\u000a            if d.get() < talkThresh:\u000a                stoppedTalking = True\u000a                stopTime = globalClock.getTime() + 1\u000a        \u000a        if stoppedTalking and globalClock.getTime() >= stopTime:\u000a            b.stop()\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        \u000a        \u000a        # *text* updates\u000a        if t >= 1 and text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            text.tStart = t  # underestimates by a little under one frame\u000a            text.frameNStart = frameN  # exact frame index\u000a            text.setAutoDraw(True)\u000a        if text.status == STARTED and t >= (1 + (10-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            text.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    \u000a    \u000a    #------Prepare to start Routine "choose_source"-------\u000a    t = 0\u000a    choose_sourceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # setup some python lists for storing info about the mouse\u000a    if(pitch_lower_done and pitch_higher_done):\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status"):\u000a                thisComponent.status = FINISHED\u000a            continueRoutine = False\u000a    # keep track of which components have finished\u000a    choose_sourceComponents = []\u000a    choose_sourceComponents.append(question)\u000a    choose_sourceComponents.append(self_box)\u000a    choose_sourceComponents.append(self_label)\u000a    choose_sourceComponents.append(other_box)\u000a    choose_sourceComponents.append(other_label)\u000a    choose_sourceComponents.append(mouse)\u000a    for thisComponent in choose_sourceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choose_source"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choose_sourceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *question* updates\u000a        if t >= 0.0 and question.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            question.tStart = t  # underestimates by a little under one frame\u000a            question.frameNStart = frameN  # exact frame index\u000a            question.setAutoDraw(True)\u000a        \u000a        # *self_box* updates\u000a        if t >= 0.0 and self_box.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            self_box.tStart = t  # underestimates by a little under one frame\u000a            self_box.frameNStart = frameN  # exact frame index\u000a            self_box.setAutoDraw(True)\u000a        \u000a        # *self_label* updates\u000a        if t >= 0.0 and self_label.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            self_label.tStart = t  # underestimates by a little under one frame\u000a            self_label.frameNStart = frameN  # exact frame index\u000a            self_label.setAutoDraw(True)\u000a        \u000a        # *other_box* updates\u000a        if t >= 0.0 and other_box.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            other_box.tStart = t  # underestimates by a little under one frame\u000a            other_box.frameNStart = frameN  # exact frame index\u000a            other_box.setAutoDraw(True)\u000a        \u000a        # *other_label* updates\u000a        if t >= 0.0 and other_label.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            other_label.tStart = t  # underestimates by a little under one frame\u000a            other_label.frameNStart = frameN  # exact frame index\u000a            other_label.setAutoDraw(True)\u000a        if mouse.isPressedIn(self_box, buttons=[0]):\u000a            trials.addData('choice', 'self')\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        elif mouse.isPressedIn(other_box, buttons=[0]):\u000a            trials.addData('choice','other')\u000a            choice_stats[trialtype] += 1\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        \u000a        if self_box.contains(mouse):\u000a            self_box.fillColor = SELF_BOX_BORDER_COLOR\u000a        else:\u000a            self_box.fillColor = SELF_BOX_FILL_COLOR\u000a        \u000a        if other_box.contains(mouse):\u000a            other_box.fillColor = OTHER_BOX_BORDER_COLOR\u000a        else:\u000a            other_box.fillColor = OTHER_BOX_FILL_COLOR\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choose_sourceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choose_source"-------\u000a    for thisComponent in choose_sourceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for trials (TrialHandler)\u000a    \u000a    # the Routine "choose_source" was not non-slip safe, so reset the non-slip timer\u000a    routineTimer.reset()\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'trials'\u000a\u000a\u000a#------Prepare to start Routine "thankyou"-------\u000at = 0\u000athankyouClock.reset()  # clock \u000aframeN = -1\u000aroutineTimer.add(5.000000)\u000a# update component parameters for each repeat\u000a\u000a\u000a\u000a# keep track of which components have finished\u000athankyouComponents = []\u000athankyouComponents.append(text_3)\u000afor thisComponent in thankyouComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "thankyou"-------\u000acontinueRoutine = True\u000awhile continueRoutine and routineTimer.getTime() > 0:\u000a    # get current time\u000a    t = thankyouClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *text_3* updates\u000a    if t >= 0.0 and text_3.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        text_3.tStart = t  # underestimates by a little under one frame\u000a        text_3.frameNStart = frameN  # exact frame index\u000a        text_3.setAutoDraw(True)\u000a    if text_3.status == STARTED and t >= (0.0 + (5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a        text_3.setAutoDraw(False)\u000a    \u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in thankyouComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "thankyou"-------\u000afor thisComponent in thankyouComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000aresults = '\u005cn\u005cr'\u000a\u000aresults += 'Pitch (higher) block = ' + str(choice_stats['pitch higher block']) + '\u005cn\u005cr'\u000aresults += 'Pitch (lower) block = ' + str(choice_stats['pitch lower block']) + '\u005cn\u005cr'\u000aresults += '\u005cn\u005cr'\u000aresults += 'Pitch (higher) amount = ' + str(choice_stats['pitch higher amount']) + '\u005cn\u005cr'\u000aresults += 'Pitch (lower) amount = ' + str(choice_stats['pitch lower amount']) + '\u005cn\u005cr'\u000a\u000a\u000a\u000a\u000a#------Prepare to start Routine "display_results"-------\u000at = 0\u000adisplay_resultsClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000aresults_text.setText(results)\u000akey_resp_2 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_2.status = NOT_STARTED\u000a# keep track of which components have finished\u000adisplay_resultsComponents = []\u000adisplay_resultsComponents.append(results_text)\u000adisplay_resultsComponents.append(key_resp_2)\u000afor thisComponent in display_resultsComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "display_results"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = display_resultsClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *results_text* updates\u000a    if t >= 0.0 and results_text.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        results_text.tStart = t  # underestimates by a little under one frame\u000a        results_text.frameNStart = frameN  # exact frame index\u000a        results_text.setAutoDraw(True)\u000a    \u000a    # *key_resp_2* updates\u000a    if t >= 0.0 and key_resp_2.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_2.tStart = t  # underestimates by a little under one frame\u000a        key_resp_2.frameNStart = frameN  # exact frame index\u000a        key_resp_2.status = STARTED\u000a        # keyboard checking is just starting\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_2.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['esc'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in display_resultsComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "display_results"-------\u000afor thisComponent in display_resultsComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# the Routine "display_results" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000aserv.stop()\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p154
sS'thisTrial'
p155
g1
(cpsychopy.data
TrialType
p156
c__builtin__
dict
p157
(dp158
g45
g56
sg44
g145
sg43
g142
sg46
g60
sg47
g147
stRp159
sS'_exp'
p160
I170727952
sg10
S'trials'
p161
sg6
S'/Volumes/Macintosh HD/Users/poppe076/Desktop/source_monitoring_task/source_monitoring.py'
p162
sS'thisRepN'
p163
I0
sg15
I01
sg16
g17
sS'data'
p164
g1
(cpsychopy.data
DataHandler
p165
g157
(dp166
S'ran'
p167
cnumpy.ma.core
_mareconstruct
p168
(cnumpy.ma.core
MaskedArray
p169
cnumpy
ndarray
p170
(I0
tp171
S'b'
tRp172
(I1
(I90
I1
tg20
(S'f4'
I0
I1
tRp173
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p174
g168
(g169
g170
g171
S'b'
tRp175
(I1
(I90
I1
tg173
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
Ntbsg14
cnumpy.core.multiarray
_reconstruct
p176
(g170
(I0
tS'b'
tRp177
(I1
(I90
I1
tg20
(S'O4'
I0
I1
tRp178
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp179
g61
ag61
ag61
ag61
ag61
ag61
ag61
ag61
ag61
ag61
aS'--'
p180
aS'--'
p181
aS'--'
p182
aS'--'
p183
aS'--'
p184
aS'--'
p185
aS'--'
p186
aS'--'
p187
aS'--'
p188
aS'--'
p189
aS'--'
p190
aS'--'
p191
aS'--'
p192
aS'--'
p193
aS'--'
p194
aS'--'
p195
aS'--'
p196
aS'--'
p197
aS'--'
p198
aS'--'
p199
aS'--'
p200
aS'--'
p201
aS'--'
p202
aS'--'
p203
aS'--'
p204
aS'--'
p205
aS'--'
p206
aS'--'
p207
aS'--'
p208
aS'--'
p209
aS'--'
p210
aS'--'
p211
aS'--'
p212
aS'--'
p213
aS'--'
p214
aS'--'
p215
aS'--'
p216
aS'--'
p217
aS'--'
p218
aS'--'
p219
aS'--'
p220
aS'--'
p221
aS'--'
p222
aS'--'
p223
aS'--'
p224
aS'--'
p225
aS'--'
p226
aS'--'
p227
aS'--'
p228
aS'--'
p229
aS'--'
p230
aS'--'
p231
aS'--'
p232
aS'--'
p233
aS'--'
p234
aS'--'
p235
aS'--'
p236
aS'--'
p237
aS'--'
p238
aS'--'
p239
aS'--'
p240
aS'--'
p241
aS'--'
p242
aS'--'
p243
aS'--'
p244
aS'--'
p245
aS'--'
p246
aS'--'
p247
aS'--'
p248
aS'--'
p249
aS'--'
p250
aS'--'
p251
aS'--'
p252
aS'--'
p253
aS'--'
p254
aS'--'
p255
aS'--'
p256
aS'--'
p257
aS'--'
p258
aS'--'
p259
atbstRp260
(dp261
S'isNumeric'
p262
(dp263
g167
I01
sg174
I01
sg14
I00
ssg161
g151
sS'dataTypes'
p264
(lp265
g167
ag174
ag14
asS'dataShape'
p266
(lp267
I90
aI1
asbsS'method'
p268
S'sequential'
p269
sS'sequenceIndices'
p270
g176
(g170
(I0
tS'b'
tRp271
(I1
(I90
I1
tg52
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00'
tbsS'finished'
p272
I01
sS'nReps'
p273
I1
sS'nRemaining'
p274
I79
sS'trialList'
p275
(lp276
g1
(g156
g157
(dp277
g45
g56
sg44
g58
sg43
g54
sg46
g60
sg47
g63
stRp278
ag1
(g156
g157
(dp279
g45
g69
sg44
g71
sg43
g67
sg46
g73
sg47
g74
stRp280
ag1
(g156
g157
(dp281
g45
g80
sg44
g82
sg43
g78
sg46
g84
sg47
g85
stRp282
ag1
(g156
g157
(dp283
g45
g80
sg44
g92
sg43
g89
sg46
g84
sg47
g94
stRp284
ag1
(g156
g157
(dp285
g45
g56
sg44
g101
sg43
g98
sg46
g60
sg47
g103
stRp286
ag1
(g156
g157
(dp287
g45
g69
sg44
g110
sg43
g107
sg46
g73
sg47
g112
stRp288
ag1
(g156
g157
(dp289
g45
g80
sg44
g119
sg43
g116
sg46
g84
sg47
g121
stRp290
ag1
(g156
g157
(dp291
g45
g56
sg44
g128
sg43
g125
sg46
g60
sg47
g130
stRp292
ag1
(g156
g157
(dp293
g45
g69
sg44
g28
sg43
g134
sg46
g73
sg47
g138
stRp294
ag159
ag1
(g156
g157
(dp295
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp296
sg43
S'word2.11'
p297
sg46
g73
sg47
g19
(g62
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp298
stRp299
ag1
(g156
g157
(dp300
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp301
sg43
S'word1.9'
p302
sg46
g84
sg47
g19
(g62
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp303
stRp304
ag1
(g156
g157
(dp305
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp306
sg43
S'word3.20'
p307
sg46
g60
sg47
g19
(g62
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp308
stRp309
ag1
(g156
g157
(dp310
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp311
sg43
S'word1.30'
p312
sg46
g84
sg47
g19
(g62
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp313
stRp314
ag1
(g156
g157
(dp315
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp316
sg43
S'word2.30'
p317
sg46
g73
sg47
g19
(g62
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp318
stRp319
ag1
(g156
g157
(dp320
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp321
sg43
S'word1.1'
p322
sg46
g84
sg47
g19
(g62
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp323
stRp324
ag1
(g156
g157
(dp325
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp326
sg43
S'word2.7'
p327
sg46
g73
sg47
g19
(g62
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp328
stRp329
ag1
(g156
g157
(dp330
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp331
sg43
S'word3.2'
p332
sg46
g60
sg47
g19
(g62
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp333
stRp334
ag1
(g156
g157
(dp335
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp336
sg43
S'word2.4'
p337
sg46
g73
sg47
g19
(g62
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp338
stRp339
ag1
(g156
g157
(dp340
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp341
sg43
S'word3.1'
p342
sg46
g60
sg47
g19
(g62
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp343
stRp344
ag1
(g156
g157
(dp345
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp346
sg43
S'word1.19'
p347
sg46
g84
sg47
g19
(g62
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp348
stRp349
ag1
(g156
g157
(dp350
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp351
sg43
S'word3.9'
p352
sg46
g60
sg47
g19
(g62
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp353
stRp354
ag1
(g156
g157
(dp355
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp356
sg43
S'word2.15'
p357
sg46
g73
sg47
g19
(g62
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp358
stRp359
ag1
(g156
g157
(dp360
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp361
sg43
S'word1.15'
p362
sg46
g84
sg47
g19
(g62
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp363
stRp364
ag1
(g156
g157
(dp365
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp366
sg43
S'word2.3'
p367
sg46
g73
sg47
g19
(g62
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp368
stRp369
ag1
(g156
g157
(dp370
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp371
sg43
S'word3.18'
p372
sg46
g60
sg47
g19
(g62
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp373
stRp374
ag1
(g156
g157
(dp375
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp376
sg43
S'word1.22'
p377
sg46
g84
sg47
g19
(g62
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp378
stRp379
ag1
(g156
g157
(dp380
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp381
sg43
S'word2.21'
p382
sg46
g73
sg47
g19
(g62
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp383
stRp384
ag1
(g156
g157
(dp385
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp386
sg43
S'word3.3'
p387
sg46
g60
sg47
g19
(g62
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp388
stRp389
ag1
(g156
g157
(dp390
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp391
sg43
S'word1.10'
p392
sg46
g84
sg47
g19
(g62
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp393
stRp394
ag1
(g156
g157
(dp395
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp396
sg43
S'word2.27'
p397
sg46
g73
sg47
g19
(g62
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp398
stRp399
ag1
(g156
g157
(dp400
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp401
sg43
S'word3.12'
p402
sg46
g60
sg47
g19
(g62
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp403
stRp404
ag1
(g156
g157
(dp405
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp406
sg43
S'word1.26'
p407
sg46
g84
sg47
g19
(g62
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp408
stRp409
ag1
(g156
g157
(dp410
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp411
sg43
S'word1.3'
p412
sg46
g84
sg47
g19
(g62
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp413
stRp414
ag1
(g156
g157
(dp415
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp416
sg43
S'word3.30'
p417
sg46
g60
sg47
g19
(g62
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp418
stRp419
ag1
(g156
g157
(dp420
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp421
sg43
S'word2.25'
p422
sg46
g73
sg47
g19
(g62
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp423
stRp424
ag1
(g156
g157
(dp425
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp426
sg43
S'word2.18'
p427
sg46
g73
sg47
g19
(g62
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp428
stRp429
ag1
(g156
g157
(dp430
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp431
sg43
S'word1.6'
p432
sg46
g84
sg47
g19
(g62
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp433
stRp434
ag1
(g156
g157
(dp435
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp436
sg43
S'word3.15'
p437
sg46
g60
sg47
g19
(g62
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp438
stRp439
ag1
(g156
g157
(dp440
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp441
sg43
S'word3.27'
p442
sg46
g60
sg47
g19
(g62
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp443
stRp444
ag1
(g156
g157
(dp445
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp446
sg43
S'word1.14'
p447
sg46
g84
sg47
g19
(g62
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp448
stRp449
ag1
(g156
g157
(dp450
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp451
sg43
S'word2.17'
p452
sg46
g73
sg47
g19
(g62
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp453
stRp454
ag1
(g156
g157
(dp455
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp456
sg43
S'word2.20'
p457
sg46
g73
sg47
g19
(g62
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp458
stRp459
ag1
(g156
g157
(dp460
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp461
sg43
S'word3.25'
p462
sg46
g60
sg47
g19
(g62
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp463
stRp464
ag1
(g156
g157
(dp465
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp466
sg43
S'word1.23'
p467
sg46
g84
sg47
g19
(g62
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp468
stRp469
ag1
(g156
g157
(dp470
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp471
sg43
S'word1.17'
p472
sg46
g84
sg47
g19
(g62
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp473
stRp474
ag1
(g156
g157
(dp475
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp476
sg43
S'word3.8'
p477
sg46
g60
sg47
g19
(g62
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp478
stRp479
ag1
(g156
g157
(dp480
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp481
sg43
S'word2.14'
p482
sg46
g73
sg47
g19
(g62
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp483
stRp484
ag1
(g156
g157
(dp485
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp486
sg43
S'word1.24'
p487
sg46
g84
sg47
g19
(g62
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp488
stRp489
ag1
(g156
g157
(dp490
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp491
sg43
S'word2.8'
p492
sg46
g73
sg47
g19
(g62
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp493
stRp494
ag1
(g156
g157
(dp495
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp496
sg43
S'word3.21'
p497
sg46
g60
sg47
g19
(g62
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp498
stRp499
ag1
(g156
g157
(dp500
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp501
sg43
S'word2.6'
p502
sg46
g73
sg47
g19
(g62
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp503
stRp504
ag1
(g156
g157
(dp505
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp506
sg43
S'word1.12'
p507
sg46
g84
sg47
g19
(g62
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp508
stRp509
ag1
(g156
g157
(dp510
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp511
sg43
S'word3.19'
p512
sg46
g60
sg47
g19
(g62
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp513
stRp514
ag1
(g156
g157
(dp515
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp516
sg43
S'word2.24'
p517
sg46
g73
sg47
g19
(g62
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp518
stRp519
ag1
(g156
g157
(dp520
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp521
sg43
S'word1.28'
p522
sg46
g84
sg47
g19
(g62
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp523
stRp524
ag1
(g156
g157
(dp525
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp526
sg43
S'word3.24'
p527
sg46
g60
sg47
g19
(g62
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp528
stRp529
ag1
(g156
g157
(dp530
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp531
sg43
S'word3.13'
p532
sg46
g60
sg47
g19
(g62
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp533
stRp534
ag1
(g156
g157
(dp535
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp536
sg43
S'word2.22'
p537
sg46
g73
sg47
g19
(g62
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp538
stRp539
ag1
(g156
g157
(dp540
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp541
sg43
S'word1.16'
p542
sg46
g84
sg47
g19
(g62
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp543
stRp544
ag1
(g156
g157
(dp545
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp546
sg43
S'word2.28'
p547
sg46
g73
sg47
g19
(g62
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp548
stRp549
ag1
(g156
g157
(dp550
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp551
sg43
S'word1.25'
p552
sg46
g84
sg47
g19
(g62
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp553
stRp554
ag1
(g156
g157
(dp555
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp556
sg43
S'word3.16'
p557
sg46
g60
sg47
g19
(g62
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp558
stRp559
ag1
(g156
g157
(dp560
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp561
sg43
S'word2.26'
p562
sg46
g73
sg47
g19
(g62
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp563
stRp564
ag1
(g156
g157
(dp565
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp566
sg43
S'word3.17'
p567
sg46
g60
sg47
g19
(g62
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp568
stRp569
ag1
(g156
g157
(dp570
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp571
sg43
S'word1.20'
p572
sg46
g84
sg47
g19
(g62
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp573
stRp574
ag1
(g156
g157
(dp575
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp576
sg43
S'word3.28'
p577
sg46
g60
sg47
g19
(g62
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp578
stRp579
ag1
(g156
g157
(dp580
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp581
sg43
S'word2.19'
p582
sg46
g73
sg47
g19
(g62
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp583
stRp584
ag1
(g156
g157
(dp585
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp586
sg43
S'word1.27'
p587
sg46
g84
sg47
g19
(g62
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp588
stRp589
ag1
(g156
g157
(dp590
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp591
sg43
S'word3.6'
p592
sg46
g60
sg47
g19
(g62
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp593
stRp594
ag1
(g156
g157
(dp595
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp596
sg43
S'word1.11'
p597
sg46
g84
sg47
g19
(g62
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp598
stRp599
ag1
(g156
g157
(dp600
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp601
sg43
S'word2.23'
p602
sg46
g73
sg47
g19
(g62
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp603
stRp604
ag1
(g156
g157
(dp605
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp606
sg43
S'word2.2'
p607
sg46
g73
sg47
g19
(g62
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp608
stRp609
ag1
(g156
g157
(dp610
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp611
sg43
S'word3.14'
p612
sg46
g60
sg47
g19
(g62
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp613
stRp614
ag1
(g156
g157
(dp615
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp616
sg43
S'word1.4'
p617
sg46
g84
sg47
g19
(g62
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp618
stRp619
ag1
(g156
g157
(dp620
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp621
sg43
S'word2.16'
p622
sg46
g73
sg47
g19
(g62
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp623
stRp624
ag1
(g156
g157
(dp625
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp626
sg43
S'word3.11'
p627
sg46
g60
sg47
g19
(g62
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp628
stRp629
ag1
(g156
g157
(dp630
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp631
sg43
S'word1.18'
p632
sg46
g84
sg47
g19
(g62
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp633
stRp634
ag1
(g156
g157
(dp635
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp636
sg43
S'word2.1'
p637
sg46
g73
sg47
g19
(g62
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp638
stRp639
ag1
(g156
g157
(dp640
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp641
sg43
S'word1.8'
p642
sg46
g84
sg47
g19
(g62
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp643
stRp644
ag1
(g156
g157
(dp645
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp646
sg43
S'word3.29'
p647
sg46
g60
sg47
g19
(g62
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp648
stRp649
ag1
(g156
g157
(dp650
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp651
sg43
S'word2.13'
p652
sg46
g73
sg47
g19
(g62
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp653
stRp654
ag1
(g156
g157
(dp655
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp656
sg43
S'word3.22'
p657
sg46
g60
sg47
g19
(g62
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp658
stRp659
ag1
(g156
g157
(dp660
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp661
sg43
S'word1.5'
p662
sg46
g84
sg47
g19
(g62
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp663
stRp664
ag1
(g156
g157
(dp665
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp666
sg43
S'word3.7'
p667
sg46
g60
sg47
g19
(g62
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp668
stRp669
ag1
(g156
g157
(dp670
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp671
sg43
S'word2.9'
p672
sg46
g73
sg47
g19
(g62
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp673
stRp674
ag1
(g156
g157
(dp675
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp676
sg43
S'word1.7'
p677
sg46
g84
sg47
g19
(g62
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp678
stRp679
ag1
(g156
g157
(dp680
g45
g69
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp681
sg43
S'word2.5'
p682
sg46
g73
sg47
g19
(g62
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp683
stRp684
ag1
(g156
g157
(dp685
g45
g80
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp686
sg43
S'word1.21'
p687
sg46
g84
sg47
g19
(g62
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp688
stRp689
ag1
(g156
g157
(dp690
g45
g56
sg44
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp691
sg43
S'word3.4'
p692
sg46
g60
sg47
g19
(g62
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp693
stRp694
asS'seed'
p695
NsS'thisIndex'
p696
g141
sS'thisN'
p697
I10
sS'thisTrialN'
p698
I10
sS'nTotal'
p699
I90
sS'_warnUseOfNext'
p700
I01
sbasS'savePickle'
p701
I00
sb.