ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
V/Volumes/Macintosh HD/Users/poppe076/Desktop/source_monitoring_task/data/ok_source_monitoring_2015_Jun_24_1501
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'source_monitoring'
p11
sS'dataNames'
p12
(lp13
S'choice'
p14
aS'pitch higher result block'
p15
aS'pitch higher result amount'
p16
aS'pitch lower result block'
p17
aS'pitch lower result amount'
p18
asS'autoLog'
p19
I01
sS'extraInfo'
p20
(dp21
S'date'
p22
V2015_Jun_24_1501
p23
sS'listMethod'
p24
Vrandom
p25
sS'expName'
p26
g11
sS'participant'
p27
Vok
p28
sS'frameRate'
p29
cnumpy.core.multiarray
scalar
p30
(cnumpy
dtype
p31
(S'f8'
I0
I1
tRp32
(I3
S'<'
NNNI-1
I-1
I0
tbS'\r\xae\xa6\xd1\x81\xfaM@'
tRp33
ssS'loopsUnfinished'
p34
(lp35
sS'saveWideText'
p36
I01
sS'thisEntry'
p37
(dp38
sS'version'
p39
S''
sS'_paramNamesSoFar'
p40
(lp41
S'word'
p42
aS'amount'
p43
aS'list'
p44
aS'trialtype'
p45
aS'block'
p46
asS'entries'
p47
(lp48
(dp49
S'trials.thisIndex'
p50
g30
(g31
(S'i4'
I0
I1
tRp51
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00'
tRp52
sg42
S'word3.30'
p53
sS'trials.thisRepN'
p54
I0
sg27
g28
sg44
S'list3'
p55
sg29
g33
sS'trials.thisN'
p56
I0
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp57
sg26
g11
sS'trials.thisTrialN'
p58
I0
sg45
S'unmodified'
p59
sg22
g23
sg24
g25
sg14
S'self'
p60
sg46
g30
(g31
(S'i8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp62
sa(dp63
S'trials.thisIndex'
p64
g30
(g51
S'\x01\x00\x00\x00'
tRp65
sg42
S'word1.3'
p66
sS'trials.thisRepN'
p67
I0
sg27
g28
sg44
S'list1'
p68
sg29
g33
sS'trials.thisN'
p69
I1
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp70
sg26
g11
sS'trials.thisTrialN'
p71
I1
sg45
S'pitch higher'
p72
sg22
g23
sg24
g25
sg14
g60
sg46
g30
(g61
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp73
sa(dp74
S'trials.thisIndex'
p75
g30
(g51
S'\x02\x00\x00\x00'
tRp76
sg42
S'word2.30'
p77
sS'trials.thisRepN'
p78
I0
sg27
g28
sg44
S'list2'
p79
sg29
g33
sS'trials.thisN'
p80
I2
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp81
sg26
g11
sS'trials.thisTrialN'
p82
I2
sg45
S'pitch lower'
p83
sg22
g23
sg24
g25
sg14
g60
sg46
g30
(g61
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp84
sa(dp85
S'trials.thisIndex'
p86
g30
(g51
S'\x03\x00\x00\x00'
tRp87
sg42
S'word3.16'
p88
sS'trials.thisRepN'
p89
I0
sg27
g28
sg44
g55
sg29
g33
sS'trials.thisN'
p90
I3
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp91
sg26
g11
sS'trials.thisTrialN'
p92
I3
sg45
g59
sg22
g23
sg24
g25
sg14
g60
sg46
g30
(g61
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp93
sa(dp94
S'trials.thisIndex'
p95
g30
(g51
S'\x04\x00\x00\x00'
tRp96
sg42
S'word1.26'
p97
sS'trials.thisRepN'
p98
I0
sg27
g28
sg44
g68
sg29
g33
sS'trials.thisN'
p99
I4
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp100
sg26
g11
sS'trials.thisTrialN'
p101
I4
sg45
g72
sg22
g23
sg24
g25
sg14
g60
sg46
g30
(g61
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp102
sa(dp103
S'trials.thisIndex'
p104
g30
(g51
S'\x05\x00\x00\x00'
tRp105
sg42
S'word2.1'
p106
sS'trials.thisRepN'
p107
I0
sg27
g28
sg44
g79
sg29
g33
sS'trials.thisN'
p108
I5
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp109
sg26
g11
sS'trials.thisTrialN'
p110
I5
sg45
g83
sg22
g23
sg24
g25
sg14
g60
sg46
g30
(g61
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp111
sa(dp112
S'trials.thisIndex'
p113
g30
(g51
S'\x06\x00\x00\x00'
tRp114
sg42
S'word3.13'
p115
sS'trials.thisRepN'
p116
I0
sg27
g28
sg44
g55
sg29
g33
sS'trials.thisN'
p117
I6
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp118
sg26
g11
sS'trials.thisTrialN'
p119
I6
sg45
g59
sg22
g23
sg24
g25
sg14
g60
sg46
g30
(g61
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp120
sa(dp121
S'trials.thisIndex'
p122
g30
(g51
S'\x07\x00\x00\x00'
tRp123
sg42
S'word1.7'
p124
sS'trials.thisRepN'
p125
I0
sg27
g28
sg44
g68
sg29
g33
sS'trials.thisN'
p126
I7
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp127
sg26
g11
sS'trials.thisTrialN'
p128
I7
sg45
g72
sg22
g23
sg24
g25
sg14
g60
sg46
g30
(g61
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp129
sa(dp130
S'trials.thisIndex'
p131
g30
(g51
S'\x08\x00\x00\x00'
tRp132
sg42
S'word2.23'
p133
sS'trials.thisRepN'
p134
I0
sg27
g28
sg44
g79
sg29
g33
sS'trials.thisN'
p135
I8
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp136
sg26
g11
sS'trials.thisTrialN'
p137
I8
sg45
g83
sg22
g23
sg24
g25
sg14
g60
sg46
g30
(g61
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp138
sa(dp139
S'trials.thisIndex'
p140
g30
(g51
S'\t\x00\x00\x00'
tRp141
sg42
S'word3.4'
p142
sS'trials.thisRepN'
p143
I0
sg27
g28
sg44
g55
sg29
g33
sS'trials.thisN'
p144
I9
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp145
sg26
g11
sS'trials.thisTrialN'
p146
I9
sg45
g59
sg22
g23
sg24
g25
sg14
g60
sg46
g30
(g61
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp147
sa(dp148
S'trials.thisIndex'
p149
g30
(g51
S'\n\x00\x00\x00'
tRp150
sg42
S'word1.22'
p151
sS'trials.thisRepN'
p152
I0
sg27
g28
sg44
g68
sg29
g33
sS'trials.thisN'
p153
I10
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp154
sg26
g11
sS'trials.thisTrialN'
p155
I10
sg45
g72
sg22
g23
sg24
g25
sg14
g60
sg46
g30
(g61
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp156
sa(dp157
S'trials.thisIndex'
p158
g30
(g51
S'\x0b\x00\x00\x00'
tRp159
sg42
S'word2.8'
p160
sS'trials.thisRepN'
p161
I0
sg27
g28
sg44
g79
sg29
g33
sS'trials.thisN'
p162
I11
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp163
sg26
g11
sS'trials.thisTrialN'
p164
I11
sg45
g83
sg22
g23
sg24
g25
sg14
g60
sg46
g30
(g61
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp165
sa(dp166
S'trials.thisIndex'
p167
g30
(g51
S'\x0c\x00\x00\x00'
tRp168
sg42
S'word3.19'
p169
sS'trials.thisRepN'
p170
I0
sg27
g28
sg44
g55
sg29
g33
sS'trials.thisN'
p171
I12
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp172
sg26
g11
sS'trials.thisTrialN'
p173
I12
sg45
g59
sg22
g23
sg24
g25
sg14
g60
sg46
g30
(g61
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp174
sa(dp175
S'trials.thisIndex'
p176
g30
(g51
S'\r\x00\x00\x00'
tRp177
sg42
S'word1.17'
p178
sS'trials.thisRepN'
p179
I0
sg27
g28
sg44
g68
sg29
g33
sS'trials.thisN'
p180
I13
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp181
sg26
g11
sS'trials.thisTrialN'
p182
I13
sg45
g72
sg22
g23
sg24
g25
sg14
g60
sg46
g30
(g61
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp183
sa(dp184
S'trials.thisIndex'
p185
g30
(g51
S'\x0e\x00\x00\x00'
tRp186
sg42
S'word2.26'
p187
sS'trials.thisRepN'
p188
I0
sg27
g28
sg44
g79
sg29
g33
sS'trials.thisN'
p189
I14
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp190
sg26
g11
sS'trials.thisTrialN'
p191
I14
sg45
g83
sg22
g23
sg24
g25
sg14
g60
sg46
g30
(g61
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp192
sa(dp193
S'trials.thisIndex'
p194
g30
(g51
S'\x0f\x00\x00\x00'
tRp195
sg42
S'word3.25'
p196
sS'trials.thisRepN'
p197
I0
sg27
g28
sg44
g55
sg29
g33
sS'trials.thisN'
p198
I15
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp199
sg26
g11
sS'trials.thisTrialN'
p200
I15
sg45
g59
sg22
g23
sg24
g25
sg14
g60
sg46
g30
(g61
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp201
sa(dp202
S'trials.thisIndex'
p203
g30
(g51
S'\x10\x00\x00\x00'
tRp204
sg42
S'word1.18'
p205
sS'trials.thisRepN'
p206
I0
sg27
g28
sg44
g68
sg29
g33
sS'trials.thisN'
p207
I16
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp208
sg26
g11
sS'trials.thisTrialN'
p209
I16
sg45
g72
sg22
g23
sg24
g25
sg14
g60
sg46
g30
(g61
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp210
sa(dp211
S'trials.thisIndex'
p212
g30
(g51
S'\x11\x00\x00\x00'
tRp213
sg42
S'word2.17'
p214
sS'trials.thisRepN'
p215
I0
sg27
g28
sg44
g79
sg29
g33
sS'trials.thisN'
p216
I17
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp217
sg26
g11
sS'trials.thisTrialN'
p218
I17
sg45
g83
sg22
g23
sg24
g25
sg14
S'other'
p219
sg46
g30
(g61
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp220
sa(dp221
S'trials.thisIndex'
p222
g30
(g51
S'\x12\x00\x00\x00'
tRp223
sg42
S'word3.11'
p224
sS'trials.thisRepN'
p225
I0
sg27
g28
sg44
g55
sg29
g33
sS'trials.thisN'
p226
I18
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp227
sg26
g11
sS'trials.thisTrialN'
p228
I18
sg45
g59
sg22
g23
sg24
g25
sg14
g219
sg46
g30
(g61
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp229
sa(dp230
S'trials.thisIndex'
p231
g30
(g51
S'\x13\x00\x00\x00'
tRp232
sg42
S'word1.9'
p233
sS'trials.thisRepN'
p234
I0
sg27
g28
sg44
g68
sg29
g33
sS'trials.thisN'
p235
I19
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp236
sg26
g11
sS'trials.thisTrialN'
p237
I19
sg45
g72
sg22
g23
sg24
g25
sg14
g219
sg46
g30
(g61
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp238
sa(dp239
S'trials.thisIndex'
p240
g30
(g51
S'\x14\x00\x00\x00'
tRp241
sg42
S'word2.7'
p242
sS'trials.thisRepN'
p243
I0
sg27
g28
sg44
g79
sg29
g33
sS'trials.thisN'
p244
I20
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp245
sg26
g11
sS'trials.thisTrialN'
p246
I20
sg45
g83
sg22
g23
sg24
g25
sg14
g219
sg46
g30
(g61
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp247
sa(dp248
S'trials.thisIndex'
p249
g30
(g51
S'\x15\x00\x00\x00'
tRp250
sg42
S'word3.29'
p251
sS'trials.thisRepN'
p252
I0
sg27
g28
sg44
g55
sg29
g33
sS'trials.thisN'
p253
I21
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp254
sg26
g11
sS'trials.thisTrialN'
p255
I21
sg45
g59
sg22
g23
sg24
g25
sg14
g219
sg46
g30
(g61
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp256
sa(dp257
S'trials.thisIndex'
p258
g30
(g51
S'\x16\x00\x00\x00'
tRp259
sg42
S'word1.15'
p260
sS'trials.thisRepN'
p261
I0
sg27
g28
sg44
g68
sg29
g33
sS'trials.thisN'
p262
I22
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp263
sg26
g11
sS'trials.thisTrialN'
p264
I22
sg45
g72
sg22
g23
sg24
g25
sg14
g219
sg46
g30
(g61
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp265
sa(dp266
S'trials.thisIndex'
p267
g30
(g51
S'\x17\x00\x00\x00'
tRp268
sg42
S'word2.15'
p269
sS'trials.thisRepN'
p270
I0
sg27
g28
sg44
g79
sg29
g33
sS'trials.thisN'
p271
I23
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp272
sg26
g11
sS'trials.thisTrialN'
p273
I23
sg45
g83
sg22
g23
sg24
g25
sg14
g219
sg46
g30
(g61
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp274
sa(dp275
S'trials.thisIndex'
p276
g30
(g51
S'\x18\x00\x00\x00'
tRp277
sg42
S'word3.14'
p278
sS'trials.thisRepN'
p279
I0
sg27
g28
sg44
g55
sg29
g33
sS'trials.thisN'
p280
I24
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp281
sg26
g11
sS'trials.thisTrialN'
p282
I24
sg45
g59
sg22
g23
sg24
g25
sg14
g219
sg46
g30
(g61
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp283
sa(dp284
S'trials.thisIndex'
p285
g30
(g51
S'\x19\x00\x00\x00'
tRp286
sg42
S'word1.14'
p287
sS'trials.thisRepN'
p288
I0
sg27
g28
sg44
g68
sg29
g33
sS'trials.thisN'
p289
I25
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp290
sg26
g11
sS'trials.thisTrialN'
p291
I25
sg45
g72
sg22
g23
sg24
g25
sg14
g219
sg46
g30
(g61
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp292
sa(dp293
S'trials.thisIndex'
p294
g30
(g51
S'\x1a\x00\x00\x00'
tRp295
sg42
S'word2.10'
p296
sS'trials.thisRepN'
p297
I0
sg27
g28
sg44
g79
sg29
g33
sS'trials.thisN'
p298
I26
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp299
sg26
g11
sS'trials.thisTrialN'
p300
I26
sg45
g83
sg22
g23
sg24
g25
sg14
g219
sg46
g30
(g61
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp301
sa(dp302
g18
g30
(g32
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp303
sg42
S'word3.17'
p304
sg17
g229
sS'trials.thisRepN'
p305
I0
sg27
g28
sg44
g55
sg29
g33
sg14
g219
sg22
g23
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp306
sg26
g11
sS'trials.thisTrialN'
p307
I27
sg45
g59
sS'trials.thisIndex'
p308
g30
(g51
S'\x1b\x00\x00\x00'
tRp309
sg16
g299
sg24
g25
sS'trials.thisN'
p310
I27
sg15
g229
sg46
g30
(g61
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp311
sasS'loops'
p312
(lp313
g1
(cpsychopy.data
TrialHandler
p314
g3
NtRp315
(dp316
S'origin'
p317
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things like STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000a\u000a# Ensure that relative paths start from the same directory as this script\u000a_thisDir = os.path.dirname(os.path.abspath(__file__))\u000aos.chdir(_thisDir)\u000a\u000a# Store info about the experiment session\u000aexpName = 'source_monitoring'  # from the Builder filename that created this script\u000aexpInfo = {}\u000a\u000amyDlg = gui.Dlg(title=expName, size=gui.wx.Size(-1,-75))\u000amyDlg.addField(u'participant: ', u'')\u000amyDlg.addField('word lists: ', choices=['random','set your own']) \u000amyDlg.show()\u000aif myDlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['participant'] = myDlg.data[0]\u000aexpInfo['listMethod'] = myDlg.data[1]\u000aprint expInfo['listMethod']\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a\u000aif expInfo['listMethod']=='set your own':\u000a    myDlg2 = gui.Dlg(title='Set Word Lists')\u000a    conditions = ['unmodified', 'pitch - higher', 'pitch - lower']\u000a    for cNum in range(len(conditions)):\u000a        myDlg2.addField(conditions[cNum], choices=[1,2,3], initial=cNum+1)\u000a    myDlg2.show()\u000a    if myDlg2.OK == False: core.quit()  # user pressed cancel\u000a    expInfo['listOrder'] = myDlg2.data\u000a    \u000afrom psychopy import visual\u000a\u000a# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc\u000afilename = _thisDir + os.sep + 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# Setup the Window\u000awin = visual.Window(size=(1440, 900), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color=[-1,-1,-1], colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a# Initialize components for Routine "initialize_code"\u000ainitialize_codeClock = core.Clock()\u000afrom psychopy import gui\u000afrom pyo import *\u000aimport math, sys, csv, random\u000afrom collections import OrderedDict\u000aserv = Server().boot()\u000a\u000a## SETTINGS ##\u000a\u000a# This is the amount to change the pitch on each block of trials (both higher and lower)\u000aPITCH_DELTA = 0.5\u000a\u000a# This is the word list file\u000aWORD_LIST_FILE = "wordlist.csv"\u000a\u000a# Colors of the choice buttons\u000aSELF_BOX_FILL_COLOR = '#A6A9FF'\u000aSELF_BOX_BORDER_COLOR = '#3E45FA'\u000aOTHER_BOX_FILL_COLOR = '#FFFCA6'\u000aOTHER_BOX_BORDER_COLOR = '#FAF33E'\u000a\u000a## END SETTINGS ##\u000a\u000a\u000a# this function ends a routine immediately\u000adef endRoutine():\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "status"):\u000a            thisComponent.status = FINISHED\u000a        continueRoutine = False\u000a\u000a\u000a# initialize this variable - it keeps track of whether \u000a# the subject is finished speaking during a time stretch trial\u000afinished = True\u000a\u000a##########################################################\u000a### read in the original word list file and save word list file for this subject\u000a##########################################################\u000a# container array for file contents\u000aorig_words = []\u000a# read csv file with the original word lists (in same directory as this experiment script)\u000awith open(WORD_LIST_FILE, 'rU') as csvfile:\u000a    test = csv.reader(csvfile)\u000a    for i in test:\u000a        orig_words.append(i)\u000a\u000a# depending on experiementer's selection at run time, either randomize word lists or\u000a# use the experimenter's order\u000adef fixList(x):\u000a    return int(x)-1\u000a\u000aif expInfo['listMethod']=='set your own':\u000a    assignment_order = map(fixList, expInfo['listOrder'])\u000aelse:\u000a    assignment_order = random.sample([0,1,2], 3)\u000a\u000a# initialize word containers for the trial types\u000aunmodified_words = []\u000apitch_higher_words = []\u000apitch_lower_words = []\u000a\u000a# assign words to those containers\u000afor row in orig_words:\u000a    unmodified_words.append(row[assignment_order[0]])\u000a    pitch_higher_words.append(row[assignment_order[1]])\u000a    pitch_lower_words.append(row[assignment_order[2]])\u000a\u000a# save word lists for each trial type\u000aunmodified_word_list = unmodified_words.pop(0)\u000apitch_higher_word_list = pitch_higher_words.pop(0)\u000apitch_lower_word_list = pitch_lower_words.pop(0)\u000a\u000a# randomize words in their lists\u000arandom.shuffle(unmodified_words)\u000arandom.shuffle(pitch_higher_words)\u000arandom.shuffle(pitch_lower_words)\u000a\u000a# this will be the name of the wordlist csv file for this subject\u000awordlist_filename = filename+'_wordlist.csv'\u000aresults_filename = filename+'_summarized_results.csv'\u000a\u000a# build a big array with all the words and also attach trialtype, block, and amount data,\u000a# like this: [block, word, trialtype, amount, list]\u000amaster_list = []\u000a\u000a# start pitch change at 0\u000apitch_amount = 0\u000a\u000a# create blocks of 9 words and add them to master list\u000afor block_num in range(10):\u000a    block_words = []\u000a    pitch_amount = pitch_amount + PITCH_DELTA\u000a    for i in range(3):\u000a        word_index = block_num * 3 + i\u000a        block_words.append([block_num, unmodified_words[word_index], 'unmodified', 0, unmodified_word_list])\u000a        block_words.append([block_num, pitch_higher_words[word_index], 'pitch higher', pitch_amount, pitch_higher_word_list])\u000a        block_words.append([block_num, pitch_lower_words[word_index], 'pitch lower', -1 * pitch_amount, pitch_lower_word_list])\u000a    master_list += block_words\u000a\u000a# save csv file to disk\u000awith open(wordlist_filename,'wb') as w:\u000a    writer=csv.writer(w)\u000a    writer.writerow(['block', 'word', 'trialtype', 'amount', 'list'])\u000a    for row in master_list:\u000a        writer.writerow(row)\u000a\u000a# create container for stats\u000a# this keeps track of how many times the subject chooses "other" for\u000a#   each trial type per block\u000a# it gets reset each block\u000achoice_stats = OrderedDict()\u000achoice_stats['unmodified'] = 0 # we shouldn't need this one\u000achoice_stats['pitch higher'] = 0\u000achoice_stats['pitch lower'] = 0\u000achoice_stats['pitch higher block'] = 0\u000achoice_stats['pitch lower block'] = 0\u000achoice_stats['pitch higher amount'] = 0\u000achoice_stats['pitch lower amount'] = 0\u000a\u000a# these hold the "done" status for each pitch trial type\u000apitch_higher_done = False\u000apitch_lower_done = False\u000a\u000a# start with block number = 0\u000athis_block = 0\u000a\u000a# Initialize components for Routine "instructions"\u000ainstructionsClock = core.Clock()\u000atext_4 = visual.TextStim(win=win, ori=0, name='text_4',\u000a    text='Instructions will go here.',    font='Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aserv.start()\u000amic = Input(chnl=0)\u000atext = visual.TextStim(win=win, ori=0, name='text',\u000a    text='default text',    font='Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=-1.0)\u000a\u000a# Initialize components for Routine "choose_source"\u000achoose_sourceClock = core.Clock()\u000aquestion = visual.TextStim(win=win, ori=0, name='question',\u000a    text='Whose voice did you hear?',    font='Arial',\u000a    pos=[0, .5], height=0.1, wrapWidth=2,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000aself_box = visual.Rect(win=win, name='self_box',\u000a    width=[0.5, 0.5][0], height=[0.5, 0.5][1],\u000a    ori=0, pos=[-.5, -.5],\u000a    lineWidth=5, lineColor=SELF_BOX_BORDER_COLOR, lineColorSpace='rgb',\u000a    fillColor=SELF_BOX_FILL_COLOR, fillColorSpace='rgb',\u000a    opacity=1,depth=-1.0, \u000ainterpolate=True)\u000aself_label = visual.TextStim(win=win, ori=0, name='self_label',\u000a    text='Mine',    font='Arial',\u000a    pos=[-.5, -.5], height=0.1, wrapWidth=None,\u000a    color='black', colorSpace='rgb', opacity=1,\u000a    depth=-2.0)\u000aother_box = visual.Rect(win=win, name='other_box',\u000a    width=[0.5, 0.5][0], height=[0.5, 0.5][1],\u000a    ori=0, pos=[.5, -.5],\u000a    lineWidth=5, lineColor=OTHER_BOX_BORDER_COLOR, lineColorSpace='rgb',\u000a    fillColor=OTHER_BOX_FILL_COLOR, fillColorSpace='rgb',\u000a    opacity=1,depth=-3.0, \u000ainterpolate=True)\u000aother_label = visual.TextStim(win=win, ori=0, name='other_label',\u000a    text='Other',    font='Arial',\u000a    pos=[.5, -.5], height=0.1, wrapWidth=None,\u000a    color='black', colorSpace='rgb', opacity=1,\u000a    depth=-4.0)\u000amouse = event.Mouse(win=win)\u000ax, y = [None, None]\u000a\u000a\u000a# Initialize components for Routine "thankyou"\u000athankyouClock = core.Clock()\u000atext_3 = visual.TextStim(win=win, ori=0, name='text_3',\u000a    text=u'Thank you for participating!',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a\u000a# Initialize components for Routine "display_results"\u000adisplay_resultsClock = core.Clock()\u000aresults_text = visual.TextStim(win=win, ori=0, name='results_text',\u000a    text='default text',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=2,\u000a    color=u'white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "initialize_code"-------\u000at = 0\u000ainitialize_codeClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000a\u000a# keep track of which components have finished\u000ainitialize_codeComponents = []\u000afor thisComponent in initialize_codeComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "initialize_code"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = initialize_codeClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in initialize_codeComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "initialize_code"-------\u000afor thisComponent in initialize_codeComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a\u000a# the Routine "initialize_code" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a#------Prepare to start Routine "instructions"-------\u000at = 0\u000ainstructionsClock.reset()  # clock \u000aframeN = -1\u000aroutineTimer.add(5.000000)\u000a# update component parameters for each repeat\u000a# keep track of which components have finished\u000ainstructionsComponents = []\u000ainstructionsComponents.append(text_4)\u000afor thisComponent in instructionsComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instructions"-------\u000acontinueRoutine = True\u000awhile continueRoutine and routineTimer.getTime() > 0:\u000a    # get current time\u000a    t = instructionsClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *text_4* updates\u000a    if t >= 0.0 and text_4.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        text_4.tStart = t  # underestimates by a little under one frame\u000a        text_4.frameNStart = frameN  # exact frame index\u000a        text_4.setAutoDraw(True)\u000a    if text_4.status == STARTED and t >= (0.0 + (5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a        text_4.setAutoDraw(False)\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instructionsComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "instructions"-------\u000afor thisComponent in instructionsComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a\u000a# set up handler to look after randomisation of conditions etc\u000atrials = data.TrialHandler(nReps=1, method='sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(wordlist_filename),\u000a    seed=None, name='trials')\u000athisExp.addLoop(trials)  # add the loop to the experiment\u000athisTrial = trials.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisTrial.rgb)\u000aif thisTrial != None:\u000a    for paramName in thisTrial.keys():\u000a        exec(paramName + '= thisTrial.' + paramName)\u000a\u000afor thisTrial in trials:\u000a    currentLoop = trials\u000a    # abbreviate parameter names if possible (e.g. rgb = thisTrial.rgb)\u000a    if thisTrial != None:\u000a        for paramName in thisTrial.keys():\u000a            exec(paramName + '= thisTrial.' + paramName)\u000a    \u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(11.000000)\u000a    # update component parameters for each repeat\u000a    # check for new block. \u000a    # if it's a new block, check if previous block had 3 "other" votes for either pitch type\u000a    # if so,  1) record appropriate block number for that type\u000a    #  2) set "done" flag to true for that type\u000a    # if both pitch types are done, end the trials loop\u000a    if(block != this_block):\u000a        this_amount = trials.getEarlierTrial(-1).amount\u000a        if(choice_stats['pitch higher'] == 3):\u000a            thisExp.addData('pitch higher result block', this_block)\u000a            thisExp.addData('pitch higher result amount', this_amount)\u000a            choice_stats['pitch higher block'] = this_block\u000a            choice_stats['pitch higher amount'] = this_amount\u000a            pitch_higher_done = True\u000a        if(choice_stats['pitch lower'] == 3):\u000a            thisExp.addData('pitch lower result block', this_block)\u000a            thisExp.addData('pitch lower result amount', -1 * this_amount)\u000a            choice_stats['pitch lower block'] = this_block\u000a            choice_stats['pitch lower amount'] = this_amount\u000a            pitch_lower_done = True\u000a        if(pitch_lower_done and pitch_higher_done):\u000a            trials.finished = True\u000a            endRoutine()\u000a        this_block = block\u000a        choice_stats['pitch higher'] = 0\u000a        choice_stats['pitch lower'] = 0\u000a    \u000a    \u000a    b = Harmonizer(mic, transpo=float(amount))\u000a    c = Gate(b, thresh=-90, falltime=0.02, lookahead=20.0).mix(2).out()\u000a    d = Follower2(b)\u000a    talkThresh = .08\u000a    talkStarted = False\u000a    stoppedTalking = False\u000a    stopTime = 100\u000a    \u000a    text.setText(word)\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(text)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        if d.get() > talkThresh:\u000a                talkStarted = True\u000a        \u000a        if talkStarted and not stoppedTalking:\u000a            if d.get() < talkThresh:\u000a                stoppedTalking = True\u000a                stopTime = globalClock.getTime() + 1\u000a        \u000a        if stoppedTalking and globalClock.getTime() >= stopTime:\u000a            b.stop()\u000a            endRoutine()\u000a        \u000a        \u000a        # *text* updates\u000a        if t >= 1 and text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            text.tStart = t  # underestimates by a little under one frame\u000a            text.frameNStart = frameN  # exact frame index\u000a            text.setAutoDraw(True)\u000a        if text.status == STARTED and t >= (1 + (10-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            text.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    \u000a    \u000a    #------Prepare to start Routine "choose_source"-------\u000a    t = 0\u000a    choose_sourceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # setup some python lists for storing info about the mouse\u000a    if(pitch_lower_done and pitch_higher_done):\u000a        endRoutine()\u000a    # keep track of which components have finished\u000a    choose_sourceComponents = []\u000a    choose_sourceComponents.append(question)\u000a    choose_sourceComponents.append(self_box)\u000a    choose_sourceComponents.append(self_label)\u000a    choose_sourceComponents.append(other_box)\u000a    choose_sourceComponents.append(other_label)\u000a    choose_sourceComponents.append(mouse)\u000a    for thisComponent in choose_sourceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choose_source"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choose_sourceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *question* updates\u000a        if t >= 0.0 and question.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            question.tStart = t  # underestimates by a little under one frame\u000a            question.frameNStart = frameN  # exact frame index\u000a            question.setAutoDraw(True)\u000a        \u000a        # *self_box* updates\u000a        if t >= 0.0 and self_box.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            self_box.tStart = t  # underestimates by a little under one frame\u000a            self_box.frameNStart = frameN  # exact frame index\u000a            self_box.setAutoDraw(True)\u000a        \u000a        # *self_label* updates\u000a        if t >= 0.0 and self_label.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            self_label.tStart = t  # underestimates by a little under one frame\u000a            self_label.frameNStart = frameN  # exact frame index\u000a            self_label.setAutoDraw(True)\u000a        \u000a        # *other_box* updates\u000a        if t >= 0.0 and other_box.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            other_box.tStart = t  # underestimates by a little under one frame\u000a            other_box.frameNStart = frameN  # exact frame index\u000a            other_box.setAutoDraw(True)\u000a        \u000a        # *other_label* updates\u000a        if t >= 0.0 and other_label.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            other_label.tStart = t  # underestimates by a little under one frame\u000a            other_label.frameNStart = frameN  # exact frame index\u000a            other_label.setAutoDraw(True)\u000a        if mouse.isPressedIn(self_box, buttons=[0]):\u000a            trials.addData('choice', 'self')\u000a            for thisComponent in trialComponents:\u000a                    if hasattr(thisComponent, "status"):\u000a                        thisComponent.status = FINISHED\u000a                    continueRoutine = False\u000a        elif mouse.isPressedIn(other_box, buttons=[0]):\u000a            trials.addData('choice','other')\u000a            choice_stats[trialtype] += 1\u000a            for thisComponent in trialComponents:\u000a                    if hasattr(thisComponent, "status"):\u000a                        thisComponent.status = FINISHED\u000a                    continueRoutine = False\u000a        \u000a        if self_box.contains(mouse):\u000a            self_box.fillColor = SELF_BOX_BORDER_COLOR\u000a        else:\u000a            self_box.fillColor = SELF_BOX_FILL_COLOR\u000a        \u000a        if other_box.contains(mouse):\u000a            other_box.fillColor = OTHER_BOX_BORDER_COLOR\u000a        else:\u000a            other_box.fillColor = OTHER_BOX_FILL_COLOR\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choose_sourceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choose_source"-------\u000a    for thisComponent in choose_sourceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for trials (TrialHandler)\u000a    \u000a    # the Routine "choose_source" was not non-slip safe, so reset the non-slip timer\u000a    routineTimer.reset()\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'trials'\u000a\u000a\u000a#------Prepare to start Routine "thankyou"-------\u000at = 0\u000athankyouClock.reset()  # clock \u000aframeN = -1\u000aroutineTimer.add(5.000000)\u000a# update component parameters for each repeat\u000a\u000a\u000a\u000a# keep track of which components have finished\u000athankyouComponents = []\u000athankyouComponents.append(text_3)\u000afor thisComponent in thankyouComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "thankyou"-------\u000acontinueRoutine = True\u000awhile continueRoutine and routineTimer.getTime() > 0:\u000a    # get current time\u000a    t = thankyouClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *text_3* updates\u000a    if t >= 0.0 and text_3.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        text_3.tStart = t  # underestimates by a little under one frame\u000a        text_3.frameNStart = frameN  # exact frame index\u000a        text_3.setAutoDraw(True)\u000a    if text_3.status == STARTED and t >= (0.0 + (5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a        text_3.setAutoDraw(False)\u000a    \u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in thankyouComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "thankyou"-------\u000afor thisComponent in thankyouComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000aresults = '\u005cn\u005cr'\u000a\u000aresults += 'Pitch (higher) block = ' + str(choice_stats['pitch higher block']) + '\u005cn\u005cr'\u000aresults += 'Pitch (lower) block = ' + str(choice_stats['pitch lower block']) + '\u005cn\u005cr'\u000aresult += '\u005cn\u005cr'\u000aresults += 'Pitch (higher) amount = ' + str(choice_stats['pitch higher amount']) + '\u005cn\u005cr'\u000aresults += 'Pitch (lower) amount = ' + str(choice_stats['pitch lower amount']) + '\u005cn\u005cr'\u000a\u000a\u000a\u000a\u000a#------Prepare to start Routine "display_results"-------\u000at = 0\u000adisplay_resultsClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000aresults_text.setText(results)\u000akey_resp_2 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_2.status = NOT_STARTED\u000a# keep track of which components have finished\u000adisplay_resultsComponents = []\u000adisplay_resultsComponents.append(results_text)\u000adisplay_resultsComponents.append(key_resp_2)\u000afor thisComponent in display_resultsComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "display_results"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = display_resultsClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *results_text* updates\u000a    if t >= 0.0 and results_text.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        results_text.tStart = t  # underestimates by a little under one frame\u000a        results_text.frameNStart = frameN  # exact frame index\u000a        results_text.setAutoDraw(True)\u000a    \u000a    # *key_resp_2* updates\u000a    if t >= 0.0 and key_resp_2.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_2.tStart = t  # underestimates by a little under one frame\u000a        key_resp_2.frameNStart = frameN  # exact frame index\u000a        key_resp_2.status = STARTED\u000a        # keyboard checking is just starting\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_2.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['esc'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in display_resultsComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "display_results"-------\u000afor thisComponent in display_resultsComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# the Routine "display_results" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000aserv.stop()\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p318
sS'thisTrial'
p319
g1
(cpsychopy.data
TrialType
p320
c__builtin__
dict
p321
(dp322
g44
g55
sg43
g306
sg42
g304
sg45
g59
sg46
g311
stRp323
sS'_exp'
p324
I179751312
sg10
S'trials'
p325
sg6
S'/Volumes/Macintosh HD/Users/poppe076/Desktop/source_monitoring_task/source_monitoring.py'
p326
sS'thisRepN'
p327
I0
sg19
I01
sg20
g21
sS'data'
p328
g1
(cpsychopy.data
DataHandler
p329
g321
(dp330
S'ran'
p331
cnumpy.ma.core
_mareconstruct
p332
(cnumpy.ma.core
MaskedArray
p333
cnumpy
ndarray
p334
(I0
tp335
S'b'
tRp336
(I1
(I90
I1
tg31
(S'f4'
I0
I1
tRp337
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p338
g332
(g333
g334
g335
S'b'
tRp339
(I1
(I90
I1
tg337
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
Ntbsg14
cnumpy.core.multiarray
_reconstruct
p340
(g334
(I0
tS'b'
tRp341
(I1
(I90
I1
tg31
(S'O4'
I0
I1
tRp342
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp343
g60
ag60
ag60
ag60
ag60
ag60
ag60
ag60
ag60
ag60
ag60
ag60
ag60
ag60
ag60
ag60
ag60
ag219
ag219
ag219
ag219
ag219
ag219
ag219
ag219
ag219
ag219
ag219
aS'--'
p344
aS'--'
p345
aS'--'
p346
aS'--'
p347
aS'--'
p348
aS'--'
p349
aS'--'
p350
aS'--'
p351
aS'--'
p352
aS'--'
p353
aS'--'
p354
aS'--'
p355
aS'--'
p356
aS'--'
p357
aS'--'
p358
aS'--'
p359
aS'--'
p360
aS'--'
p361
aS'--'
p362
aS'--'
p363
aS'--'
p364
aS'--'
p365
aS'--'
p366
aS'--'
p367
aS'--'
p368
aS'--'
p369
aS'--'
p370
aS'--'
p371
aS'--'
p372
aS'--'
p373
aS'--'
p374
aS'--'
p375
aS'--'
p376
aS'--'
p377
aS'--'
p378
aS'--'
p379
aS'--'
p380
aS'--'
p381
aS'--'
p382
aS'--'
p383
aS'--'
p384
aS'--'
p385
aS'--'
p386
aS'--'
p387
aS'--'
p388
aS'--'
p389
aS'--'
p390
aS'--'
p391
aS'--'
p392
aS'--'
p393
aS'--'
p394
aS'--'
p395
aS'--'
p396
aS'--'
p397
aS'--'
p398
aS'--'
p399
aS'--'
p400
aS'--'
p401
aS'--'
p402
aS'--'
p403
aS'--'
p404
aS'--'
p405
atbstRp406
(dp407
S'isNumeric'
p408
(dp409
g331
I01
sg338
I01
sg14
I00
ssg325
g315
sS'dataTypes'
p410
(lp411
g331
ag338
ag14
asS'dataShape'
p412
(lp413
I90
aI1
asbsS'method'
p414
S'sequential'
p415
sS'sequenceIndices'
p416
g340
(g334
(I0
tS'b'
tRp417
(I1
(I90
I1
tg51
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00'
tbsS'finished'
p418
I01
sS'nReps'
p419
I1
sS'nRemaining'
p420
I61
sS'trialList'
p421
(lp422
g1
(g320
g321
(dp423
g44
g55
sg43
g57
sg42
g53
sg45
g59
sg46
g62
stRp424
ag1
(g320
g321
(dp425
g44
g68
sg43
g70
sg42
g66
sg45
g72
sg46
g73
stRp426
ag1
(g320
g321
(dp427
g44
g79
sg43
g81
sg42
g77
sg45
g83
sg46
g84
stRp428
ag1
(g320
g321
(dp429
g44
g55
sg43
g91
sg42
g88
sg45
g59
sg46
g93
stRp430
ag1
(g320
g321
(dp431
g44
g68
sg43
g100
sg42
g97
sg45
g72
sg46
g102
stRp432
ag1
(g320
g321
(dp433
g44
g79
sg43
g109
sg42
g106
sg45
g83
sg46
g111
stRp434
ag1
(g320
g321
(dp435
g44
g55
sg43
g118
sg42
g115
sg45
g59
sg46
g120
stRp436
ag1
(g320
g321
(dp437
g44
g68
sg43
g127
sg42
g124
sg45
g72
sg46
g129
stRp438
ag1
(g320
g321
(dp439
g44
g79
sg43
g136
sg42
g133
sg45
g83
sg46
g138
stRp440
ag1
(g320
g321
(dp441
g44
g55
sg43
g145
sg42
g142
sg45
g59
sg46
g147
stRp442
ag1
(g320
g321
(dp443
g44
g68
sg43
g154
sg42
g151
sg45
g72
sg46
g156
stRp444
ag1
(g320
g321
(dp445
g44
g79
sg43
g163
sg42
g160
sg45
g83
sg46
g165
stRp446
ag1
(g320
g321
(dp447
g44
g55
sg43
g172
sg42
g169
sg45
g59
sg46
g174
stRp448
ag1
(g320
g321
(dp449
g44
g68
sg43
g181
sg42
g178
sg45
g72
sg46
g183
stRp450
ag1
(g320
g321
(dp451
g44
g79
sg43
g190
sg42
g187
sg45
g83
sg46
g192
stRp452
ag1
(g320
g321
(dp453
g44
g55
sg43
g199
sg42
g196
sg45
g59
sg46
g201
stRp454
ag1
(g320
g321
(dp455
g44
g68
sg43
g208
sg42
g205
sg45
g72
sg46
g210
stRp456
ag1
(g320
g321
(dp457
g44
g79
sg43
g217
sg42
g214
sg45
g83
sg46
g220
stRp458
ag1
(g320
g321
(dp459
g44
g55
sg43
g227
sg42
g224
sg45
g59
sg46
g229
stRp460
ag1
(g320
g321
(dp461
g44
g68
sg43
g236
sg42
g233
sg45
g72
sg46
g238
stRp462
ag1
(g320
g321
(dp463
g44
g79
sg43
g245
sg42
g242
sg45
g83
sg46
g247
stRp464
ag1
(g320
g321
(dp465
g44
g55
sg43
g254
sg42
g251
sg45
g59
sg46
g256
stRp466
ag1
(g320
g321
(dp467
g44
g68
sg43
g263
sg42
g260
sg45
g72
sg46
g265
stRp468
ag1
(g320
g321
(dp469
g44
g79
sg43
g272
sg42
g269
sg45
g83
sg46
g274
stRp470
ag1
(g320
g321
(dp471
g44
g55
sg43
g281
sg42
g278
sg45
g59
sg46
g283
stRp472
ag1
(g320
g321
(dp473
g44
g68
sg43
g290
sg42
g287
sg45
g72
sg46
g292
stRp474
ag1
(g320
g321
(dp475
g44
g79
sg43
g299
sg42
g296
sg45
g83
sg46
g301
stRp476
ag323
ag1
(g320
g321
(dp477
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp478
sg42
S'word1.21'
p479
sg45
g72
sg46
g30
(g61
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp480
stRp481
ag1
(g320
g321
(dp482
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp483
sg42
S'word2.24'
p484
sg45
g83
sg46
g30
(g61
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp485
stRp486
ag1
(g320
g321
(dp487
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp488
sg42
S'word3.1'
p489
sg45
g59
sg46
g30
(g61
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp490
stRp491
ag1
(g320
g321
(dp492
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp493
sg42
S'word1.16'
p494
sg45
g72
sg46
g30
(g61
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp495
stRp496
ag1
(g320
g321
(dp497
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp498
sg42
S'word2.28'
p499
sg45
g83
sg46
g30
(g61
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp500
stRp501
ag1
(g320
g321
(dp502
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp503
sg42
S'word3.21'
p504
sg45
g59
sg46
g30
(g61
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp505
stRp506
ag1
(g320
g321
(dp507
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp508
sg42
S'word1.23'
p509
sg45
g72
sg46
g30
(g61
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp510
stRp511
ag1
(g320
g321
(dp512
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp513
sg42
S'word2.6'
p514
sg45
g83
sg46
g30
(g61
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp515
stRp516
ag1
(g320
g321
(dp517
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp518
sg42
S'word3.2'
p519
sg45
g59
sg46
g30
(g61
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp520
stRp521
ag1
(g320
g321
(dp522
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp523
sg42
S'word1.10'
p524
sg45
g72
sg46
g30
(g61
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp525
stRp526
ag1
(g320
g321
(dp527
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp528
sg42
S'word2.27'
p529
sg45
g83
sg46
g30
(g61
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp530
stRp531
ag1
(g320
g321
(dp532
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp533
sg42
S'word3.6'
p534
sg45
g59
sg46
g30
(g61
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp535
stRp536
ag1
(g320
g321
(dp537
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp538
sg42
S'word1.29'
p539
sg45
g72
sg46
g30
(g61
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp540
stRp541
ag1
(g320
g321
(dp542
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp543
sg42
S'word2.4'
p544
sg45
g83
sg46
g30
(g61
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp545
stRp546
ag1
(g320
g321
(dp547
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp548
sg42
S'word3.23'
p549
sg45
g59
sg46
g30
(g61
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp550
stRp551
ag1
(g320
g321
(dp552
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp553
sg42
S'word1.30'
p554
sg45
g72
sg46
g30
(g61
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp555
stRp556
ag1
(g320
g321
(dp557
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp558
sg42
S'word2.29'
p559
sg45
g83
sg46
g30
(g61
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp560
stRp561
ag1
(g320
g321
(dp562
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp563
sg42
S'word3.10'
p564
sg45
g59
sg46
g30
(g61
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp565
stRp566
ag1
(g320
g321
(dp567
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp568
sg42
S'word1.12'
p569
sg45
g72
sg46
g30
(g61
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp570
stRp571
ag1
(g320
g321
(dp572
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp573
sg42
S'word2.11'
p574
sg45
g83
sg46
g30
(g61
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp575
stRp576
ag1
(g320
g321
(dp577
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp578
sg42
S'word3.20'
p579
sg45
g59
sg46
g30
(g61
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp580
stRp581
ag1
(g320
g321
(dp582
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp583
sg42
S'word1.27'
p584
sg45
g72
sg46
g30
(g61
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp585
stRp586
ag1
(g320
g321
(dp587
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp588
sg42
S'word2.18'
p589
sg45
g83
sg46
g30
(g61
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp590
stRp591
ag1
(g320
g321
(dp592
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp593
sg42
S'word3.15'
p594
sg45
g59
sg46
g30
(g61
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp595
stRp596
ag1
(g320
g321
(dp597
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp598
sg42
S'word1.4'
p599
sg45
g72
sg46
g30
(g61
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp600
stRp601
ag1
(g320
g321
(dp602
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp603
sg42
S'word2.19'
p604
sg45
g83
sg46
g30
(g61
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp605
stRp606
ag1
(g320
g321
(dp607
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp608
sg42
S'word3.3'
p609
sg45
g59
sg46
g30
(g61
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp610
stRp611
ag1
(g320
g321
(dp612
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp613
sg42
S'word1.25'
p614
sg45
g72
sg46
g30
(g61
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp615
stRp616
ag1
(g320
g321
(dp617
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp618
sg42
S'word2.9'
p619
sg45
g83
sg46
g30
(g61
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp620
stRp621
ag1
(g320
g321
(dp622
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp623
sg42
S'word3.28'
p624
sg45
g59
sg46
g30
(g61
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp625
stRp626
ag1
(g320
g321
(dp627
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp628
sg42
S'word1.11'
p629
sg45
g72
sg46
g30
(g61
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp630
stRp631
ag1
(g320
g321
(dp632
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp633
sg42
S'word2.22'
p634
sg45
g83
sg46
g30
(g61
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp635
stRp636
ag1
(g320
g321
(dp637
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp638
sg42
S'word3.26'
p639
sg45
g59
sg46
g30
(g61
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp640
stRp641
ag1
(g320
g321
(dp642
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp643
sg42
S'word1.24'
p644
sg45
g72
sg46
g30
(g61
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp645
stRp646
ag1
(g320
g321
(dp647
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp648
sg42
S'word2.16'
p649
sg45
g83
sg46
g30
(g61
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp650
stRp651
ag1
(g320
g321
(dp652
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp653
sg42
S'word3.22'
p654
sg45
g59
sg46
g30
(g61
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp655
stRp656
ag1
(g320
g321
(dp657
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp658
sg42
S'word1.19'
p659
sg45
g72
sg46
g30
(g61
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp660
stRp661
ag1
(g320
g321
(dp662
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp663
sg42
S'word2.13'
p664
sg45
g83
sg46
g30
(g61
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp665
stRp666
ag1
(g320
g321
(dp667
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp668
sg42
S'word3.5'
p669
sg45
g59
sg46
g30
(g61
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp670
stRp671
ag1
(g320
g321
(dp672
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp673
sg42
S'word1.2'
p674
sg45
g72
sg46
g30
(g61
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp675
stRp676
ag1
(g320
g321
(dp677
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp678
sg42
S'word2.21'
p679
sg45
g83
sg46
g30
(g61
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp680
stRp681
ag1
(g320
g321
(dp682
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp683
sg42
S'word3.7'
p684
sg45
g59
sg46
g30
(g61
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp685
stRp686
ag1
(g320
g321
(dp687
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp688
sg42
S'word1.28'
p689
sg45
g72
sg46
g30
(g61
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp690
stRp691
ag1
(g320
g321
(dp692
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp693
sg42
S'word2.5'
p694
sg45
g83
sg46
g30
(g61
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp695
stRp696
ag1
(g320
g321
(dp697
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp698
sg42
S'word3.9'
p699
sg45
g59
sg46
g30
(g61
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp700
stRp701
ag1
(g320
g321
(dp702
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp703
sg42
S'word1.20'
p704
sg45
g72
sg46
g30
(g61
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp705
stRp706
ag1
(g320
g321
(dp707
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp708
sg42
S'word2.2'
p709
sg45
g83
sg46
g30
(g61
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp710
stRp711
ag1
(g320
g321
(dp712
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp713
sg42
S'word3.24'
p714
sg45
g59
sg46
g30
(g61
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp715
stRp716
ag1
(g320
g321
(dp717
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp718
sg42
S'word1.13'
p719
sg45
g72
sg46
g30
(g61
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp720
stRp721
ag1
(g320
g321
(dp722
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp723
sg42
S'word2.14'
p724
sg45
g83
sg46
g30
(g61
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp725
stRp726
ag1
(g320
g321
(dp727
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp728
sg42
S'word3.27'
p729
sg45
g59
sg46
g30
(g61
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp730
stRp731
ag1
(g320
g321
(dp732
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp733
sg42
S'word1.6'
p734
sg45
g72
sg46
g30
(g61
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp735
stRp736
ag1
(g320
g321
(dp737
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp738
sg42
S'word2.3'
p739
sg45
g83
sg46
g30
(g61
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp740
stRp741
ag1
(g320
g321
(dp742
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp743
sg42
S'word3.12'
p744
sg45
g59
sg46
g30
(g61
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp745
stRp746
ag1
(g320
g321
(dp747
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp748
sg42
S'word1.1'
p749
sg45
g72
sg46
g30
(g61
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp750
stRp751
ag1
(g320
g321
(dp752
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp753
sg42
S'word2.25'
p754
sg45
g83
sg46
g30
(g61
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp755
stRp756
ag1
(g320
g321
(dp757
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp758
sg42
S'word3.18'
p759
sg45
g59
sg46
g30
(g61
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp760
stRp761
ag1
(g320
g321
(dp762
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp763
sg42
S'word1.5'
p764
sg45
g72
sg46
g30
(g61
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp765
stRp766
ag1
(g320
g321
(dp767
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp768
sg42
S'word2.20'
p769
sg45
g83
sg46
g30
(g61
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp770
stRp771
ag1
(g320
g321
(dp772
g44
g55
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp773
sg42
S'word3.8'
p774
sg45
g59
sg46
g30
(g61
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp775
stRp776
ag1
(g320
g321
(dp777
g44
g68
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp778
sg42
S'word1.8'
p779
sg45
g72
sg46
g30
(g61
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp780
stRp781
ag1
(g320
g321
(dp782
g44
g79
sg43
g30
(g32
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp783
sg42
S'word2.12'
p784
sg45
g83
sg46
g30
(g61
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp785
stRp786
asS'seed'
p787
NsS'thisIndex'
p788
g309
sS'thisN'
p789
I28
sS'thisTrialN'
p790
I28
sS'nTotal'
p791
I90
sS'_warnUseOfNext'
p792
I01
sbasS'savePickle'
p793
I00
sb.