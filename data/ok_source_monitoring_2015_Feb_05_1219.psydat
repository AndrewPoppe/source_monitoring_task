ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
V/Volumes/Macintosh HD/Users/poppe076/Desktop/source_monitoring_task/source_monitoring.psyexp
p7
sS'dataFileName'
p8
V/Volumes/Macintosh HD/Users/poppe076/Desktop/source_monitoring_task/data/ok_source_monitoring_2015_Feb_05_1219
p9
sS'runtimeInfo'
p10
NsS'name'
p11
Vsource_monitoring
p12
sS'dataNames'
p13
(lp14
S'choice'
p15
asS'autoLog'
p16
I01
sS'extraInfo'
p17
(dp18
S'date'
p19
V2015_Feb_05_1219
p20
sS'frameRate'
p21
cnumpy.core.multiarray
scalar
p22
(cnumpy
dtype
p23
(S'f8'
I0
I1
tRp24
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x0c\xfd\xef\xdf\xf3\xf0M@'
tRp25
sS'expName'
p26
g12
sVsession
p27
V001
p28
sVparticipant
p29
Vok
p30
ssS'loopsUnfinished'
p31
(lp32
g1
(cpsychopy.data
TrialHandler
p33
g3
NtRp34
(dp35
S'origin'
p36
V<PsychoPy2experiment version="1.81.03" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="$[-1,-1,-1]" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1440, 900]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'session': u'001', u'participant': u''}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="source_monitoring" valType="str" updates="None"/>\u000a    <Param name="logging level" val="exp" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="use prefs" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="ok">\u000a      <CodeComponent name="code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="if(trialtype == &quot;pitch&quot;): # pitch trial&#10;    mic = Input(chnl=0)&#10;    b = Harmonizer(mic, transpo=float(amount))&#10;    c = Gate(b, thresh=-90, falltime=0.02, lookahead=20.0).mix(2).out()&#10;    d = Follower2(b)&#10;    talkThresh = .08&#10;    talkStarted = False&#10;    stoppedTalking = False&#10;    stopTime = 100&#10;elif(trialtype == 'speed'): # speed trial&#10;    finished = 'not finished'&#10;    playback_speed = float(amount)&#10;    dur = 2&#10;    if playback_speed == 0:&#10;        playback_speed = pow(10,-100)&#10;    i = Input()&#10;&#10;    def start():&#10;        rec.play()&#10;        a.play().out()&#10;        tf.stop()&#10;&#10;    def stop():&#10;        i.stop()&#10;        global finished&#10;        finished = 'finished'&#10;        a.stop()&#10;        a.reset()&#10;        tf.play()&#10;&#10;    tab = NewTable(dur, chnls=2)&#10;    transpo_to_normal = math.log(1.0 / playback_speed, 2) * 12&#10;    j = Harmonizer(i, transpo=transpo_to_normal).mix(2)&#10;    k = Gate(j, thresh=-70, falltime=0.02, lookahead=20.0)&#10;    rec = TableRec(k, tab)&#10;    a = TableRead(table=tab, freq=playback_speed/dur).stop()&#10;    env = Follower(i)&#10;    th = Thresh(env, .2)&#10;    tf = TrigFunc(th, start)&#10;    tr = TrigFunc(rec['trig'], stop)&#10;else: # unmodified trial&#10;    mic = Input(chnl=0)&#10;    b = Gate(mic, thresh=-90, falltime=0.02, lookahead=20.0).mix(2).out()&#10;    d = Follower2(mic)&#10;    talkThresh = .08&#10;    talkStarted = False&#10;    stoppedTalking = False&#10;    stopTime = 100" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="if(trialtype == &quot;pitch&quot; or trialtype == &quot;unmodified&quot;):&#10;    if d.get() &gt; talkThresh:&#10;            talkStarted = True&#10;&#10;    if talkStarted and not stoppedTalking:&#10;        if d.get() &lt; talkThresh:&#10;            stoppedTalking = True&#10;            stopTime = globalClock.getTime() + 1&#10;&#10;    if stoppedTalking and globalClock.getTime() &gt;= stopTime:&#10;        mic.stop()&#10;        for thisComponent in trialComponents:&#10;            if hasattr(thisComponent, &quot;status&quot;):&#10;                thisComponent.status = FINISHED&#10;            continueRoutine = False&#10;else:&#10;    if(finished == 'finished'):&#10;        for thisComponent in trialComponents:&#10;            if hasattr(thisComponent, &quot;status&quot;):&#10;                thisComponent.status = FINISHED&#10;            continueRoutine = False" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="text_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$word" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="10" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_setup">\u000a      <CodeComponent name="code_4">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="code_4" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="thankyou">\u000a      <TextComponent name="text_3">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_3" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Thank you for participating!" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="code_6">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="code_6" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# calculate mean of stats&#10;choice_means = {}&#10;for ttype in choice_stats:&#10;    choice_means[ttype] = np.mean(choice_stats[ttype])" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="win.close()&#10;myDlg = gui.Dlg(title=&quot;Results&quot;, size=gui.wx.Size(-200,-200))&#10;for ttype in choice_means:&#10;    selfValue = &quot;%.2f&quot; % (choice_means[ttype] * 100.0)&#10;    otherValue = &quot;%.2f&quot; % (100 - choice_means[ttype] * 100.0)&#10;    myDlg.addText(ttype+': '+selfValue+'% self, '+otherValue+'% other')&#10;myDlg.show()&#10;&#10;core.quit()" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="choose_source">\u000a      <TextComponent name="question">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="question" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="2" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Whose voice did you hear?" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, .5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <PolygonComponent name="self_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="self_box" valType="code" updates="None"/>\u000a        <Param name="fillColor" val="$SELF_BOX_FILL_COLOR" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[-.5, -.5]" valType="code" updates="constant"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="lineWidth" val="5" valType="code" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="lineColor" val="$SELF_BOX_BORDER_COLOR" valType="str" updates="constant"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="nVertices" val="4" valType="int" updates="constant"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </PolygonComponent>\u000a      <TextComponent name="self_label">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="self_label" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="black" valType="str" updates="constant"/>\u000a        <Param name="text" val="Mine" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[-.5, -.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <PolygonComponent name="other_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="other_box" valType="code" updates="None"/>\u000a        <Param name="fillColor" val="$OTHER_BOX_FILL_COLOR" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[.5, -.5]" valType="code" updates="constant"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="lineWidth" val="5" valType="code" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="lineColor" val="$OTHER_BOX_BORDER_COLOR" valType="str" updates="constant"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="nVertices" val="4" valType="int" updates="constant"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </PolygonComponent>\u000a      <TextComponent name="other_label">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="other_label" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="black" valType="str" updates="constant"/>\u000a        <Param name="text" val="Other" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[.5, -.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <MouseComponent name="mouse">\u000a        <Param name="name" val="mouse" valType="code" updates="None"/>\u000a        <Param name="timeRelativeTo" val="routine" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutineOnPress" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="saveMouseState" val="never" valType="str" updates="None"/>\u000a      </MouseComponent>\u000a      <CodeComponent name="code_5">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="code_5" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="if mouse.isPressedIn(self_box, buttons=[0]):&#10;    trials.addData('choice', 'self')&#10;    choice_stats[trialtype_extended].append(1)&#10;    for thisComponent in trialComponents:&#10;            if hasattr(thisComponent, &quot;status&quot;):&#10;                thisComponent.status = FINISHED&#10;            continueRoutine = False&#10;elif mouse.isPressedIn(other_box, buttons=[0]):&#10;    trials.addData('choice','other')&#10;    choice_stats[trialtype_extended].append(0)&#10;    for thisComponent in trialComponents:&#10;            if hasattr(thisComponent, &quot;status&quot;):&#10;                thisComponent.status = FINISHED&#10;            continueRoutine = False&#10;&#10;if self_box.contains(mouse):&#10;    self_box.fillColor = SELF_BOX_BORDER_COLOR&#10;else:&#10;    self_box.fillColor = SELF_BOX_FILL_COLOR&#10;&#10;if other_box.contains(mouse):&#10;    other_box.fillColor = OTHER_BOX_BORDER_COLOR&#10;else:&#10;    other_box.fillColor = OTHER_BOX_FILL_COLOR" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="trial">\u000a      <CodeComponent name="code_2">\u000a        <Param name="Begin Experiment" val="serv.start()&#10;mic = Input(chnl=0)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="code_2" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="if(trialtype == &quot;pitch&quot;): # pitch trial&#10;    b = Harmonizer(mic, transpo=float(amount))&#10;    c = Gate(b, thresh=-90, falltime=0.02, lookahead=20.0).mix(2).out()&#10;    d = Follower2(b)&#10;    talkThresh = .08&#10;    talkStarted = False&#10;    stoppedTalking = False&#10;    stopTime = 100&#10;elif(trialtype == 'speed'): # speed trial&#10;    finished = 'not finished'&#10;    playback_speed = float(amount)&#10;    dur = 2&#10;    if playback_speed == 0:&#10;        playback_speed = pow(10,-100)&#10;&#10;    def start():&#10;        rec.play()&#10;        a.play().out()&#10;        tf.stop()&#10;&#10;    def stop():&#10;        k.stop()&#10;        global finished&#10;        finished = 'finished'&#10;        a.stop()&#10;        a.reset()&#10;        tf.play()&#10;&#10;    tab = NewTable(dur, chnls=2)&#10;    transpo_to_normal = math.log(1.0 / playback_speed, 2) * 12&#10;    j = Harmonizer(mic, transpo=transpo_to_normal).mix(2)&#10;    k = Gate(j, thresh=-70, falltime=0.02, lookahead=20.0)&#10;    rec = TableRec(k, tab)&#10;    a = TableRead(table=tab, freq=playback_speed/dur).stop()&#10;    env = Follower(mic)&#10;    th = Thresh(env, .2)&#10;    tf = TrigFunc(th, start)&#10;    tr = TrigFunc(rec['trig'], stop)&#10;else: # unmodified trial&#10;    b = Gate(mic, thresh=-90, falltime=0.02, lookahead=20.0).mix(2).out()&#10;    d = Follower2(mic)&#10;    talkThresh = .08&#10;    talkStarted = False&#10;    stoppedTalking = False&#10;    stopTime = 100" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="serv.stop()" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="if(trialtype == &quot;pitch&quot; or trialtype == &quot;unmodified&quot;):&#10;    if d.get() &gt; talkThresh:&#10;            talkStarted = True&#10;&#10;    if talkStarted and not stoppedTalking:&#10;        if d.get() &lt; talkThresh:&#10;            stoppedTalking = True&#10;            stopTime = globalClock.getTime() + 1&#10;&#10;    if stoppedTalking and globalClock.getTime() &gt;= stopTime:&#10;        b.stop()&#10;        for thisComponent in trialComponents:&#10;            if hasattr(thisComponent, &quot;status&quot;):&#10;                thisComponent.status = FINISHED&#10;            continueRoutine = False&#10;else:&#10;    if(finished == 'finished'):&#10;        for thisComponent in trialComponents:&#10;            if hasattr(thisComponent, &quot;status&quot;):&#10;                thisComponent.status = FINISHED&#10;            continueRoutine = False" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="text">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$word" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="10" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="initialize_code">\u000a      <CodeComponent name="code_3">\u000a        <Param name="Begin Experiment" val="from psychopy import gui&#10;from pyo import *&#10;import math, sys, csv, random&#10;serv = Server().boot()&#10;&#10;## SETTINGS ##&#10;&#10;SPEED_SMALL_AMOUNT = .9   #0.975&#10;SPEED_MEDIUM_AMOUNT = .8  #0.95&#10;SPEED_LARGE_AMOUNT = .7   #0.925&#10;PITCH_HIGHER_SMALL_AMOUNT = 1.5    #0.5&#10;PITCH_HIGHER_LARGE_AMOUNT = 2    #1.0&#10;PITCH_LOWER_SMALL_AMOUNT = -1.5 #-0.5&#10;PITCH_LOWER_LARGE_AMOUNT = -2 #-1.0&#10;&#10;SELF_BOX_FILL_COLOR = '#A6A9FF'&#10;SELF_BOX_BORDER_COLOR = '#3E45FA'&#10;OTHER_BOX_FILL_COLOR = '#FFFCA6'&#10;OTHER_BOX_BORDER_COLOR = '#FAF33E'&#10;&#10;## END SETTINGS ##&#10;&#10;&#10;&#10;&#10;&#10;# initialize this variable - it keeps track of whether &#10;# the subject is finished speaking during a time stretch trial&#10;finished = True&#10;&#10;##########################################################&#10;### read in the original word list file and save word list file for this subject&#10;##########################################################&#10;# container array for file contents&#10;orig_words = []&#10;# read csv file with the original word lists (in same directory as this experiment script)&#10;with open('orig_words.csv', 'rU') as csvfile:&#10;    test = csv.reader(csvfile)&#10;    for i in test:&#10;        orig_words.append(i)&#10;&#10;# for now, assignment of list to trial type is random&#10;# need to write method for letting experimenter choose assignment at run time&#10;assignment_order = random.sample([0,1,2,3,4,5,6,7,8], 9)&#10;&#10;# initialize word containers for the trial types&#10;unmodified_words1 = []&#10;unmodified_words2 = []&#10;slowed_small_words = []&#10;slowed_medium_words = []&#10;slowed_large_words = []&#10;pitch_higher_small_words = []&#10;pitch_higher_large_words = []&#10;pitch_lower_small_words = []&#10;pitch_lower_large_words = []&#10;&#10;# assign words to those containers&#10;for row in orig_words:&#10;    unmodified_words1.append(row[assignment_order[0]])&#10;    unmodified_words2.append(row[assignment_order[1]])&#10;    slowed_small_words.append(row[assignment_order[2]])&#10;    slowed_medium_words.append(row[assignment_order[3]])&#10;    slowed_large_words.append(row[assignment_order[4]])&#10;    pitch_higher_small_words.append(row[assignment_order[5]])&#10;    pitch_higher_large_words.append(row[assignment_order[6]])&#10;    pitch_lower_small_words.append(row[assignment_order[7]])&#10;    pitch_lower_large_words.append(row[assignment_order[8]])&#10;&#10;# this will be the name of the wordlist csv file for this subject&#10;wordlist_filename = filename+'_wordlist.csv'&#10;&#10;# build a big array with all the words and also attach trialtype and amount data,&#10;# like this: [word, trialtype, trialtype_extended, amount, list]&#10;master_list = []&#10;&#10;# add the words (CAREFUL! This assumes all of the categories are of equal length)&#10;for word_index in range(len(slowed_small_words)):&#10;    if word_index == 0:&#10;        continue&#10;    master_list.append([unmodified_words1[word_index], 'unmodified', 'unmodified',            'unmodified',                                        unmodified_words1[0]])&#10;    master_list.append([unmodified_words2[word_index], 'unmodified', 'unmodified',            'unmodified',                                        unmodified_words2[0]])&#10;    master_list.append([slowed_small_words[word_index],         'speed', 'slow_small',           SPEED_SMALL_AMOUNT,                slowed_small_words[0]])&#10;    master_list.append([slowed_medium_words[word_index],     'speed', 'slow_medium',       SPEED_MEDIUM_AMOUNT,             slowed_medium_words[0]])&#10;    master_list.append([slowed_large_words[word_index],         'speed', 'slow_large',             SPEED_LARGE_AMOUNT,               slowed_large_words[0]])&#10;    master_list.append([pitch_higher_small_words[word_index], 'pitch',  'pitch_higher_small', PITCH_HIGHER_SMALL_AMOUNT,  pitch_higher_small_words[0]])&#10;    master_list.append([pitch_higher_large_words[word_index], 'pitch',  'pitch_higher_large',  PITCH_HIGHER_LARGE_AMOUNT, pitch_higher_large_words[0]])&#10;    master_list.append([pitch_lower_small_words[word_index],  'pitch',  'pitch_lower_small',   PITCH_LOWER_SMALL_AMOUNT,  pitch_lower_small_words[0]])&#10;    master_list.append([pitch_lower_large_words[word_index],  'pitch',  'pitch_lower_large',    PITCH_LOWER_SMALL_AMOUNT,  pitch_lower_large_words[0]])&#10;&#10;# now randomize the list&#10;random.shuffle(master_list)&#10;&#10;# save csv file to disk&#10;with open(wordlist_filename,'wb') as w:&#10;    writer=csv.writer(w)&#10;    writer.writerow(['word','trialtype', 'trialtype_extended', 'amount', 'list'])&#10;    for row in master_list:&#10;        writer.writerow(row)&#10;&#10;# create container for stats&#10;choice_stats = {}&#10;choice_stats['unmodified'] = []&#10;choice_stats['slow_small'] = []&#10;choice_stats['slow_medium'] = []&#10;choice_stats['slow_large'] = []&#10;choice_stats['pitch_higher_small'] = []&#10;choice_stats['pitch_higher_large'] = []&#10;choice_stats['pitch_lower_small'] = []&#10;choice_stats['pitch_lower_large'] = []" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="code_3" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <TextComponent name="text_4">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_4" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Instructions will go here." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <Routine name="initialize_code"/>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials">\u000a      <Param name="conditionsFile" val="$wordlist_filename" valType="str" updates="None"/>\u000a      <Param name="name" val="trials" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial"/>\u000a    <Routine name="choose_source"/>\u000a    <LoopTerminator name="trials"/>\u000a    <Routine name="thankyou"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p37
sS'thisTrial'
p38
g1
(cpsychopy.data
TrialType
p39
c__builtin__
dict
p40
(dp41
S'list'
p42
Vlist4
p43
sS'amount'
p44
V0.8
p45
sS'word'
p46
Vword4.1
p47
sS'trialtype'
p48
Vspeed
p49
sS'trialtype_extended'
p50
Vslow_medium
p51
stRp52
sS'_exp'
p53
I210451696
sg11
S'trials'
p54
sg6
g7
sS'thisRepN'
p55
I0
sg16
I01
sg17
g18
sS'data'
p56
g1
(cpsychopy.data
DataHandler
p57
g40
(dp58
S'ran'
p59
cnumpy.ma.core
_mareconstruct
p60
(cnumpy.ma.core
MaskedArray
p61
cnumpy
ndarray
p62
(I0
tp63
S'b'
tRp64
(I1
(I9
I1
tg23
(S'f4'
I0
I1
tRp65
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p66
g60
(g61
g62
g63
S'b'
tRp67
(I1
(I9
I1
tg65
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x01'
Ntbsg15
cnumpy.core.multiarray
_reconstruct
p68
(g62
(I0
tS'b'
tRp69
(I1
(I9
I1
tg23
(S'O4'
I0
I1
tRp70
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp71
S'self'
p72
aS'other'
p73
ag72
ag72
ag73
ag72
ag73
aS'--'
p74
aS'--'
p75
atbstRp76
(dp77
S'isNumeric'
p78
(dp79
g59
I01
sg66
I01
sg15
I00
ssg54
g34
sS'dataTypes'
p80
(lp81
g59
ag66
ag15
asS'dataShape'
p82
(lp83
I9
aI1
asbsS'method'
p84
S'sequential'
p85
sS'sequenceIndices'
p86
g68
(g62
(I0
tS'b'
tRp87
(I1
(I9
I1
tg23
(S'i4'
I0
I1
tRp88
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00'
tbsS'finished'
p89
I00
sS'nReps'
p90
I1
sS'nRemaining'
p91
I1
sS'trialList'
p92
(lp93
g1
(g39
g40
(dp94
g42
Vlist2
p95
sg44
V2
sg46
Vword2.1
p96
sg48
Vpitch
p97
sg50
Vpitch_higher_large
p98
stRp99
ag1
(g39
g40
(dp100
g42
Vlist8
p101
sg44
Vunmodified
p102
sg46
Vword8.1
p103
sg48
Vunmodified
p104
sg50
Vunmodified
p105
stRp106
ag1
(g39
g40
(dp107
g42
Vlist1
p108
sg44
V1.5
p109
sg46
Vword1.1
p110
sg48
Vpitch
p111
sg50
Vpitch_higher_small
p112
stRp113
ag1
(g39
g40
(dp114
g42
Vlist5
p115
sg44
V-1.5
p116
sg46
Vword5.1
p117
sg48
Vpitch
p118
sg50
Vpitch_lower_small
p119
stRp120
ag1
(g39
g40
(dp121
g42
Vlist9
p122
sg44
Vunmodified
p123
sg46
Vword9.1
p124
sg48
Vunmodified
p125
sg50
Vunmodified
p126
stRp127
ag1
(g39
g40
(dp128
g42
Vlist6
p129
sg44
V-1.5
p130
sg46
Vword6.1
p131
sg48
Vpitch
p132
sg50
Vpitch_lower_large
p133
stRp134
ag1
(g39
g40
(dp135
g42
Vlist3
p136
sg44
V0.9
p137
sg46
Vword3.1
p138
sg48
Vspeed
p139
sg50
Vslow_small
p140
stRp141
ag52
ag1
(g39
g40
(dp142
g42
Vlist7
p143
sg44
V0.7
p144
sg46
Vword7.1
p145
sg48
Vspeed
p146
sg50
Vslow_large
p147
stRp148
asS'seed'
p149
NsS'thisIndex'
p150
g22
(g88
S'\x07\x00\x00\x00'
tRp151
sS'thisN'
p152
I7
sS'thisTrialN'
p153
I7
sS'nTotal'
p154
I9
sS'_warnUseOfNext'
p155
I01
sbasS'saveWideText'
p156
I01
sS'thisEntry'
p157
(dp158
sS'version'
p159
S''
sS'_paramNamesSoFar'
p160
(lp161
g46
ag44
ag42
ag48
ag50
asS'entries'
p162
(lp163
(dp164
g27
g28
sS'trials.thisIndex'
p165
g22
(g88
S'\x00\x00\x00\x00'
tRp166
sg21
g25
sg46
g96
sS'trials.thisRepN'
p167
I0
sg42
g95
sg50
g98
sS'trials.thisN'
p168
I0
sg44
V2
sg26
g12
sS'trials.thisTrialN'
p169
I0
sg48
g97
sg19
g20
sg29
g30
sg15
g72
sa(dp170
g27
g28
sS'trials.thisIndex'
p171
g22
(g88
S'\x01\x00\x00\x00'
tRp172
sg21
g25
sg46
g103
sS'trials.thisRepN'
p173
I0
sg42
g101
sg50
g105
sS'trials.thisN'
p174
I1
sg44
g102
sg26
g12
sS'trials.thisTrialN'
p175
I1
sg48
g104
sg19
g20
sg29
g30
sg15
g73
sa(dp176
g27
g28
sS'trials.thisIndex'
p177
g22
(g88
S'\x02\x00\x00\x00'
tRp178
sg21
g25
sg46
g110
sS'trials.thisRepN'
p179
I0
sg42
g108
sg50
g112
sS'trials.thisN'
p180
I2
sg44
g109
sg26
g12
sS'trials.thisTrialN'
p181
I2
sg48
g111
sg19
g20
sg29
g30
sg15
g72
sa(dp182
g27
g28
sS'trials.thisIndex'
p183
g22
(g88
S'\x03\x00\x00\x00'
tRp184
sg21
g25
sg46
g117
sS'trials.thisRepN'
p185
I0
sg42
g115
sg50
g119
sS'trials.thisN'
p186
I3
sg44
g116
sg26
g12
sS'trials.thisTrialN'
p187
I3
sg48
g118
sg19
g20
sg29
g30
sg15
g72
sa(dp188
g27
g28
sS'trials.thisIndex'
p189
g22
(g88
S'\x04\x00\x00\x00'
tRp190
sg21
g25
sg46
g124
sS'trials.thisRepN'
p191
I0
sg42
g122
sg50
g126
sS'trials.thisN'
p192
I4
sg44
g123
sg26
g12
sS'trials.thisTrialN'
p193
I4
sg48
g125
sg19
g20
sg29
g30
sg15
g73
sa(dp194
g27
g28
sS'trials.thisIndex'
p195
g22
(g88
S'\x05\x00\x00\x00'
tRp196
sg21
g25
sg46
g131
sS'trials.thisRepN'
p197
I0
sg42
g129
sg50
g133
sS'trials.thisN'
p198
I5
sg44
g130
sg26
g12
sS'trials.thisTrialN'
p199
I5
sg48
g132
sg19
g20
sg29
g30
sg15
g72
sa(dp200
g27
g28
sS'trials.thisIndex'
p201
g22
(g88
S'\x06\x00\x00\x00'
tRp202
sg21
g25
sg46
g138
sS'trials.thisRepN'
p203
I0
sg42
g136
sg50
g140
sS'trials.thisN'
p204
I6
sg44
g137
sg26
g12
sS'trials.thisTrialN'
p205
I6
sg48
g139
sg19
g20
sg29
g30
sg15
g73
sasS'loops'
p206
(lp207
g34
asS'savePickle'
p208
I01
sb.