ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
V/Volumes/Macintosh HD/Users/poppe076/Desktop/source_monitoring_task/data/pls2_source_monitoring_2015_Jun_24_1702
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'source_monitoring'
p11
sS'dataNames'
p12
(lp13
S'choice'
p14
asS'autoLog'
p15
I01
sS'extraInfo'
p16
(dp17
S'pitch lower result amount'
p18
cnumpy.core.multiarray
scalar
p19
(cnumpy
dtype
p20
(S'f8'
I0
I1
tRp21
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp22
sS'participant'
p23
Vpls2
p24
sS'pitch lower result block'
p25
g19
(g20
(S'i8'
I0
I1
tRp26
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp27
sS'listOrder'
p28
(lp29
V2
aV3
aV1
asS'frameRate'
p30
g19
(g21
S'\x07yY\x17\x7f\x14N@'
tRp31
sS'pitch higher result amount'
p32
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp33
sS'expName'
p34
g11
sS'date'
p35
V2015_Jun_24_1702
p36
sS'listMethod'
p37
Vset your own
p38
sS'pitch higher result block'
p39
g27
ssS'loopsUnfinished'
p40
(lp41
sS'saveWideText'
p42
I01
sS'thisEntry'
p43
(dp44
sS'version'
p45
S''
sS'_paramNamesSoFar'
p46
(lp47
S'word'
p48
aS'amount'
p49
aS'list'
p50
aS'trialtype'
p51
aS'block'
p52
asS'entries'
p53
(lp54
(dp55
S'trials.thisIndex'
p56
g19
(g20
(S'i4'
I0
I1
tRp57
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00'
tRp58
sg48
S'word3.23'
p59
sS'trials.thisRepN'
p60
I0
sg50
S'list3'
p61
sg30
g31
sS'trials.thisN'
p62
I0
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp63
sg34
g11
sS'trials.thisTrialN'
p64
I0
sg51
S'pitch higher'
p65
sg28
g29
sg35
g36
sg23
g24
sg14
S'self'
p66
sg52
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp67
sa(dp68
S'trials.thisIndex'
p69
g19
(g57
S'\x01\x00\x00\x00'
tRp70
sg48
S'word2.1'
p71
sS'trials.thisRepN'
p72
I0
sg50
S'list2'
p73
sg30
g31
sS'trials.thisN'
p74
I1
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp75
sg34
g11
sS'trials.thisTrialN'
p76
I1
sg51
S'unmodified'
p77
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp78
sa(dp79
S'trials.thisIndex'
p80
g19
(g57
S'\x02\x00\x00\x00'
tRp81
sg48
S'word1.8'
p82
sS'trials.thisRepN'
p83
I0
sg50
S'list1'
p84
sg30
g31
sS'trials.thisN'
p85
I2
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp86
sg34
g11
sS'trials.thisTrialN'
p87
I2
sg51
S'pitch lower'
p88
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp89
sa(dp90
S'trials.thisIndex'
p91
g19
(g57
S'\x03\x00\x00\x00'
tRp92
sg48
S'word2.12'
p93
sS'trials.thisRepN'
p94
I0
sg50
g73
sg30
g31
sS'trials.thisN'
p95
I3
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp96
sg34
g11
sS'trials.thisTrialN'
p97
I3
sg51
g77
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp98
sa(dp99
S'trials.thisIndex'
p100
g19
(g57
S'\x04\x00\x00\x00'
tRp101
sg48
S'word1.14'
p102
sS'trials.thisRepN'
p103
I0
sg50
g84
sg30
g31
sS'trials.thisN'
p104
I4
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp105
sg34
g11
sS'trials.thisTrialN'
p106
I4
sg51
g88
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp107
sa(dp108
S'trials.thisIndex'
p109
g19
(g57
S'\x05\x00\x00\x00'
tRp110
sg48
S'word3.1'
p111
sS'trials.thisRepN'
p112
I0
sg50
g61
sg30
g31
sS'trials.thisN'
p113
I5
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp114
sg34
g11
sS'trials.thisTrialN'
p115
I5
sg51
g65
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp116
sa(dp117
S'trials.thisIndex'
p118
g19
(g57
S'\x06\x00\x00\x00'
tRp119
sg48
S'word1.29'
p120
sS'trials.thisRepN'
p121
I0
sg50
g84
sg30
g31
sS'trials.thisN'
p122
I6
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp123
sg34
g11
sS'trials.thisTrialN'
p124
I6
sg51
g88
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp125
sa(dp126
S'trials.thisIndex'
p127
g19
(g57
S'\x07\x00\x00\x00'
tRp128
sg48
S'word2.22'
p129
sS'trials.thisRepN'
p130
I0
sg50
g73
sg30
g31
sS'trials.thisN'
p131
I7
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp132
sg34
g11
sS'trials.thisTrialN'
p133
I7
sg51
g77
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp134
sa(dp135
S'trials.thisIndex'
p136
g19
(g57
S'\x08\x00\x00\x00'
tRp137
sg48
S'word3.10'
p138
sS'trials.thisRepN'
p139
I0
sg50
g61
sg30
g31
sS'trials.thisN'
p140
I8
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp141
sg34
g11
sS'trials.thisTrialN'
p142
I8
sg51
g65
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp143
sa(dp144
S'trials.thisIndex'
p145
g19
(g57
S'\t\x00\x00\x00'
tRp146
sg48
S'word3.11'
p147
sS'trials.thisRepN'
p148
I0
sg50
g61
sg30
g31
sS'trials.thisN'
p149
I9
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp150
sg34
g11
sS'trials.thisTrialN'
p151
I9
sg51
g65
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp152
sa(dp153
S'trials.thisIndex'
p154
g19
(g57
S'\n\x00\x00\x00'
tRp155
sg48
S'word1.5'
p156
sS'trials.thisRepN'
p157
I0
sg50
g84
sg30
g31
sS'trials.thisN'
p158
I10
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp159
sg34
g11
sS'trials.thisTrialN'
p160
I10
sg51
g88
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp161
sa(dp162
S'trials.thisIndex'
p163
g19
(g57
S'\x0b\x00\x00\x00'
tRp164
sg48
S'word2.14'
p165
sS'trials.thisRepN'
p166
I0
sg50
g73
sg30
g31
sS'trials.thisN'
p167
I11
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp168
sg34
g11
sS'trials.thisTrialN'
p169
I11
sg51
g77
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp170
sa(dp171
S'trials.thisIndex'
p172
g19
(g57
S'\x0c\x00\x00\x00'
tRp173
sg48
S'word1.26'
p174
sS'trials.thisRepN'
p175
I0
sg50
g84
sg30
g31
sS'trials.thisN'
p176
I12
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp177
sg34
g11
sS'trials.thisTrialN'
p178
I12
sg51
g88
sg28
g29
sg35
g36
sg23
g24
sg14
S'other'
p179
sg52
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp180
sa(dp181
S'trials.thisIndex'
p182
g19
(g57
S'\r\x00\x00\x00'
tRp183
sg48
S'word2.26'
p184
sS'trials.thisRepN'
p185
I0
sg50
g73
sg30
g31
sS'trials.thisN'
p186
I13
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp187
sg34
g11
sS'trials.thisTrialN'
p188
I13
sg51
g77
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp189
sa(dp190
S'trials.thisIndex'
p191
g19
(g57
S'\x0e\x00\x00\x00'
tRp192
sg48
S'word3.13'
p193
sS'trials.thisRepN'
p194
I0
sg50
g61
sg30
g31
sS'trials.thisN'
p195
I14
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp196
sg34
g11
sS'trials.thisTrialN'
p197
I14
sg51
g65
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp198
sa(dp199
S'trials.thisIndex'
p200
g19
(g57
S'\x0f\x00\x00\x00'
tRp201
sg48
S'word3.22'
p202
sS'trials.thisRepN'
p203
I0
sg50
g61
sg30
g31
sS'trials.thisN'
p204
I15
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp205
sg34
g11
sS'trials.thisTrialN'
p206
I15
sg51
g65
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp207
sa(dp208
S'trials.thisIndex'
p209
g19
(g57
S'\x10\x00\x00\x00'
tRp210
sg48
S'word2.24'
p211
sS'trials.thisRepN'
p212
I0
sg50
g73
sg30
g31
sS'trials.thisN'
p213
I16
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp214
sg34
g11
sS'trials.thisTrialN'
p215
I16
sg51
g77
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp216
sa(dp217
S'trials.thisIndex'
p218
g19
(g57
S'\x11\x00\x00\x00'
tRp219
sg48
S'word1.17'
p220
sS'trials.thisRepN'
p221
I0
sg50
g84
sg30
g31
sS'trials.thisN'
p222
I17
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp223
sg34
g11
sS'trials.thisTrialN'
p224
I17
sg51
g88
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp225
sa(dp226
S'trials.thisIndex'
p227
g19
(g57
S'\x12\x00\x00\x00'
tRp228
sg48
S'word3.15'
p229
sS'trials.thisRepN'
p230
I0
sg50
g61
sg30
g31
sS'trials.thisN'
p231
I18
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp232
sg34
g11
sS'trials.thisTrialN'
p233
I18
sg51
g65
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp234
sa(dp235
S'trials.thisIndex'
p236
g19
(g57
S'\x13\x00\x00\x00'
tRp237
sg48
S'word2.18'
p238
sS'trials.thisRepN'
p239
I0
sg50
g73
sg30
g31
sS'trials.thisN'
p240
I19
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp241
sg34
g11
sS'trials.thisTrialN'
p242
I19
sg51
g77
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp243
sa(dp244
S'trials.thisIndex'
p245
g19
(g57
S'\x14\x00\x00\x00'
tRp246
sg48
S'word1.24'
p247
sS'trials.thisRepN'
p248
I0
sg50
g84
sg30
g31
sS'trials.thisN'
p249
I20
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp250
sg34
g11
sS'trials.thisTrialN'
p251
I20
sg51
g88
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp252
sa(dp253
S'trials.thisIndex'
p254
g19
(g57
S'\x15\x00\x00\x00'
tRp255
sg48
S'word2.4'
p256
sS'trials.thisRepN'
p257
I0
sg50
g73
sg30
g31
sS'trials.thisN'
p258
I21
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp259
sg34
g11
sS'trials.thisTrialN'
p260
I21
sg51
g77
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp261
sa(dp262
S'trials.thisIndex'
p263
g19
(g57
S'\x16\x00\x00\x00'
tRp264
sg48
S'word1.10'
p265
sS'trials.thisRepN'
p266
I0
sg50
g84
sg30
g31
sS'trials.thisN'
p267
I22
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp268
sg34
g11
sS'trials.thisTrialN'
p269
I22
sg51
g88
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp270
sa(dp271
S'trials.thisIndex'
p272
g19
(g57
S'\x17\x00\x00\x00'
tRp273
sg48
S'word3.3'
p274
sS'trials.thisRepN'
p275
I0
sg50
g61
sg30
g31
sS'trials.thisN'
p276
I23
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp277
sg34
g11
sS'trials.thisTrialN'
p278
I23
sg51
g65
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp279
sa(dp280
S'trials.thisIndex'
p281
g19
(g57
S'\x18\x00\x00\x00'
tRp282
sg48
S'word2.27'
p283
sS'trials.thisRepN'
p284
I0
sg50
g73
sg30
g31
sS'trials.thisN'
p285
I24
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp286
sg34
g11
sS'trials.thisTrialN'
p287
I24
sg51
g77
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp288
sa(dp289
S'trials.thisIndex'
p290
g19
(g57
S'\x19\x00\x00\x00'
tRp291
sg48
S'word3.6'
p292
sS'trials.thisRepN'
p293
I0
sg50
g61
sg30
g31
sS'trials.thisN'
p294
I25
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp295
sg34
g11
sS'trials.thisTrialN'
p296
I25
sg51
g65
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp297
sa(dp298
S'trials.thisIndex'
p299
g19
(g57
S'\x1a\x00\x00\x00'
tRp300
sg48
S'word1.11'
p301
sg18
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp302
sS'trials.thisRepN'
p303
I0
sg25
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp304
sg50
g84
sg30
g31
sS'trials.thisN'
p305
I26
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp306
sg34
g11
sS'trials.thisTrialN'
p307
I26
sg51
g88
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g304
sa(dp308
S'trials.thisIndex'
p309
g19
(g57
S'\x1b\x00\x00\x00'
tRp310
sg48
S'word3.19'
p311
sg18
g302
sS'trials.thisRepN'
p312
I0
sg25
g304
sg50
g61
sg30
g31
sS'trials.thisN'
p313
I27
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp314
sg34
g11
sS'trials.thisTrialN'
p315
I27
sg51
g65
sg28
g29
sg35
g36
sg23
g24
sg14
g66
sg52
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp316
sa(dp317
S'trials.thisIndex'
p318
g19
(g57
S'\x1c\x00\x00\x00'
tRp319
sg48
S'word1.22'
p320
sg18
g302
sS'trials.thisRepN'
p321
I0
sg25
g304
sg50
g84
sg30
g31
sS'trials.thisN'
p322
I28
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp323
sg34
g11
sS'trials.thisTrialN'
p324
I28
sg51
g88
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp325
sa(dp326
S'trials.thisIndex'
p327
g19
(g57
S'\x1d\x00\x00\x00'
tRp328
sg48
S'word2.28'
p329
sg18
g302
sS'trials.thisRepN'
p330
I0
sg25
g304
sg50
g73
sg30
g31
sS'trials.thisN'
p331
I29
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp332
sg34
g11
sS'trials.thisTrialN'
p333
I29
sg51
g77
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp334
sa(dp335
S'trials.thisIndex'
p336
g19
(g57
S'\x1e\x00\x00\x00'
tRp337
sg48
S'word1.4'
p338
sg18
g302
sS'trials.thisRepN'
p339
I0
sg25
g304
sg50
g84
sg30
g31
sS'trials.thisN'
p340
I30
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp341
sg34
g11
sS'trials.thisTrialN'
p342
I30
sg51
g88
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp343
sa(dp344
S'trials.thisIndex'
p345
g19
(g57
S'\x1f\x00\x00\x00'
tRp346
sg48
S'word2.3'
p347
sg18
g302
sS'trials.thisRepN'
p348
I0
sg25
g304
sg50
g73
sg30
g31
sS'trials.thisN'
p349
I31
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp350
sg34
g11
sS'trials.thisTrialN'
p351
I31
sg51
g77
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp352
sa(dp353
S'trials.thisIndex'
p354
g19
(g57
S' \x00\x00\x00'
tRp355
sg48
S'word3.28'
p356
sg18
g302
sS'trials.thisRepN'
p357
I0
sg25
g304
sg50
g61
sg30
g31
sS'trials.thisN'
p358
I32
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp359
sg34
g11
sS'trials.thisTrialN'
p360
I32
sg51
g65
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp361
sa(dp362
S'trials.thisIndex'
p363
g19
(g57
S'!\x00\x00\x00'
tRp364
sg48
S'word3.20'
p365
sg18
g302
sS'trials.thisRepN'
p366
I0
sg25
g304
sg50
g61
sg30
g31
sS'trials.thisN'
p367
I33
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp368
sg34
g11
sS'trials.thisTrialN'
p369
I33
sg51
g65
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp370
sa(dp371
S'trials.thisIndex'
p372
g19
(g57
S'"\x00\x00\x00'
tRp373
sg48
S'word1.28'
p374
sg18
g302
sS'trials.thisRepN'
p375
I0
sg25
g304
sg50
g84
sg30
g31
sS'trials.thisN'
p376
I34
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp377
sg34
g11
sS'trials.thisTrialN'
p378
I34
sg51
g88
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp379
sa(dp380
S'trials.thisIndex'
p381
g19
(g57
S'#\x00\x00\x00'
tRp382
sg48
S'word2.11'
p383
sg18
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp384
sS'trials.thisRepN'
p385
I0
sg25
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp386
sg50
g73
sg30
g31
sS'trials.thisN'
p387
I35
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp388
sg34
g11
sS'trials.thisTrialN'
p389
I35
sg51
g77
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g386
sa(dp390
S'trials.thisIndex'
p391
g19
(g57
S'$\x00\x00\x00'
tRp392
sg48
S'word2.23'
p393
sg18
g384
sS'trials.thisRepN'
p394
I0
sg25
g386
sg50
g73
sg30
g31
sS'trials.thisN'
p395
I36
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp396
sg34
g11
sS'trials.thisTrialN'
p397
I36
sg51
g77
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp398
sa(dp399
S'trials.thisIndex'
p400
g19
(g57
S'%\x00\x00\x00'
tRp401
sg48
S'word3.4'
p402
sg18
g384
sS'trials.thisRepN'
p403
I0
sg25
g386
sg50
g61
sg30
g31
sS'trials.thisN'
p404
I37
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp405
sg34
g11
sS'trials.thisTrialN'
p406
I37
sg51
g65
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp407
sa(dp408
S'trials.thisIndex'
p409
g19
(g57
S'&\x00\x00\x00'
tRp410
sg48
S'word1.1'
p411
sg18
g384
sS'trials.thisRepN'
p412
I0
sg25
g386
sg50
g84
sg30
g31
sS'trials.thisN'
p413
I38
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp414
sg34
g11
sS'trials.thisTrialN'
p415
I38
sg51
g88
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp416
sa(dp417
S'trials.thisIndex'
p418
g19
(g57
S"'\x00\x00\x00"
tRp419
sg48
S'word2.8'
p420
sg18
g384
sS'trials.thisRepN'
p421
I0
sg25
g386
sg50
g73
sg30
g31
sS'trials.thisN'
p422
I39
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp423
sg34
g11
sS'trials.thisTrialN'
p424
I39
sg51
g77
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp425
sa(dp426
S'trials.thisIndex'
p427
g19
(g57
S'(\x00\x00\x00'
tRp428
sg48
S'word3.5'
p429
sg18
g384
sS'trials.thisRepN'
p430
I0
sg25
g386
sg50
g61
sg30
g31
sS'trials.thisN'
p431
I40
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp432
sg34
g11
sS'trials.thisTrialN'
p433
I40
sg51
g65
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp434
sa(dp435
S'trials.thisIndex'
p436
g19
(g57
S')\x00\x00\x00'
tRp437
sg48
S'word1.19'
p438
sg18
g384
sS'trials.thisRepN'
p439
I0
sg25
g386
sg50
g84
sg30
g31
sS'trials.thisN'
p440
I41
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp441
sg34
g11
sS'trials.thisTrialN'
p442
I41
sg51
g88
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp443
sa(dp444
S'trials.thisIndex'
p445
g19
(g57
S'*\x00\x00\x00'
tRp446
sg48
S'word2.13'
p447
sg18
g384
sS'trials.thisRepN'
p448
I0
sg25
g386
sg50
g73
sg30
g31
sS'trials.thisN'
p449
I42
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp450
sg34
g11
sS'trials.thisTrialN'
p451
I42
sg51
g77
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp452
sa(dp453
S'trials.thisIndex'
p454
g19
(g57
S'+\x00\x00\x00'
tRp455
sg48
S'word3.24'
p456
sg18
g384
sS'trials.thisRepN'
p457
I0
sg25
g386
sg50
g61
sg30
g31
sS'trials.thisN'
p458
I43
sg37
g38
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp459
sg34
g11
sS'trials.thisTrialN'
p460
I43
sg51
g65
sg28
g29
sg35
g36
sg23
g24
sg14
g179
sg52
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp461
sa(dp462
S'trials.thisIndex'
p463
g19
(g57
S',\x00\x00\x00'
tRp464
sg48
S'word1.3'
p465
sg18
g22
sS'trials.thisRepN'
p466
I0
sg25
g27
sg50
g84
sg30
g31
sS'trials.thisN'
p467
I44
sg37
g38
sg35
g36
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp468
sg34
g11
sS'trials.thisTrialN'
p469
I44
sg51
g88
sg28
g29
sg32
g33
sg23
g24
sg14
g179
sg39
g27
sg52
g27
sasS'loops'
p470
(lp471
g1
(cpsychopy.data
TrialHandler
p472
g3
NtRp473
(dp474
S'origin'
p475
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things like STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000a\u000a# Ensure that relative paths start from the same directory as this script\u000a_thisDir = os.path.dirname(os.path.abspath(__file__))\u000aos.chdir(_thisDir)\u000a\u000a# Store info about the experiment session\u000aexpName = 'source_monitoring'  # from the Builder filename that created this script\u000aexpInfo = {}\u000a\u000amyDlg = gui.Dlg(title=expName, size=gui.wx.Size(-1,-75))\u000amyDlg.addField(u'participant: ', u'')\u000amyDlg.addField('word lists: ', choices=['random','set your own']) \u000amyDlg.show()\u000aif myDlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['participant'] = myDlg.data[0]\u000aexpInfo['listMethod'] = myDlg.data[1]\u000aprint expInfo['listMethod']\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a\u000aif expInfo['listMethod']=='set your own':\u000a    myDlg2 = gui.Dlg(title='Set Word Lists')\u000a    conditions = ['unmodified', 'pitch - higher', 'pitch - lower']\u000a    for cNum in range(len(conditions)):\u000a        myDlg2.addField(conditions[cNum], choices=[1,2,3], initial=cNum+1)\u000a    myDlg2.show()\u000a    if myDlg2.OK == False: core.quit()  # user pressed cancel\u000a    expInfo['listOrder'] = myDlg2.data\u000a    \u000afrom psychopy import visual\u000a\u000a\u000a# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc\u000afilename = _thisDir + os.sep + 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# Setup the Window\u000awin = visual.Window(size=(1440, 900), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color=[-1,-1,-1], colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a# Initialize components for Routine "initialize_code"\u000ainitialize_codeClock = core.Clock()\u000afrom psychopy import gui\u000afrom pyo import *\u000aimport math, sys, csv, random\u000afrom collections import OrderedDict\u000aserv = Server().boot()\u000a\u000a## SETTINGS ##\u000a\u000a# This is the amount to change the pitch on each block of trials (both higher and lower)\u000aPITCH_DELTA = 0.5\u000a\u000a# This is the word list file\u000aWORD_LIST_FILE = "wordlist.csv"\u000a\u000a# Colors of the choice buttons\u000aSELF_BOX_FILL_COLOR = '#A6A9FF'\u000aSELF_BOX_BORDER_COLOR = '#3E45FA'\u000aOTHER_BOX_FILL_COLOR = '#FFFCA6'\u000aOTHER_BOX_BORDER_COLOR = '#FAF33E'\u000a\u000a## END SETTINGS ##\u000a\u000a\u000a# this function ends a routine immediately\u000adef endRoutine():\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "status"):\u000a            thisComponent.status = FINISHED\u000a        continueRoutine = False\u000a\u000a\u000a# initialize this variable - it keeps track of whether \u000a# the subject is finished speaking during a time stretch trial\u000afinished = True\u000a\u000a##########################################################\u000a### read in the original word list file and save word list file for this subject\u000a##########################################################\u000a# container array for file contents\u000aorig_words = []\u000a# read csv file with the original word lists (in same directory as this experiment script)\u000awith open(WORD_LIST_FILE, 'rU') as csvfile:\u000a    test = csv.reader(csvfile)\u000a    for i in test:\u000a        orig_words.append(i)\u000a\u000a# depending on experiementer's selection at run time, either randomize word lists or\u000a# use the experimenter's order\u000adef fixList(x):\u000a    return int(x)-1\u000a\u000aif expInfo['listMethod']=='set your own':\u000a    assignment_order = map(fixList, expInfo['listOrder'])\u000aelse:\u000a    assignment_order = random.sample([0,1,2], 3)\u000a\u000a# initialize word containers for the trial types\u000aunmodified_words = []\u000apitch_higher_words = []\u000apitch_lower_words = []\u000a\u000a# assign words to those containers\u000afor row in orig_words:\u000a    unmodified_words.append(row[assignment_order[0]])\u000a    pitch_higher_words.append(row[assignment_order[1]])\u000a    pitch_lower_words.append(row[assignment_order[2]])\u000a\u000a# save word lists for each trial type\u000aunmodified_word_list = unmodified_words.pop(0)\u000apitch_higher_word_list = pitch_higher_words.pop(0)\u000apitch_lower_word_list = pitch_lower_words.pop(0)\u000a\u000a# randomize words in their lists\u000arandom.shuffle(unmodified_words)\u000arandom.shuffle(pitch_higher_words)\u000arandom.shuffle(pitch_lower_words)\u000a\u000a# this will be the name of the wordlist csv file for this subject\u000awordlist_filename = filename+'_wordlist.csv'\u000aresults_filename = filename+'_summarized_results.csv'\u000a\u000a# build a big array with all the words and also attach trialtype, block, and amount data,\u000a# like this: [block, word, trialtype, amount, list]\u000amaster_list = []\u000a\u000a# start pitch change at 0\u000apitch_amount = 0\u000a\u000a# create blocks of 9 words and add them to master list\u000afor block_num in range(10):\u000a    block_words = []\u000a    pitch_amount = pitch_amount + PITCH_DELTA\u000a    for i in range(3):\u000a        word_index = block_num * 3 + i\u000a        subgroup = []\u000a        subgroup.append([block_num+1, unmodified_words[word_index], 'unmodified', 0, unmodified_word_list])\u000a        subgroup.append([block_num+1, pitch_higher_words[word_index], 'pitch higher', pitch_amount, pitch_higher_word_list])\u000a        subgroup.append([block_num+1, pitch_lower_words[word_index], 'pitch lower', -1 * pitch_amount, pitch_lower_word_list])\u000a        random.shuffle(subgroup)\u000a        block_words += subgroup\u000a    master_list += block_words\u000a\u000a# save csv file to disk\u000awith open(wordlist_filename,'wb') as w:\u000a    writer=csv.writer(w)\u000a    writer.writerow(['block', 'word', 'trialtype', 'amount', 'list'])\u000a    for row in master_list:\u000a        writer.writerow(row)\u000a\u000a# create container for stats\u000a# this keeps track of how many times the subject chooses "other" for\u000a#   each trial type per block\u000a# it gets reset each block\u000achoice_stats = OrderedDict()\u000achoice_stats['unmodified'] = 0 # we shouldn't need this one\u000achoice_stats['pitch higher'] = 0\u000achoice_stats['pitch lower'] = 0\u000achoice_stats['pitch higher block'] = 0\u000achoice_stats['pitch lower block'] = 0\u000achoice_stats['pitch higher amount'] = 0\u000achoice_stats['pitch lower amount'] = 0\u000a\u000a# these hold the "done" status for each pitch trial type\u000apitch_higher_done = False\u000apitch_lower_done = False\u000a\u000a# start with block number = 0\u000athis_block = 0\u000a\u000a# Initialize components for Routine "instructions"\u000ainstructionsClock = core.Clock()\u000atext_4 = visual.TextStim(win=win, ori=0, name='text_4',\u000a    text='Instructions will go here.',    font='Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aserv.start()\u000amic = Input(chnl=0)\u000atext = visual.TextStim(win=win, ori=0, name='text',\u000a    text='default text',    font='Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=-1.0)\u000a\u000a# Initialize components for Routine "choose_source"\u000achoose_sourceClock = core.Clock()\u000aquestion = visual.TextStim(win=win, ori=0, name='question',\u000a    text='Whose voice did you hear?',    font='Arial',\u000a    pos=[0, .5], height=0.1, wrapWidth=2,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000aself_box = visual.Rect(win=win, name='self_box',\u000a    width=[0.5, 0.5][0], height=[0.5, 0.5][1],\u000a    ori=0, pos=[-.5, -.5],\u000a    lineWidth=5, lineColor=SELF_BOX_BORDER_COLOR, lineColorSpace='rgb',\u000a    fillColor=SELF_BOX_FILL_COLOR, fillColorSpace='rgb',\u000a    opacity=1,depth=-1.0, \u000ainterpolate=True)\u000aself_label = visual.TextStim(win=win, ori=0, name='self_label',\u000a    text='Mine',    font='Arial',\u000a    pos=[-.5, -.5], height=0.1, wrapWidth=None,\u000a    color='black', colorSpace='rgb', opacity=1,\u000a    depth=-2.0)\u000aother_box = visual.Rect(win=win, name='other_box',\u000a    width=[0.5, 0.5][0], height=[0.5, 0.5][1],\u000a    ori=0, pos=[.5, -.5],\u000a    lineWidth=5, lineColor=OTHER_BOX_BORDER_COLOR, lineColorSpace='rgb',\u000a    fillColor=OTHER_BOX_FILL_COLOR, fillColorSpace='rgb',\u000a    opacity=1,depth=-3.0, \u000ainterpolate=True)\u000aother_label = visual.TextStim(win=win, ori=0, name='other_label',\u000a    text='Other',    font='Arial',\u000a    pos=[.5, -.5], height=0.1, wrapWidth=None,\u000a    color='black', colorSpace='rgb', opacity=1,\u000a    depth=-4.0)\u000amouse = event.Mouse(win=win)\u000ax, y = [None, None]\u000a\u000a\u000a# Initialize components for Routine "thankyou"\u000athankyouClock = core.Clock()\u000atext_3 = visual.TextStim(win=win, ori=0, name='text_3',\u000a    text=u'Thank you for participating!',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a\u000a# Initialize components for Routine "display_results"\u000adisplay_resultsClock = core.Clock()\u000aresults_text = visual.TextStim(win=win, ori=0, name='results_text',\u000a    text='default text',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=2,\u000a    color=u'white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "initialize_code"-------\u000at = 0\u000ainitialize_codeClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000a\u000a# keep track of which components have finished\u000ainitialize_codeComponents = []\u000afor thisComponent in initialize_codeComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "initialize_code"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = initialize_codeClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in initialize_codeComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "initialize_code"-------\u000afor thisComponent in initialize_codeComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a\u000a# the Routine "initialize_code" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a#------Prepare to start Routine "instructions"-------\u000at = 0\u000ainstructionsClock.reset()  # clock \u000aframeN = -1\u000aroutineTimer.add(5.000000)\u000a# update component parameters for each repeat\u000a# keep track of which components have finished\u000ainstructionsComponents = []\u000ainstructionsComponents.append(text_4)\u000afor thisComponent in instructionsComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instructions"-------\u000acontinueRoutine = True\u000awhile continueRoutine and routineTimer.getTime() > 0:\u000a    # get current time\u000a    t = instructionsClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *text_4* updates\u000a    if t >= 0.0 and text_4.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        text_4.tStart = t  # underestimates by a little under one frame\u000a        text_4.frameNStart = frameN  # exact frame index\u000a        text_4.setAutoDraw(True)\u000a    if text_4.status == STARTED and t >= (0.0 + (5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a        text_4.setAutoDraw(False)\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instructionsComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "instructions"-------\u000afor thisComponent in instructionsComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a\u000a# set up handler to look after randomisation of conditions etc\u000atrials = data.TrialHandler(nReps=1, method='sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(wordlist_filename),\u000a    seed=None, name='trials')\u000athisExp.addLoop(trials)  # add the loop to the experiment\u000athisTrial = trials.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisTrial.rgb)\u000aif thisTrial != None:\u000a    for paramName in thisTrial.keys():\u000a        exec(paramName + '= thisTrial.' + paramName)\u000a\u000afor thisTrial in trials:\u000a    currentLoop = trials\u000a    # abbreviate parameter names if possible (e.g. rgb = thisTrial.rgb)\u000a    if thisTrial != None:\u000a        for paramName in thisTrial.keys():\u000a            exec(paramName + '= thisTrial.' + paramName)\u000a    \u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(11.000000)\u000a    # update component parameters for each repeat\u000a    \u000a    b = Harmonizer(mic, transpo=float(amount))\u000a    c = Gate(b, thresh=-90, falltime=0.02, lookahead=20.0).mix(2).out()\u000a    d = Follower2(b)\u000a    talkThresh = .08\u000a    talkStarted = False\u000a    stoppedTalking = False\u000a    stopTime = 100\u000a    \u000a    text.setText(word)\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(text)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        if d.get() > talkThresh:\u000a                talkStarted = True\u000a        \u000a        if talkStarted and not stoppedTalking:\u000a            if d.get() < talkThresh:\u000a                stoppedTalking = True\u000a                stopTime = globalClock.getTime() + 1\u000a        \u000a        if stoppedTalking and globalClock.getTime() >= stopTime:\u000a            b.stop()\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        \u000a        \u000a        # *text* updates\u000a        if t >= 1 and text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            text.tStart = t  # underestimates by a little under one frame\u000a            text.frameNStart = frameN  # exact frame index\u000a            text.setAutoDraw(True)\u000a        if text.status == STARTED and t >= (1 + (10-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            text.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    \u000a    \u000a    #------Prepare to start Routine "choose_source"-------\u000a    t = 0\u000a    choose_sourceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # setup some python lists for storing info about the mouse\u000a    if(pitch_lower_done and pitch_higher_done):\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status"):\u000a                thisComponent.status = FINISHED\u000a            continueRoutine = False\u000a    # keep track of which components have finished\u000a    choose_sourceComponents = []\u000a    choose_sourceComponents.append(question)\u000a    choose_sourceComponents.append(self_box)\u000a    choose_sourceComponents.append(self_label)\u000a    choose_sourceComponents.append(other_box)\u000a    choose_sourceComponents.append(other_label)\u000a    choose_sourceComponents.append(mouse)\u000a    for thisComponent in choose_sourceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choose_source"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choose_sourceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *question* updates\u000a        if t >= 0.0 and question.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            question.tStart = t  # underestimates by a little under one frame\u000a            question.frameNStart = frameN  # exact frame index\u000a            question.setAutoDraw(True)\u000a        \u000a        # *self_box* updates\u000a        if t >= 0.0 and self_box.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            self_box.tStart = t  # underestimates by a little under one frame\u000a            self_box.frameNStart = frameN  # exact frame index\u000a            self_box.setAutoDraw(True)\u000a        \u000a        # *self_label* updates\u000a        if t >= 0.0 and self_label.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            self_label.tStart = t  # underestimates by a little under one frame\u000a            self_label.frameNStart = frameN  # exact frame index\u000a            self_label.setAutoDraw(True)\u000a        \u000a        # *other_box* updates\u000a        if t >= 0.0 and other_box.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            other_box.tStart = t  # underestimates by a little under one frame\u000a            other_box.frameNStart = frameN  # exact frame index\u000a            other_box.setAutoDraw(True)\u000a        \u000a        # *other_label* updates\u000a        if t >= 0.0 and other_label.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            other_label.tStart = t  # underestimates by a little under one frame\u000a            other_label.frameNStart = frameN  # exact frame index\u000a            other_label.setAutoDraw(True)\u000a        if mouse.isPressedIn(self_box, buttons=[0]):\u000a            trials.addData('choice', 'self')\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        elif mouse.isPressedIn(other_box, buttons=[0]):\u000a            trials.addData('choice','other')\u000a            choice_stats[trialtype] += 1\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        \u000a        if self_box.contains(mouse):\u000a            self_box.fillColor = SELF_BOX_BORDER_COLOR\u000a        else:\u000a            self_box.fillColor = SELF_BOX_FILL_COLOR\u000a        \u000a        if other_box.contains(mouse):\u000a            other_box.fillColor = OTHER_BOX_BORDER_COLOR\u000a        else:\u000a            other_box.fillColor = OTHER_BOX_FILL_COLOR\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choose_sourceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choose_source"-------\u000a    for thisComponent in choose_sourceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for trials (TrialHandler)\u000a    # check if next trial is a new block. \u000a    # if it's a new block, check if current block had 3 "other" votes for either pitch type\u000a    # if so,  1) record appropriate block number for that type\u000a    #  2) set "done" flag to true for that type\u000a    # if both pitch types are done, end the trials loop\u000a    next_block = trials.getFutureTrial(1).block\u000a    this_amount = block * PITCH_DELTA\u000a    if(block != next_block):\u000a        if(choice_stats['pitch higher'] == 3):\u000a            expInfo['pitch higher result block'] = block\u000a            expInfo['pitch higher result amount'] = this_amount\u000a            choice_stats['pitch higher block'] = block\u000a            choice_stats['pitch higher amount'] = this_amount\u000a            pitch_higher_done = True\u000a        if(choice_stats['pitch lower'] == 3):\u000a            expInfo['pitch lower result block'] = block\u000a            expInfo['pitch lower result amount'] = -1 * this_amount\u000a            choice_stats['pitch lower block'] = block\u000a            choice_stats['pitch lower amount'] = -1 * this_amount\u000a            pitch_lower_done = True\u000a        if(pitch_lower_done and pitch_higher_done):\u000a            trials.finished = True\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        choice_stats['pitch higher'] = 0\u000a        choice_stats['pitch lower'] = 0\u000a    \u000a    \u000a    # the Routine "choose_source" was not non-slip safe, so reset the non-slip timer\u000a    routineTimer.reset()\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'trials'\u000a\u000a\u000a#------Prepare to start Routine "thankyou"-------\u000at = 0\u000athankyouClock.reset()  # clock \u000aframeN = -1\u000aroutineTimer.add(5.000000)\u000a# update component parameters for each repeat\u000a\u000a\u000a\u000a# keep track of which components have finished\u000athankyouComponents = []\u000athankyouComponents.append(text_3)\u000afor thisComponent in thankyouComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "thankyou"-------\u000acontinueRoutine = True\u000awhile continueRoutine and routineTimer.getTime() > 0:\u000a    # get current time\u000a    t = thankyouClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *text_3* updates\u000a    if t >= 0.0 and text_3.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        text_3.tStart = t  # underestimates by a little under one frame\u000a        text_3.frameNStart = frameN  # exact frame index\u000a        text_3.setAutoDraw(True)\u000a    if text_3.status == STARTED and t >= (0.0 + (5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a        text_3.setAutoDraw(False)\u000a    \u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in thankyouComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "thankyou"-------\u000afor thisComponent in thankyouComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000aresults = '\u005cn\u005cr'\u000a\u000aresults += 'Pitch (higher) block = ' + str(choice_stats['pitch higher block']) + '\u005cn\u005cr'\u000aresults += 'Pitch (lower) block = ' + str(choice_stats['pitch lower block']) + '\u005cn\u005cr'\u000aresults += '\u005cn\u005cr'\u000aresults += 'Pitch (higher) amount = ' + str(choice_stats['pitch higher amount']) + '\u005cn\u005cr'\u000aresults += 'Pitch (lower) amount = ' + str(choice_stats['pitch lower amount']) + '\u005cn\u005cr'\u000a\u000a\u000a\u000a\u000a#------Prepare to start Routine "display_results"-------\u000at = 0\u000adisplay_resultsClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000aresults_text.setText(results)\u000akey_resp_2 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_2.status = NOT_STARTED\u000a# keep track of which components have finished\u000adisplay_resultsComponents = []\u000adisplay_resultsComponents.append(results_text)\u000adisplay_resultsComponents.append(key_resp_2)\u000afor thisComponent in display_resultsComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "display_results"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = display_resultsClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *results_text* updates\u000a    if t >= 0.0 and results_text.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        results_text.tStart = t  # underestimates by a little under one frame\u000a        results_text.frameNStart = frameN  # exact frame index\u000a        results_text.setAutoDraw(True)\u000a    \u000a    # *key_resp_2* updates\u000a    if t >= 0.0 and key_resp_2.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_2.tStart = t  # underestimates by a little under one frame\u000a        key_resp_2.frameNStart = frameN  # exact frame index\u000a        key_resp_2.status = STARTED\u000a        # keyboard checking is just starting\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_2.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['esc'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in display_resultsComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "display_results"-------\u000afor thisComponent in display_resultsComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# the Routine "display_results" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000aserv.stop()\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p476
sS'thisTrial'
p477
g1
(cpsychopy.data
TrialType
p478
c__builtin__
dict
p479
(dp480
g50
g84
sg49
g468
sg48
g465
sg51
g88
sg52
g27
stRp481
sS'_exp'
p482
I180799440
sg10
S'trials'
p483
sg6
S'/Volumes/Macintosh HD/Users/poppe076/Desktop/source_monitoring_task/source_monitoring.py'
p484
sS'thisRepN'
p485
I0
sg15
I01
sg16
g17
sS'data'
p486
g1
(cpsychopy.data
DataHandler
p487
g479
(dp488
S'ran'
p489
cnumpy.ma.core
_mareconstruct
p490
(cnumpy.ma.core
MaskedArray
p491
cnumpy
ndarray
p492
(I0
tp493
S'b'
tRp494
(I1
(I90
I1
tg20
(S'f4'
I0
I1
tRp495
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p496
g490
(g491
g492
g493
S'b'
tRp497
(I1
(I90
I1
tg495
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
Ntbsg14
cnumpy.core.multiarray
_reconstruct
p498
(g492
(I0
tS'b'
tRp499
(I1
(I90
I1
tg20
(S'O4'
I0
I1
tRp500
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp501
g66
ag66
ag66
ag66
ag66
ag66
ag66
ag66
ag66
ag66
ag66
ag66
ag179
ag66
ag179
ag66
ag179
ag179
ag66
ag179
ag179
ag66
ag179
ag66
ag66
ag66
ag179
ag66
ag179
ag179
ag179
ag179
ag179
ag179
ag179
ag179
ag179
ag179
ag179
ag179
ag179
ag179
ag179
ag179
ag179
aS'--'
p502
aS'--'
p503
aS'--'
p504
aS'--'
p505
aS'--'
p506
aS'--'
p507
aS'--'
p508
aS'--'
p509
aS'--'
p510
aS'--'
p511
aS'--'
p512
aS'--'
p513
aS'--'
p514
aS'--'
p515
aS'--'
p516
aS'--'
p517
aS'--'
p518
aS'--'
p519
aS'--'
p520
aS'--'
p521
aS'--'
p522
aS'--'
p523
aS'--'
p524
aS'--'
p525
aS'--'
p526
aS'--'
p527
aS'--'
p528
aS'--'
p529
aS'--'
p530
aS'--'
p531
aS'--'
p532
aS'--'
p533
aS'--'
p534
aS'--'
p535
aS'--'
p536
aS'--'
p537
aS'--'
p538
aS'--'
p539
aS'--'
p540
aS'--'
p541
aS'--'
p542
aS'--'
p543
aS'--'
p544
aS'--'
p545
aS'--'
p546
atbstRp547
(dp548
S'isNumeric'
p549
(dp550
g489
I01
sg496
I01
sg14
I00
ssg483
g473
sS'dataTypes'
p551
(lp552
g489
ag496
ag14
asS'dataShape'
p553
(lp554
I90
aI1
asbsS'method'
p555
S'sequential'
p556
sS'sequenceIndices'
p557
g498
(g492
(I0
tS'b'
tRp558
(I1
(I90
I1
tg57
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00'
tbsS'finished'
p559
I01
sS'nReps'
p560
I1
sS'nRemaining'
p561
I44
sS'trialList'
p562
(lp563
g1
(g478
g479
(dp564
g50
g61
sg49
g63
sg48
g59
sg51
g65
sg52
g67
stRp565
ag1
(g478
g479
(dp566
g50
g73
sg49
g75
sg48
g71
sg51
g77
sg52
g78
stRp567
ag1
(g478
g479
(dp568
g50
g84
sg49
g86
sg48
g82
sg51
g88
sg52
g89
stRp569
ag1
(g478
g479
(dp570
g50
g73
sg49
g96
sg48
g93
sg51
g77
sg52
g98
stRp571
ag1
(g478
g479
(dp572
g50
g84
sg49
g105
sg48
g102
sg51
g88
sg52
g107
stRp573
ag1
(g478
g479
(dp574
g50
g61
sg49
g114
sg48
g111
sg51
g65
sg52
g116
stRp575
ag1
(g478
g479
(dp576
g50
g84
sg49
g123
sg48
g120
sg51
g88
sg52
g125
stRp577
ag1
(g478
g479
(dp578
g50
g73
sg49
g132
sg48
g129
sg51
g77
sg52
g134
stRp579
ag1
(g478
g479
(dp580
g50
g61
sg49
g141
sg48
g138
sg51
g65
sg52
g143
stRp581
ag1
(g478
g479
(dp582
g50
g61
sg49
g150
sg48
g147
sg51
g65
sg52
g152
stRp583
ag1
(g478
g479
(dp584
g50
g84
sg49
g159
sg48
g156
sg51
g88
sg52
g161
stRp585
ag1
(g478
g479
(dp586
g50
g73
sg49
g168
sg48
g165
sg51
g77
sg52
g170
stRp587
ag1
(g478
g479
(dp588
g50
g84
sg49
g177
sg48
g174
sg51
g88
sg52
g180
stRp589
ag1
(g478
g479
(dp590
g50
g73
sg49
g187
sg48
g184
sg51
g77
sg52
g189
stRp591
ag1
(g478
g479
(dp592
g50
g61
sg49
g196
sg48
g193
sg51
g65
sg52
g198
stRp593
ag1
(g478
g479
(dp594
g50
g61
sg49
g205
sg48
g202
sg51
g65
sg52
g207
stRp595
ag1
(g478
g479
(dp596
g50
g73
sg49
g214
sg48
g211
sg51
g77
sg52
g216
stRp597
ag1
(g478
g479
(dp598
g50
g84
sg49
g223
sg48
g220
sg51
g88
sg52
g225
stRp599
ag1
(g478
g479
(dp600
g50
g61
sg49
g232
sg48
g229
sg51
g65
sg52
g234
stRp601
ag1
(g478
g479
(dp602
g50
g73
sg49
g241
sg48
g238
sg51
g77
sg52
g243
stRp603
ag1
(g478
g479
(dp604
g50
g84
sg49
g250
sg48
g247
sg51
g88
sg52
g252
stRp605
ag1
(g478
g479
(dp606
g50
g73
sg49
g259
sg48
g256
sg51
g77
sg52
g261
stRp607
ag1
(g478
g479
(dp608
g50
g84
sg49
g268
sg48
g265
sg51
g88
sg52
g270
stRp609
ag1
(g478
g479
(dp610
g50
g61
sg49
g277
sg48
g274
sg51
g65
sg52
g279
stRp611
ag1
(g478
g479
(dp612
g50
g73
sg49
g286
sg48
g283
sg51
g77
sg52
g288
stRp613
ag1
(g478
g479
(dp614
g50
g61
sg49
g295
sg48
g292
sg51
g65
sg52
g297
stRp615
ag1
(g478
g479
(dp616
g50
g84
sg49
g306
sg48
g301
sg51
g88
sg52
g304
stRp617
ag1
(g478
g479
(dp618
g50
g61
sg49
g314
sg48
g311
sg51
g65
sg52
g316
stRp619
ag1
(g478
g479
(dp620
g50
g84
sg49
g323
sg48
g320
sg51
g88
sg52
g325
stRp621
ag1
(g478
g479
(dp622
g50
g73
sg49
g332
sg48
g329
sg51
g77
sg52
g334
stRp623
ag1
(g478
g479
(dp624
g50
g84
sg49
g341
sg48
g338
sg51
g88
sg52
g343
stRp625
ag1
(g478
g479
(dp626
g50
g73
sg49
g350
sg48
g347
sg51
g77
sg52
g352
stRp627
ag1
(g478
g479
(dp628
g50
g61
sg49
g359
sg48
g356
sg51
g65
sg52
g361
stRp629
ag1
(g478
g479
(dp630
g50
g61
sg49
g368
sg48
g365
sg51
g65
sg52
g370
stRp631
ag1
(g478
g479
(dp632
g50
g84
sg49
g377
sg48
g374
sg51
g88
sg52
g379
stRp633
ag1
(g478
g479
(dp634
g50
g73
sg49
g388
sg48
g383
sg51
g77
sg52
g386
stRp635
ag1
(g478
g479
(dp636
g50
g73
sg49
g396
sg48
g393
sg51
g77
sg52
g398
stRp637
ag1
(g478
g479
(dp638
g50
g61
sg49
g405
sg48
g402
sg51
g65
sg52
g407
stRp639
ag1
(g478
g479
(dp640
g50
g84
sg49
g414
sg48
g411
sg51
g88
sg52
g416
stRp641
ag1
(g478
g479
(dp642
g50
g73
sg49
g423
sg48
g420
sg51
g77
sg52
g425
stRp643
ag1
(g478
g479
(dp644
g50
g61
sg49
g432
sg48
g429
sg51
g65
sg52
g434
stRp645
ag1
(g478
g479
(dp646
g50
g84
sg49
g441
sg48
g438
sg51
g88
sg52
g443
stRp647
ag1
(g478
g479
(dp648
g50
g73
sg49
g450
sg48
g447
sg51
g77
sg52
g452
stRp649
ag1
(g478
g479
(dp650
g50
g61
sg49
g459
sg48
g456
sg51
g65
sg52
g461
stRp651
ag481
ag1
(g478
g479
(dp652
g50
g73
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp653
sg48
S'word2.9'
p654
sg51
g77
sg52
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp655
stRp656
ag1
(g478
g479
(dp657
g50
g84
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp658
sg48
S'word1.18'
p659
sg51
g88
sg52
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp660
stRp661
ag1
(g478
g479
(dp662
g50
g61
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp663
sg48
S'word3.26'
p664
sg51
g65
sg52
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp665
stRp666
ag1
(g478
g479
(dp667
g50
g73
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp668
sg48
S'word2.30'
p669
sg51
g77
sg52
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp670
stRp671
ag1
(g478
g479
(dp672
g50
g84
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp673
sg48
S'word1.23'
p674
sg51
g88
sg52
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp675
stRp676
ag1
(g478
g479
(dp677
g50
g61
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp678
sg48
S'word3.7'
p679
sg51
g65
sg52
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp680
stRp681
ag1
(g478
g479
(dp682
g50
g61
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp683
sg48
S'word3.2'
p684
sg51
g65
sg52
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp685
stRp686
ag1
(g478
g479
(dp687
g50
g73
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp688
sg48
S'word2.19'
p689
sg51
g77
sg52
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp690
stRp691
ag1
(g478
g479
(dp692
g50
g84
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp693
sg48
S'word1.9'
p694
sg51
g88
sg52
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp695
stRp696
ag1
(g478
g479
(dp697
g50
g61
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp698
sg48
S'word3.25'
p699
sg51
g65
sg52
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp700
stRp701
ag1
(g478
g479
(dp702
g50
g73
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp703
sg48
S'word2.16'
p704
sg51
g77
sg52
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp705
stRp706
ag1
(g478
g479
(dp707
g50
g84
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp708
sg48
S'word1.13'
p709
sg51
g88
sg52
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp710
stRp711
ag1
(g478
g479
(dp712
g50
g73
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp713
sg48
S'word2.2'
p714
sg51
g77
sg52
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp715
stRp716
ag1
(g478
g479
(dp717
g50
g84
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp718
sg48
S'word1.6'
p719
sg51
g88
sg52
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp720
stRp721
ag1
(g478
g479
(dp722
g50
g61
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp723
sg48
S'word3.29'
p724
sg51
g65
sg52
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp725
stRp726
ag1
(g478
g479
(dp727
g50
g61
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp728
sg48
S'word3.17'
p729
sg51
g65
sg52
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp730
stRp731
ag1
(g478
g479
(dp732
g50
g84
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp733
sg48
S'word1.15'
p734
sg51
g88
sg52
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp735
stRp736
ag1
(g478
g479
(dp737
g50
g73
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp738
sg48
S'word2.15'
p739
sg51
g77
sg52
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp740
stRp741
ag1
(g478
g479
(dp742
g50
g73
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp743
sg48
S'word2.29'
p744
sg51
g77
sg52
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp745
stRp746
ag1
(g478
g479
(dp747
g50
g61
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp748
sg48
S'word3.27'
p749
sg51
g65
sg52
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp750
stRp751
ag1
(g478
g479
(dp752
g50
g84
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp753
sg48
S'word1.2'
p754
sg51
g88
sg52
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp755
stRp756
ag1
(g478
g479
(dp757
g50
g61
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp758
sg48
S'word3.30'
p759
sg51
g65
sg52
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp760
stRp761
ag1
(g478
g479
(dp762
g50
g84
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp763
sg48
S'word1.12'
p764
sg51
g88
sg52
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp765
stRp766
ag1
(g478
g479
(dp767
g50
g73
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp768
sg48
S'word2.5'
p769
sg51
g77
sg52
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp770
stRp771
ag1
(g478
g479
(dp772
g50
g73
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp773
sg48
S'word2.25'
p774
sg51
g77
sg52
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp775
stRp776
ag1
(g478
g479
(dp777
g50
g61
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp778
sg48
S'word3.9'
p779
sg51
g65
sg52
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp780
stRp781
ag1
(g478
g479
(dp782
g50
g84
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp783
sg48
S'word1.25'
p784
sg51
g88
sg52
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp785
stRp786
ag1
(g478
g479
(dp787
g50
g84
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp788
sg48
S'word1.7'
p789
sg51
g88
sg52
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp790
stRp791
ag1
(g478
g479
(dp792
g50
g73
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp793
sg48
S'word2.17'
p794
sg51
g77
sg52
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp795
stRp796
ag1
(g478
g479
(dp797
g50
g61
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp798
sg48
S'word3.18'
p799
sg51
g65
sg52
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp800
stRp801
ag1
(g478
g479
(dp802
g50
g61
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp803
sg48
S'word3.14'
p804
sg51
g65
sg52
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp805
stRp806
ag1
(g478
g479
(dp807
g50
g73
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp808
sg48
S'word2.21'
p809
sg51
g77
sg52
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp810
stRp811
ag1
(g478
g479
(dp812
g50
g84
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp813
sg48
S'word1.27'
p814
sg51
g88
sg52
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp815
stRp816
ag1
(g478
g479
(dp817
g50
g61
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp818
sg48
S'word3.16'
p819
sg51
g65
sg52
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp820
stRp821
ag1
(g478
g479
(dp822
g50
g73
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp823
sg48
S'word2.10'
p824
sg51
g77
sg52
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp825
stRp826
ag1
(g478
g479
(dp827
g50
g84
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp828
sg48
S'word1.21'
p829
sg51
g88
sg52
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp830
stRp831
ag1
(g478
g479
(dp832
g50
g73
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp833
sg48
S'word2.6'
p834
sg51
g77
sg52
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp835
stRp836
ag1
(g478
g479
(dp837
g50
g84
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp838
sg48
S'word1.16'
p839
sg51
g88
sg52
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp840
stRp841
ag1
(g478
g479
(dp842
g50
g61
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp843
sg48
S'word3.21'
p844
sg51
g65
sg52
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp845
stRp846
ag1
(g478
g479
(dp847
g50
g84
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp848
sg48
S'word1.20'
p849
sg51
g88
sg52
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp850
stRp851
ag1
(g478
g479
(dp852
g50
g61
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp853
sg48
S'word3.12'
p854
sg51
g65
sg52
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp855
stRp856
ag1
(g478
g479
(dp857
g50
g73
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp858
sg48
S'word2.7'
p859
sg51
g77
sg52
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp860
stRp861
ag1
(g478
g479
(dp862
g50
g84
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp863
sg48
S'word1.30'
p864
sg51
g88
sg52
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp865
stRp866
ag1
(g478
g479
(dp867
g50
g61
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp868
sg48
S'word3.8'
p869
sg51
g65
sg52
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp870
stRp871
ag1
(g478
g479
(dp872
g50
g73
sg49
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp873
sg48
S'word2.20'
p874
sg51
g77
sg52
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp875
stRp876
asS'seed'
p877
NsS'thisIndex'
p878
g464
sS'thisN'
p879
I45
sS'thisTrialN'
p880
I45
sS'nTotal'
p881
I90
sS'_warnUseOfNext'
p882
I01
sbasS'savePickle'
p883
I00
sb.