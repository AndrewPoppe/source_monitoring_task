ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
V/Volumes/Macintosh HD/Users/poppe076/Desktop/source_monitoring_task/data/ok_source_monitoring_2015_Jun_24_1536
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'source_monitoring'
p11
sS'dataNames'
p12
(lp13
S'choice'
p14
asS'autoLog'
p15
I01
sS'extraInfo'
p16
(dp17
S'date'
p18
V2015_Jun_24_1536
p19
sS'listMethod'
p20
Vrandom
p21
sS'expName'
p22
g11
sS'participant'
p23
Vok
p24
sS'frameRate'
p25
cnumpy.core.multiarray
scalar
p26
(cnumpy
dtype
p27
(S'f8'
I0
I1
tRp28
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xb2\x15+\x90\xc9\xf7M@'
tRp29
ssS'loopsUnfinished'
p30
(lp31
g1
(cpsychopy.data
TrialHandler
p32
g3
NtRp33
(dp34
S'origin'
p35
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things like STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000a\u000a# Ensure that relative paths start from the same directory as this script\u000a_thisDir = os.path.dirname(os.path.abspath(__file__))\u000aos.chdir(_thisDir)\u000a\u000a# Store info about the experiment session\u000aexpName = 'source_monitoring'  # from the Builder filename that created this script\u000aexpInfo = {}\u000a\u000amyDlg = gui.Dlg(title=expName, size=gui.wx.Size(-1,-75))\u000amyDlg.addField(u'participant: ', u'')\u000amyDlg.addField('word lists: ', choices=['random','set your own']) \u000amyDlg.show()\u000aif myDlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['participant'] = myDlg.data[0]\u000aexpInfo['listMethod'] = myDlg.data[1]\u000aprint expInfo['listMethod']\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a\u000aif expInfo['listMethod']=='set your own':\u000a    myDlg2 = gui.Dlg(title='Set Word Lists')\u000a    conditions = ['unmodified', 'pitch - higher', 'pitch - lower']\u000a    for cNum in range(len(conditions)):\u000a        myDlg2.addField(conditions[cNum], choices=[1,2,3], initial=cNum+1)\u000a    myDlg2.show()\u000a    if myDlg2.OK == False: core.quit()  # user pressed cancel\u000a    expInfo['listOrder'] = myDlg2.data\u000a    \u000afrom psychopy import visual\u000a\u000a\u000a# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc\u000afilename = _thisDir + os.sep + 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# Setup the Window\u000awin = visual.Window(size=(1440, 900), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color=[-1,-1,-1], colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a# Initialize components for Routine "initialize_code"\u000ainitialize_codeClock = core.Clock()\u000afrom psychopy import gui\u000afrom pyo import *\u000aimport math, sys, csv, random\u000afrom collections import OrderedDict\u000aserv = Server().boot()\u000a\u000a## SETTINGS ##\u000a\u000a# This is the amount to change the pitch on each block of trials (both higher and lower)\u000aPITCH_DELTA = 0.5\u000a\u000a# This is the word list file\u000aWORD_LIST_FILE = "wordlist.csv"\u000a\u000a# Colors of the choice buttons\u000aSELF_BOX_FILL_COLOR = '#A6A9FF'\u000aSELF_BOX_BORDER_COLOR = '#3E45FA'\u000aOTHER_BOX_FILL_COLOR = '#FFFCA6'\u000aOTHER_BOX_BORDER_COLOR = '#FAF33E'\u000a\u000a## END SETTINGS ##\u000a\u000a\u000a# this function ends a routine immediately\u000adef endRoutine():\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "status"):\u000a            thisComponent.status = FINISHED\u000a        continueRoutine = False\u000a\u000a\u000a# initialize this variable - it keeps track of whether \u000a# the subject is finished speaking during a time stretch trial\u000afinished = True\u000a\u000a##########################################################\u000a### read in the original word list file and save word list file for this subject\u000a##########################################################\u000a# container array for file contents\u000aorig_words = []\u000a# read csv file with the original word lists (in same directory as this experiment script)\u000awith open(WORD_LIST_FILE, 'rU') as csvfile:\u000a    test = csv.reader(csvfile)\u000a    for i in test:\u000a        orig_words.append(i)\u000a\u000a# depending on experiementer's selection at run time, either randomize word lists or\u000a# use the experimenter's order\u000adef fixList(x):\u000a    return int(x)-1\u000a\u000aif expInfo['listMethod']=='set your own':\u000a    assignment_order = map(fixList, expInfo['listOrder'])\u000aelse:\u000a    assignment_order = random.sample([0,1,2], 3)\u000a\u000a# initialize word containers for the trial types\u000aunmodified_words = []\u000apitch_higher_words = []\u000apitch_lower_words = []\u000a\u000a# assign words to those containers\u000afor row in orig_words:\u000a    unmodified_words.append(row[assignment_order[0]])\u000a    pitch_higher_words.append(row[assignment_order[1]])\u000a    pitch_lower_words.append(row[assignment_order[2]])\u000a\u000a# save word lists for each trial type\u000aunmodified_word_list = unmodified_words.pop(0)\u000apitch_higher_word_list = pitch_higher_words.pop(0)\u000apitch_lower_word_list = pitch_lower_words.pop(0)\u000a\u000a# randomize words in their lists\u000arandom.shuffle(unmodified_words)\u000arandom.shuffle(pitch_higher_words)\u000arandom.shuffle(pitch_lower_words)\u000a\u000a# this will be the name of the wordlist csv file for this subject\u000awordlist_filename = filename+'_wordlist.csv'\u000aresults_filename = filename+'_summarized_results.csv'\u000a\u000a# build a big array with all the words and also attach trialtype, block, and amount data,\u000a# like this: [block, word, trialtype, amount, list]\u000amaster_list = []\u000a\u000a# start pitch change at 0\u000apitch_amount = 0\u000a\u000a# create blocks of 9 words and add them to master list\u000afor block_num in range(10):\u000a    block_words = []\u000a    pitch_amount = pitch_amount + PITCH_DELTA\u000a    for i in range(3):\u000a        word_index = block_num * 3 + i\u000a        subgroup = []\u000a        subgroup.append([block_num, unmodified_words[word_index], 'unmodified', 0, unmodified_word_list])\u000a        subgroup.append([block_num, pitch_higher_words[word_index], 'pitch higher', pitch_amount, pitch_higher_word_list])\u000a        subgroup.append([block_num, pitch_lower_words[word_index], 'pitch lower', -1 * pitch_amount, pitch_lower_word_list])\u000a        random.shuffle(subgroup)\u000a        block_words += subgroup\u000a    master_list += block_words\u000a\u000a# save csv file to disk\u000awith open(wordlist_filename,'wb') as w:\u000a    writer=csv.writer(w)\u000a    writer.writerow(['block', 'word', 'trialtype', 'amount', 'list'])\u000a    for row in master_list:\u000a        writer.writerow(row)\u000a\u000a# create container for stats\u000a# this keeps track of how many times the subject chooses "other" for\u000a#   each trial type per block\u000a# it gets reset each block\u000achoice_stats = OrderedDict()\u000achoice_stats['unmodified'] = 0 # we shouldn't need this one\u000achoice_stats['pitch higher'] = 0\u000achoice_stats['pitch lower'] = 0\u000achoice_stats['pitch higher block'] = 0\u000achoice_stats['pitch lower block'] = 0\u000achoice_stats['pitch higher amount'] = 0\u000achoice_stats['pitch lower amount'] = 0\u000a\u000a# these hold the "done" status for each pitch trial type\u000apitch_higher_done = False\u000apitch_lower_done = False\u000a\u000a# start with block number = 0\u000athis_block = 0\u000a\u000a# Initialize components for Routine "instructions"\u000ainstructionsClock = core.Clock()\u000atext_4 = visual.TextStim(win=win, ori=0, name='text_4',\u000a    text='Instructions will go here.',    font='Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aserv.start()\u000amic = Input(chnl=0)\u000atext = visual.TextStim(win=win, ori=0, name='text',\u000a    text='default text',    font='Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=-1.0)\u000a\u000a# Initialize components for Routine "choose_source"\u000achoose_sourceClock = core.Clock()\u000aquestion = visual.TextStim(win=win, ori=0, name='question',\u000a    text='Whose voice did you hear?',    font='Arial',\u000a    pos=[0, .5], height=0.1, wrapWidth=2,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000aself_box = visual.Rect(win=win, name='self_box',\u000a    width=[0.5, 0.5][0], height=[0.5, 0.5][1],\u000a    ori=0, pos=[-.5, -.5],\u000a    lineWidth=5, lineColor=SELF_BOX_BORDER_COLOR, lineColorSpace='rgb',\u000a    fillColor=SELF_BOX_FILL_COLOR, fillColorSpace='rgb',\u000a    opacity=1,depth=-1.0, \u000ainterpolate=True)\u000aself_label = visual.TextStim(win=win, ori=0, name='self_label',\u000a    text='Mine',    font='Arial',\u000a    pos=[-.5, -.5], height=0.1, wrapWidth=None,\u000a    color='black', colorSpace='rgb', opacity=1,\u000a    depth=-2.0)\u000aother_box = visual.Rect(win=win, name='other_box',\u000a    width=[0.5, 0.5][0], height=[0.5, 0.5][1],\u000a    ori=0, pos=[.5, -.5],\u000a    lineWidth=5, lineColor=OTHER_BOX_BORDER_COLOR, lineColorSpace='rgb',\u000a    fillColor=OTHER_BOX_FILL_COLOR, fillColorSpace='rgb',\u000a    opacity=1,depth=-3.0, \u000ainterpolate=True)\u000aother_label = visual.TextStim(win=win, ori=0, name='other_label',\u000a    text='Other',    font='Arial',\u000a    pos=[.5, -.5], height=0.1, wrapWidth=None,\u000a    color='black', colorSpace='rgb', opacity=1,\u000a    depth=-4.0)\u000amouse = event.Mouse(win=win)\u000ax, y = [None, None]\u000a\u000a\u000a# Initialize components for Routine "thankyou"\u000athankyouClock = core.Clock()\u000atext_3 = visual.TextStim(win=win, ori=0, name='text_3',\u000a    text=u'Thank you for participating!',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a\u000a# Initialize components for Routine "display_results"\u000adisplay_resultsClock = core.Clock()\u000aresults_text = visual.TextStim(win=win, ori=0, name='results_text',\u000a    text='default text',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=2,\u000a    color=u'white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "initialize_code"-------\u000at = 0\u000ainitialize_codeClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000a\u000a# keep track of which components have finished\u000ainitialize_codeComponents = []\u000afor thisComponent in initialize_codeComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "initialize_code"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = initialize_codeClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in initialize_codeComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "initialize_code"-------\u000afor thisComponent in initialize_codeComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a\u000a# the Routine "initialize_code" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a#------Prepare to start Routine "instructions"-------\u000at = 0\u000ainstructionsClock.reset()  # clock \u000aframeN = -1\u000aroutineTimer.add(5.000000)\u000a# update component parameters for each repeat\u000a# keep track of which components have finished\u000ainstructionsComponents = []\u000ainstructionsComponents.append(text_4)\u000afor thisComponent in instructionsComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instructions"-------\u000acontinueRoutine = True\u000awhile continueRoutine and routineTimer.getTime() > 0:\u000a    # get current time\u000a    t = instructionsClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *text_4* updates\u000a    if t >= 0.0 and text_4.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        text_4.tStart = t  # underestimates by a little under one frame\u000a        text_4.frameNStart = frameN  # exact frame index\u000a        text_4.setAutoDraw(True)\u000a    if text_4.status == STARTED and t >= (0.0 + (5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a        text_4.setAutoDraw(False)\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instructionsComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "instructions"-------\u000afor thisComponent in instructionsComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a\u000a# set up handler to look after randomisation of conditions etc\u000atrials = data.TrialHandler(nReps=1, method='sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(wordlist_filename),\u000a    seed=None, name='trials')\u000athisExp.addLoop(trials)  # add the loop to the experiment\u000athisTrial = trials.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisTrial.rgb)\u000aif thisTrial != None:\u000a    for paramName in thisTrial.keys():\u000a        exec(paramName + '= thisTrial.' + paramName)\u000a\u000afor thisTrial in trials:\u000a    currentLoop = trials\u000a    # abbreviate parameter names if possible (e.g. rgb = thisTrial.rgb)\u000a    if thisTrial != None:\u000a        for paramName in thisTrial.keys():\u000a            exec(paramName + '= thisTrial.' + paramName)\u000a    \u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(11.000000)\u000a    # update component parameters for each repeat\u000a    # check for new block. \u000a    # if it's a new block, check if previous block had 3 "other" votes for either pitch type\u000a    # if so,  1) record appropriate block number for that type\u000a    #  2) set "done" flag to true for that type\u000a    # if both pitch types are done, end the trials loop\u000a    if(block != this_block):\u000a        this_amount = trials.getEarlierTrial(-1).amount\u000a        if(choice_stats['pitch higher'] == 3):\u000a            expInfo.addData('pitch higher result block', this_block)\u000a            expInfo.addData('pitch higher result amount', this_amount)\u000a            choice_stats['pitch higher block'] = this_block\u000a            choice_stats['pitch higher amount'] = this_amount\u000a            pitch_higher_done = True\u000a        if(choice_stats['pitch lower'] == 3):\u000a            expInfo.addData('pitch lower result block', this_block)\u000a            expInfo.addData('pitch lower result amount', -1 * this_amount)\u000a            choice_stats['pitch lower block'] = this_block\u000a            choice_stats['pitch lower amount'] = this_amount\u000a            pitch_lower_done = True\u000a        if(pitch_lower_done and pitch_higher_done):\u000a            trials.finished = True\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        this_block = block\u000a        choice_stats['pitch higher'] = 0\u000a        choice_stats['pitch lower'] = 0\u000a    \u000a    \u000a    b = Harmonizer(mic, transpo=float(amount))\u000a    c = Gate(b, thresh=-90, falltime=0.02, lookahead=20.0).mix(2).out()\u000a    d = Follower2(b)\u000a    talkThresh = .08\u000a    talkStarted = False\u000a    stoppedTalking = False\u000a    stopTime = 100\u000a    \u000a    text.setText(word)\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(text)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        if d.get() > talkThresh:\u000a                talkStarted = True\u000a        \u000a        if talkStarted and not stoppedTalking:\u000a            if d.get() < talkThresh:\u000a                stoppedTalking = True\u000a                stopTime = globalClock.getTime() + 1\u000a        \u000a        if stoppedTalking and globalClock.getTime() >= stopTime:\u000a            b.stop()\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        \u000a        \u000a        # *text* updates\u000a        if t >= 1 and text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            text.tStart = t  # underestimates by a little under one frame\u000a            text.frameNStart = frameN  # exact frame index\u000a            text.setAutoDraw(True)\u000a        if text.status == STARTED and t >= (1 + (10-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            text.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    \u000a    \u000a    #------Prepare to start Routine "choose_source"-------\u000a    t = 0\u000a    choose_sourceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # setup some python lists for storing info about the mouse\u000a    if(pitch_lower_done and pitch_higher_done):\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status"):\u000a                thisComponent.status = FINISHED\u000a            continueRoutine = False\u000a    # keep track of which components have finished\u000a    choose_sourceComponents = []\u000a    choose_sourceComponents.append(question)\u000a    choose_sourceComponents.append(self_box)\u000a    choose_sourceComponents.append(self_label)\u000a    choose_sourceComponents.append(other_box)\u000a    choose_sourceComponents.append(other_label)\u000a    choose_sourceComponents.append(mouse)\u000a    for thisComponent in choose_sourceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choose_source"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choose_sourceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *question* updates\u000a        if t >= 0.0 and question.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            question.tStart = t  # underestimates by a little under one frame\u000a            question.frameNStart = frameN  # exact frame index\u000a            question.setAutoDraw(True)\u000a        \u000a        # *self_box* updates\u000a        if t >= 0.0 and self_box.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            self_box.tStart = t  # underestimates by a little under one frame\u000a            self_box.frameNStart = frameN  # exact frame index\u000a            self_box.setAutoDraw(True)\u000a        \u000a        # *self_label* updates\u000a        if t >= 0.0 and self_label.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            self_label.tStart = t  # underestimates by a little under one frame\u000a            self_label.frameNStart = frameN  # exact frame index\u000a            self_label.setAutoDraw(True)\u000a        \u000a        # *other_box* updates\u000a        if t >= 0.0 and other_box.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            other_box.tStart = t  # underestimates by a little under one frame\u000a            other_box.frameNStart = frameN  # exact frame index\u000a            other_box.setAutoDraw(True)\u000a        \u000a        # *other_label* updates\u000a        if t >= 0.0 and other_label.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            other_label.tStart = t  # underestimates by a little under one frame\u000a            other_label.frameNStart = frameN  # exact frame index\u000a            other_label.setAutoDraw(True)\u000a        if mouse.isPressedIn(self_box, buttons=[0]):\u000a            trials.addData('choice', 'self')\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        elif mouse.isPressedIn(other_box, buttons=[0]):\u000a            trials.addData('choice','other')\u000a            choice_stats[trialtype] += 1\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        \u000a        if self_box.contains(mouse):\u000a            self_box.fillColor = SELF_BOX_BORDER_COLOR\u000a        else:\u000a            self_box.fillColor = SELF_BOX_FILL_COLOR\u000a        \u000a        if other_box.contains(mouse):\u000a            other_box.fillColor = OTHER_BOX_BORDER_COLOR\u000a        else:\u000a            other_box.fillColor = OTHER_BOX_FILL_COLOR\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choose_sourceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choose_source"-------\u000a    for thisComponent in choose_sourceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for trials (TrialHandler)\u000a    \u000a    # the Routine "choose_source" was not non-slip safe, so reset the non-slip timer\u000a    routineTimer.reset()\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'trials'\u000a\u000a\u000a#------Prepare to start Routine "thankyou"-------\u000at = 0\u000athankyouClock.reset()  # clock \u000aframeN = -1\u000aroutineTimer.add(5.000000)\u000a# update component parameters for each repeat\u000a\u000a\u000a\u000a# keep track of which components have finished\u000athankyouComponents = []\u000athankyouComponents.append(text_3)\u000afor thisComponent in thankyouComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "thankyou"-------\u000acontinueRoutine = True\u000awhile continueRoutine and routineTimer.getTime() > 0:\u000a    # get current time\u000a    t = thankyouClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *text_3* updates\u000a    if t >= 0.0 and text_3.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        text_3.tStart = t  # underestimates by a little under one frame\u000a        text_3.frameNStart = frameN  # exact frame index\u000a        text_3.setAutoDraw(True)\u000a    if text_3.status == STARTED and t >= (0.0 + (5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a        text_3.setAutoDraw(False)\u000a    \u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in thankyouComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "thankyou"-------\u000afor thisComponent in thankyouComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000aresults = '\u005cn\u005cr'\u000a\u000aresults += 'Pitch (higher) block = ' + str(choice_stats['pitch higher block']) + '\u005cn\u005cr'\u000aresults += 'Pitch (lower) block = ' + str(choice_stats['pitch lower block']) + '\u005cn\u005cr'\u000aresults += '\u005cn\u005cr'\u000aresults += 'Pitch (higher) amount = ' + str(choice_stats['pitch higher amount']) + '\u005cn\u005cr'\u000aresults += 'Pitch (lower) amount = ' + str(choice_stats['pitch lower amount']) + '\u005cn\u005cr'\u000a\u000a\u000a\u000a\u000a#------Prepare to start Routine "display_results"-------\u000at = 0\u000adisplay_resultsClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000aresults_text.setText(results)\u000akey_resp_2 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_2.status = NOT_STARTED\u000a# keep track of which components have finished\u000adisplay_resultsComponents = []\u000adisplay_resultsComponents.append(results_text)\u000adisplay_resultsComponents.append(key_resp_2)\u000afor thisComponent in display_resultsComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "display_results"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = display_resultsClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *results_text* updates\u000a    if t >= 0.0 and results_text.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        results_text.tStart = t  # underestimates by a little under one frame\u000a        results_text.frameNStart = frameN  # exact frame index\u000a        results_text.setAutoDraw(True)\u000a    \u000a    # *key_resp_2* updates\u000a    if t >= 0.0 and key_resp_2.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_2.tStart = t  # underestimates by a little under one frame\u000a        key_resp_2.frameNStart = frameN  # exact frame index\u000a        key_resp_2.status = STARTED\u000a        # keyboard checking is just starting\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_2.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['esc'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in display_resultsComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "display_results"-------\u000afor thisComponent in display_resultsComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# the Routine "display_results" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000aserv.stop()\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p36
sS'thisTrial'
p37
g1
(cpsychopy.data
TrialType
p38
c__builtin__
dict
p39
(dp40
S'list'
p41
S'list2'
p42
sS'amount'
p43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp44
sS'word'
p45
S'word2.20'
p46
sS'trialtype'
p47
S'pitch higher'
p48
sS'block'
p49
g26
(g27
(S'i8'
I0
I1
tRp50
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp51
stRp52
sS'_exp'
p53
I178874896
sg10
S'trials'
p54
sg6
S'/Volumes/Macintosh HD/Users/poppe076/Desktop/source_monitoring_task/source_monitoring.py'
p55
sS'thisRepN'
p56
I0
sg15
I01
sg16
g17
sS'data'
p57
g1
(cpsychopy.data
DataHandler
p58
g39
(dp59
S'ran'
p60
cnumpy.ma.core
_mareconstruct
p61
(cnumpy.ma.core
MaskedArray
p62
cnumpy
ndarray
p63
(I0
tp64
S'b'
tRp65
(I1
(I90
I1
tg27
(S'f4'
I0
I1
tRp66
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p67
g61
(g62
g63
g64
S'b'
tRp68
(I1
(I90
I1
tg66
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
Ntbsg14
cnumpy.core.multiarray
_reconstruct
p69
(g63
(I0
tS'b'
tRp70
(I1
(I90
I1
tg27
(S'O4'
I0
I1
tRp71
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp72
S'other'
p73
ag73
ag73
ag73
ag73
ag73
ag73
ag73
ag73
aS'--'
p74
aS'--'
p75
aS'--'
p76
aS'--'
p77
aS'--'
p78
aS'--'
p79
aS'--'
p80
aS'--'
p81
aS'--'
p82
aS'--'
p83
aS'--'
p84
aS'--'
p85
aS'--'
p86
aS'--'
p87
aS'--'
p88
aS'--'
p89
aS'--'
p90
aS'--'
p91
aS'--'
p92
aS'--'
p93
aS'--'
p94
aS'--'
p95
aS'--'
p96
aS'--'
p97
aS'--'
p98
aS'--'
p99
aS'--'
p100
aS'--'
p101
aS'--'
p102
aS'--'
p103
aS'--'
p104
aS'--'
p105
aS'--'
p106
aS'--'
p107
aS'--'
p108
aS'--'
p109
aS'--'
p110
aS'--'
p111
aS'--'
p112
aS'--'
p113
aS'--'
p114
aS'--'
p115
aS'--'
p116
aS'--'
p117
aS'--'
p118
aS'--'
p119
aS'--'
p120
aS'--'
p121
aS'--'
p122
aS'--'
p123
aS'--'
p124
aS'--'
p125
aS'--'
p126
aS'--'
p127
aS'--'
p128
aS'--'
p129
aS'--'
p130
aS'--'
p131
aS'--'
p132
aS'--'
p133
aS'--'
p134
aS'--'
p135
aS'--'
p136
aS'--'
p137
aS'--'
p138
aS'--'
p139
aS'--'
p140
aS'--'
p141
aS'--'
p142
aS'--'
p143
aS'--'
p144
aS'--'
p145
aS'--'
p146
aS'--'
p147
aS'--'
p148
aS'--'
p149
aS'--'
p150
aS'--'
p151
aS'--'
p152
aS'--'
p153
aS'--'
p154
atbstRp155
(dp156
S'isNumeric'
p157
(dp158
g60
I01
sg67
I01
sg14
I00
ssg54
g33
sS'dataTypes'
p159
(lp160
g60
ag67
ag14
asS'dataShape'
p161
(lp162
I90
aI1
asbsS'method'
p163
S'sequential'
p164
sS'sequenceIndices'
p165
g69
(g63
(I0
tS'b'
tRp166
(I1
(I90
I1
tg27
(S'i4'
I0
I1
tRp167
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00'
tbsS'finished'
p168
I00
sS'nReps'
p169
I1
sS'nRemaining'
p170
I80
sS'trialList'
p171
(lp172
g1
(g38
g39
(dp173
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp174
sg45
S'word2.8'
p175
sg47
g48
sg49
g26
(g50
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp176
stRp177
ag1
(g38
g39
(dp178
g41
S'list1'
p179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp180
sg45
S'word1.18'
p181
sg47
S'pitch lower'
p182
sg49
g26
(g50
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp183
stRp184
ag1
(g38
g39
(dp185
g41
S'list3'
p186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp187
sg45
S'word3.30'
p188
sg47
S'unmodified'
p189
sg49
g26
(g50
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp190
stRp191
ag1
(g38
g39
(dp192
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp193
sg45
S'word2.3'
p194
sg47
g48
sg49
g26
(g50
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp195
stRp196
ag1
(g38
g39
(dp197
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp198
sg45
S'word3.28'
p199
sg47
g189
sg49
g26
(g50
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp200
stRp201
ag1
(g38
g39
(dp202
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp203
sg45
S'word1.11'
p204
sg47
g182
sg49
g26
(g50
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp205
stRp206
ag1
(g38
g39
(dp207
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp208
sg45
S'word2.6'
p209
sg47
g48
sg49
g26
(g50
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp210
stRp211
ag1
(g38
g39
(dp212
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp213
sg45
S'word3.17'
p214
sg47
g189
sg49
g26
(g50
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp215
stRp216
ag1
(g38
g39
(dp217
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp218
sg45
S'word1.29'
p219
sg47
g182
sg49
g26
(g50
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp220
stRp221
ag52
ag1
(g38
g39
(dp222
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp223
sg45
S'word1.19'
p224
sg47
g182
sg49
g26
(g50
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp225
stRp226
ag1
(g38
g39
(dp227
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp228
sg45
S'word3.22'
p229
sg47
g189
sg49
g26
(g50
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp230
stRp231
ag1
(g38
g39
(dp232
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp233
sg45
S'word1.25'
p234
sg47
g182
sg49
g26
(g50
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp235
stRp236
ag1
(g38
g39
(dp237
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp238
sg45
S'word3.10'
p239
sg47
g189
sg49
g26
(g50
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp240
stRp241
ag1
(g38
g39
(dp242
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp243
sg45
S'word2.9'
p244
sg47
g48
sg49
g26
(g50
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp245
stRp246
ag1
(g38
g39
(dp247
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp248
sg45
S'word3.25'
p249
sg47
g189
sg49
g26
(g50
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp250
stRp251
ag1
(g38
g39
(dp252
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp253
sg45
S'word2.14'
p254
sg47
g48
sg49
g26
(g50
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp255
stRp256
ag1
(g38
g39
(dp257
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp258
sg45
S'word1.4'
p259
sg47
g182
sg49
g26
(g50
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp260
stRp261
ag1
(g38
g39
(dp262
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp263
sg45
S'word1.14'
p264
sg47
g182
sg49
g26
(g50
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp265
stRp266
ag1
(g38
g39
(dp267
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp268
sg45
S'word2.5'
p269
sg47
g48
sg49
g26
(g50
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp270
stRp271
ag1
(g38
g39
(dp272
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp273
sg45
S'word3.18'
p274
sg47
g189
sg49
g26
(g50
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp275
stRp276
ag1
(g38
g39
(dp277
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp278
sg45
S'word3.14'
p279
sg47
g189
sg49
g26
(g50
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp280
stRp281
ag1
(g38
g39
(dp282
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp283
sg45
S'word2.22'
p284
sg47
g48
sg49
g26
(g50
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp285
stRp286
ag1
(g38
g39
(dp287
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp288
sg45
S'word1.15'
p289
sg47
g182
sg49
g26
(g50
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp290
stRp291
ag1
(g38
g39
(dp292
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp293
sg45
S'word2.27'
p294
sg47
g48
sg49
g26
(g50
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp295
stRp296
ag1
(g38
g39
(dp297
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp298
sg45
S'word1.13'
p299
sg47
g182
sg49
g26
(g50
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp300
stRp301
ag1
(g38
g39
(dp302
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp303
sg45
S'word3.27'
p304
sg47
g189
sg49
g26
(g50
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp305
stRp306
ag1
(g38
g39
(dp307
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp308
sg45
S'word1.26'
p309
sg47
g182
sg49
g26
(g50
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp310
stRp311
ag1
(g38
g39
(dp312
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp313
sg45
S'word2.25'
p314
sg47
g48
sg49
g26
(g50
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp315
stRp316
ag1
(g38
g39
(dp317
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp318
sg45
S'word3.7'
p319
sg47
g189
sg49
g26
(g50
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp320
stRp321
ag1
(g38
g39
(dp322
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp323
sg45
S'word3.23'
p324
sg47
g189
sg49
g26
(g50
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp325
stRp326
ag1
(g38
g39
(dp327
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp328
sg45
S'word1.24'
p329
sg47
g182
sg49
g26
(g50
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp330
stRp331
ag1
(g38
g39
(dp332
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp333
sg45
S'word2.1'
p334
sg47
g48
sg49
g26
(g50
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp335
stRp336
ag1
(g38
g39
(dp337
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp338
sg45
S'word2.30'
p339
sg47
g48
sg49
g26
(g50
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp340
stRp341
ag1
(g38
g39
(dp342
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp343
sg45
S'word1.30'
p344
sg47
g182
sg49
g26
(g50
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp345
stRp346
ag1
(g38
g39
(dp347
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp348
sg45
S'word3.13'
p349
sg47
g189
sg49
g26
(g50
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp350
stRp351
ag1
(g38
g39
(dp352
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp353
sg45
S'word1.22'
p354
sg47
g182
sg49
g26
(g50
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp355
stRp356
ag1
(g38
g39
(dp357
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp358
sg45
S'word3.1'
p359
sg47
g189
sg49
g26
(g50
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp360
stRp361
ag1
(g38
g39
(dp362
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp363
sg45
S'word2.23'
p364
sg47
g48
sg49
g26
(g50
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp365
stRp366
ag1
(g38
g39
(dp367
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp368
sg45
S'word3.9'
p369
sg47
g189
sg49
g26
(g50
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp370
stRp371
ag1
(g38
g39
(dp372
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp373
sg45
S'word2.18'
p374
sg47
g48
sg49
g26
(g50
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp375
stRp376
ag1
(g38
g39
(dp377
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp378
sg45
S'word1.5'
p379
sg47
g182
sg49
g26
(g50
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp380
stRp381
ag1
(g38
g39
(dp382
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp383
sg45
S'word1.21'
p384
sg47
g182
sg49
g26
(g50
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp385
stRp386
ag1
(g38
g39
(dp387
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp388
sg45
S'word2.26'
p389
sg47
g48
sg49
g26
(g50
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp390
stRp391
ag1
(g38
g39
(dp392
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp393
sg45
S'word3.26'
p394
sg47
g189
sg49
g26
(g50
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp395
stRp396
ag1
(g38
g39
(dp397
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp398
sg45
S'word2.2'
p399
sg47
g48
sg49
g26
(g50
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp400
stRp401
ag1
(g38
g39
(dp402
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp403
sg45
S'word3.15'
p404
sg47
g189
sg49
g26
(g50
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp405
stRp406
ag1
(g38
g39
(dp407
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp408
sg45
S'word1.27'
p409
sg47
g182
sg49
g26
(g50
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp410
stRp411
ag1
(g38
g39
(dp412
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp413
sg45
S'word2.13'
p414
sg47
g48
sg49
g26
(g50
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp415
stRp416
ag1
(g38
g39
(dp417
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp418
sg45
S'word1.1'
p419
sg47
g182
sg49
g26
(g50
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp420
stRp421
ag1
(g38
g39
(dp422
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp423
sg45
S'word3.6'
p424
sg47
g189
sg49
g26
(g50
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp425
stRp426
ag1
(g38
g39
(dp427
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp428
sg45
S'word3.5'
p429
sg47
g189
sg49
g26
(g50
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp430
stRp431
ag1
(g38
g39
(dp432
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp433
sg45
S'word2.4'
p434
sg47
g48
sg49
g26
(g50
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp435
stRp436
ag1
(g38
g39
(dp437
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp438
sg45
S'word1.12'
p439
sg47
g182
sg49
g26
(g50
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp440
stRp441
ag1
(g38
g39
(dp442
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp443
sg45
S'word1.28'
p444
sg47
g182
sg49
g26
(g50
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp445
stRp446
ag1
(g38
g39
(dp447
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp448
sg45
S'word2.19'
p449
sg47
g48
sg49
g26
(g50
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp450
stRp451
ag1
(g38
g39
(dp452
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp453
sg45
S'word3.12'
p454
sg47
g189
sg49
g26
(g50
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp455
stRp456
ag1
(g38
g39
(dp457
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp458
sg45
S'word2.7'
p459
sg47
g48
sg49
g26
(g50
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp460
stRp461
ag1
(g38
g39
(dp462
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp463
sg45
S'word3.8'
p464
sg47
g189
sg49
g26
(g50
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp465
stRp466
ag1
(g38
g39
(dp467
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp468
sg45
S'word1.2'
p469
sg47
g182
sg49
g26
(g50
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp470
stRp471
ag1
(g38
g39
(dp472
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp473
sg45
S'word2.24'
p474
sg47
g48
sg49
g26
(g50
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp475
stRp476
ag1
(g38
g39
(dp477
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp478
sg45
S'word1.17'
p479
sg47
g182
sg49
g26
(g50
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp480
stRp481
ag1
(g38
g39
(dp482
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp483
sg45
S'word3.16'
p484
sg47
g189
sg49
g26
(g50
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp485
stRp486
ag1
(g38
g39
(dp487
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp488
sg45
S'word1.9'
p489
sg47
g182
sg49
g26
(g50
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp490
stRp491
ag1
(g38
g39
(dp492
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp493
sg45
S'word3.24'
p494
sg47
g189
sg49
g26
(g50
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp495
stRp496
ag1
(g38
g39
(dp497
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp498
sg45
S'word2.10'
p499
sg47
g48
sg49
g26
(g50
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp500
stRp501
ag1
(g38
g39
(dp502
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp503
sg45
S'word3.2'
p504
sg47
g189
sg49
g26
(g50
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp505
stRp506
ag1
(g38
g39
(dp507
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp508
sg45
S'word1.8'
p509
sg47
g182
sg49
g26
(g50
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp510
stRp511
ag1
(g38
g39
(dp512
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp513
sg45
S'word2.28'
p514
sg47
g48
sg49
g26
(g50
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp515
stRp516
ag1
(g38
g39
(dp517
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp518
sg45
S'word2.11'
p519
sg47
g48
sg49
g26
(g50
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp520
stRp521
ag1
(g38
g39
(dp522
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp523
sg45
S'word1.23'
p524
sg47
g182
sg49
g26
(g50
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp525
stRp526
ag1
(g38
g39
(dp527
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp528
sg45
S'word3.29'
p529
sg47
g189
sg49
g26
(g50
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp530
stRp531
ag1
(g38
g39
(dp532
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp533
sg45
S'word3.3'
p534
sg47
g189
sg49
g26
(g50
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp535
stRp536
ag1
(g38
g39
(dp537
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp538
sg45
S'word2.29'
p539
sg47
g48
sg49
g26
(g50
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp540
stRp541
ag1
(g38
g39
(dp542
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp543
sg45
S'word1.6'
p544
sg47
g182
sg49
g26
(g50
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp545
stRp546
ag1
(g38
g39
(dp547
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp548
sg45
S'word2.16'
p549
sg47
g48
sg49
g26
(g50
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp550
stRp551
ag1
(g38
g39
(dp552
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp553
sg45
S'word1.3'
p554
sg47
g182
sg49
g26
(g50
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp555
stRp556
ag1
(g38
g39
(dp557
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp558
sg45
S'word3.11'
p559
sg47
g189
sg49
g26
(g50
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp560
stRp561
ag1
(g38
g39
(dp562
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp563
sg45
S'word2.12'
p564
sg47
g48
sg49
g26
(g50
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp565
stRp566
ag1
(g38
g39
(dp567
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp568
sg45
S'word3.20'
p569
sg47
g189
sg49
g26
(g50
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp570
stRp571
ag1
(g38
g39
(dp572
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp573
sg45
S'word1.20'
p574
sg47
g182
sg49
g26
(g50
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp575
stRp576
ag1
(g38
g39
(dp577
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp578
sg45
S'word3.19'
p579
sg47
g189
sg49
g26
(g50
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp580
stRp581
ag1
(g38
g39
(dp582
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp583
sg45
S'word2.15'
p584
sg47
g48
sg49
g26
(g50
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp585
stRp586
ag1
(g38
g39
(dp587
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp588
sg45
S'word1.16'
p589
sg47
g182
sg49
g26
(g50
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp590
stRp591
ag1
(g38
g39
(dp592
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp593
sg45
S'word1.7'
p594
sg47
g182
sg49
g26
(g50
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp595
stRp596
ag1
(g38
g39
(dp597
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp598
sg45
S'word2.21'
p599
sg47
g48
sg49
g26
(g50
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp600
stRp601
ag1
(g38
g39
(dp602
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp603
sg45
S'word3.4'
p604
sg47
g189
sg49
g26
(g50
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp605
stRp606
ag1
(g38
g39
(dp607
g41
g186
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp608
sg45
S'word3.21'
p609
sg47
g189
sg49
g26
(g50
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp610
stRp611
ag1
(g38
g39
(dp612
g41
g42
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp613
sg45
S'word2.17'
p614
sg47
g48
sg49
g26
(g50
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp615
stRp616
ag1
(g38
g39
(dp617
g41
g179
sg43
g26
(g28
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp618
sg45
S'word1.10'
p619
sg47
g182
sg49
g26
(g50
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp620
stRp621
asS'seed'
p622
NsS'thisIndex'
p623
g26
(g167
S'\t\x00\x00\x00'
tRp624
sS'thisN'
p625
I9
sS'thisTrialN'
p626
I9
sS'nTotal'
p627
I90
sS'_warnUseOfNext'
p628
I01
sbasS'saveWideText'
p629
I01
sS'thisEntry'
p630
(dp631
sS'version'
p632
S''
sS'_paramNamesSoFar'
p633
(lp634
g45
ag43
ag41
ag47
ag49
asS'entries'
p635
(lp636
(dp637
S'trials.thisIndex'
p638
g26
(g167
S'\x00\x00\x00\x00'
tRp639
sg45
g175
sS'trials.thisRepN'
p640
I0
sg23
g24
sg41
g42
sg25
g29
sS'trials.thisN'
p641
I0
sg43
g174
sg22
g11
sS'trials.thisTrialN'
p642
I0
sg47
g48
sg18
g19
sg20
g21
sg14
g73
sg49
g176
sa(dp643
S'trials.thisIndex'
p644
g26
(g167
S'\x01\x00\x00\x00'
tRp645
sg45
g181
sS'trials.thisRepN'
p646
I0
sg23
g24
sg41
g179
sg25
g29
sS'trials.thisN'
p647
I1
sg43
g180
sg22
g11
sS'trials.thisTrialN'
p648
I1
sg47
g182
sg18
g19
sg20
g21
sg14
g73
sg49
g183
sa(dp649
S'trials.thisIndex'
p650
g26
(g167
S'\x02\x00\x00\x00'
tRp651
sg45
g188
sS'trials.thisRepN'
p652
I0
sg23
g24
sg41
g186
sg25
g29
sS'trials.thisN'
p653
I2
sg43
g187
sg22
g11
sS'trials.thisTrialN'
p654
I2
sg47
g189
sg18
g19
sg20
g21
sg14
g73
sg49
g190
sa(dp655
S'trials.thisIndex'
p656
g26
(g167
S'\x03\x00\x00\x00'
tRp657
sg45
g194
sS'trials.thisRepN'
p658
I0
sg23
g24
sg41
g42
sg25
g29
sS'trials.thisN'
p659
I3
sg43
g193
sg22
g11
sS'trials.thisTrialN'
p660
I3
sg47
g48
sg18
g19
sg20
g21
sg14
g73
sg49
g195
sa(dp661
S'trials.thisIndex'
p662
g26
(g167
S'\x04\x00\x00\x00'
tRp663
sg45
g199
sS'trials.thisRepN'
p664
I0
sg23
g24
sg41
g186
sg25
g29
sS'trials.thisN'
p665
I4
sg43
g198
sg22
g11
sS'trials.thisTrialN'
p666
I4
sg47
g189
sg18
g19
sg20
g21
sg14
g73
sg49
g200
sa(dp667
S'trials.thisIndex'
p668
g26
(g167
S'\x05\x00\x00\x00'
tRp669
sg45
g204
sS'trials.thisRepN'
p670
I0
sg23
g24
sg41
g179
sg25
g29
sS'trials.thisN'
p671
I5
sg43
g203
sg22
g11
sS'trials.thisTrialN'
p672
I5
sg47
g182
sg18
g19
sg20
g21
sg14
g73
sg49
g205
sa(dp673
S'trials.thisIndex'
p674
g26
(g167
S'\x06\x00\x00\x00'
tRp675
sg45
g209
sS'trials.thisRepN'
p676
I0
sg23
g24
sg41
g42
sg25
g29
sS'trials.thisN'
p677
I6
sg43
g208
sg22
g11
sS'trials.thisTrialN'
p678
I6
sg47
g48
sg18
g19
sg20
g21
sg14
g73
sg49
g210
sa(dp679
S'trials.thisIndex'
p680
g26
(g167
S'\x07\x00\x00\x00'
tRp681
sg45
g214
sS'trials.thisRepN'
p682
I0
sg23
g24
sg41
g186
sg25
g29
sS'trials.thisN'
p683
I7
sg43
g213
sg22
g11
sS'trials.thisTrialN'
p684
I7
sg47
g189
sg18
g19
sg20
g21
sg14
g73
sg49
g215
sa(dp685
S'trials.thisIndex'
p686
g26
(g167
S'\x08\x00\x00\x00'
tRp687
sg45
g219
sS'trials.thisRepN'
p688
I0
sg23
g24
sg41
g179
sg25
g29
sS'trials.thisN'
p689
I8
sg43
g218
sg22
g11
sS'trials.thisTrialN'
p690
I8
sg47
g182
sg18
g19
sg20
g21
sg14
g73
sg49
g220
sasS'loops'
p691
(lp692
g33
asS'savePickle'
p693
I00
sb.