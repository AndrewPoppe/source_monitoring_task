ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
V/Volumes/Macintosh HD/Users/poppe076/Desktop/source_monitoring_task/source_monitoring.psyexp
p7
sS'dataFileName'
p8
V/Volumes/Macintosh HD/Users/poppe076/Desktop/source_monitoring_task/data/ok_source_monitoring_2015_Feb_05_1338
p9
sS'runtimeInfo'
p10
NsS'name'
p11
S'source_monitoring'
p12
sS'dataNames'
p13
(lp14
S'choice'
p15
asS'autoLog'
p16
I01
sS'extraInfo'
p17
(dp18
S'date'
p19
V2015_Feb_05_1338
p20
sS'frameRate'
p21
cnumpy.core.multiarray
scalar
p22
(cnumpy
dtype
p23
(S'f8'
I0
I1
tRp24
(I3
S'<'
NNNI-1
I-1
I0
tbS'n\x96Y\x02e\xf0M@'
tRp25
sS'expName'
p26
g12
sVsession
p27
V001
p28
sVparticipant
p29
Vok
p30
ssS'loopsUnfinished'
p31
(lp32
sS'saveWideText'
p33
I01
sS'thisEntry'
p34
(dp35
sS'version'
p36
S''
sS'_paramNamesSoFar'
p37
(lp38
S'word'
p39
aS'amount'
p40
aS'list'
p41
aS'trialtype'
p42
aS'trialtype_extended'
p43
asS'entries'
p44
(lp45
(dp46
g27
g28
sS'trials.thisIndex'
p47
g22
(g23
(S'i4'
I0
I1
tRp48
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00'
tRp49
sg21
g25
sg39
Vword9.1
p50
sS'trials.thisRepN'
p51
I0
sg41
Vlist9
p52
sg43
Vpitch_lower_large
p53
sS'trials.thisN'
p54
I0
sg40
V-1.5
p55
sg26
g12
sS'trials.thisTrialN'
p56
I0
sg42
Vpitch
p57
sg19
g20
sg29
g30
sg15
S'other'
p58
sa(dp59
g27
g28
sS'trials.thisIndex'
p60
g22
(g48
S'\x01\x00\x00\x00'
tRp61
sg21
g25
sg39
Vword3.1
p62
sS'trials.thisRepN'
p63
I0
sg41
Vlist3
p64
sg43
Vunmodified
p65
sS'trials.thisN'
p66
I1
sg40
Vunmodified
p67
sg26
g12
sS'trials.thisTrialN'
p68
I1
sg42
Vunmodified
p69
sg19
g20
sg29
g30
sg15
S'self'
p70
sa(dp71
g27
g28
sS'trials.thisIndex'
p72
g22
(g48
S'\x02\x00\x00\x00'
tRp73
sg21
g25
sg39
Vword6.1
p74
sS'trials.thisRepN'
p75
I0
sg41
Vlist6
p76
sg43
Vpitch_higher_small
p77
sS'trials.thisN'
p78
I2
sg40
V1.5
p79
sg26
g12
sS'trials.thisTrialN'
p80
I2
sg42
Vpitch
p81
sg19
g20
sg29
g30
sg15
g58
sa(dp82
g27
g28
sS'trials.thisIndex'
p83
g22
(g48
S'\x03\x00\x00\x00'
tRp84
sg21
g25
sg39
Vword8.1
p85
sS'trials.thisRepN'
p86
I0
sg41
Vlist8
p87
sg43
Vpitch_higher_large
p88
sS'trials.thisN'
p89
I3
sg40
V2
sg26
g12
sS'trials.thisTrialN'
p90
I3
sg42
Vpitch
p91
sg19
g20
sg29
g30
sg15
g70
sa(dp92
g27
g28
sS'trials.thisIndex'
p93
g22
(g48
S'\x04\x00\x00\x00'
tRp94
sg21
g25
sg39
Vword4.1
p95
sS'trials.thisRepN'
p96
I0
sg41
Vlist4
p97
sg43
Vslow_medium
p98
sS'trials.thisN'
p99
I4
sg40
V0.8
p100
sg26
g12
sS'trials.thisTrialN'
p101
I4
sg42
Vspeed
p102
sg19
g20
sg29
g30
sg15
g70
sa(dp103
g27
g28
sS'trials.thisIndex'
p104
g22
(g48
S'\x05\x00\x00\x00'
tRp105
sg21
g25
sg39
Vword1.1
p106
sS'trials.thisRepN'
p107
I0
sg41
Vlist1
p108
sg43
Vslow_small
p109
sS'trials.thisN'
p110
I5
sg40
V0.9
p111
sg26
g12
sS'trials.thisTrialN'
p112
I5
sg42
Vspeed
p113
sg19
g20
sg29
g30
sg15
g58
sa(dp114
g27
g28
sS'trials.thisIndex'
p115
g22
(g48
S'\x06\x00\x00\x00'
tRp116
sg21
g25
sg39
Vword7.1
p117
sS'trials.thisRepN'
p118
I0
sg41
Vlist7
p119
sg43
Vpitch_lower_small
p120
sS'trials.thisN'
p121
I6
sg40
V-1.5
p122
sg26
g12
sS'trials.thisTrialN'
p123
I6
sg42
Vpitch
p124
sg19
g20
sg29
g30
sg15
g70
sa(dp125
g27
g28
sS'trials.thisIndex'
p126
g22
(g48
S'\x07\x00\x00\x00'
tRp127
sg21
g25
sg39
Vword2.1
p128
sS'trials.thisRepN'
p129
I0
sg41
Vlist2
p130
sg43
Vunmodified
p131
sS'trials.thisN'
p132
I7
sg40
Vunmodified
p133
sg26
g12
sS'trials.thisTrialN'
p134
I7
sg42
Vunmodified
p135
sg19
g20
sg29
g30
sg15
g58
sa(dp136
g27
g28
sS'trials.thisIndex'
p137
g22
(g48
S'\x08\x00\x00\x00'
tRp138
sg21
g25
sg39
Vword5.1
p139
sS'trials.thisRepN'
p140
I0
sg41
Vlist5
p141
sg43
Vslow_large
p142
sS'trials.thisN'
p143
I8
sg40
V0.7
p144
sg26
g12
sS'trials.thisTrialN'
p145
I8
sg42
Vspeed
p146
sg19
g20
sg29
g30
sg15
g70
sasS'loops'
p147
(lp148
g1
(cpsychopy.data
TrialHandler
p149
g3
NtRp150
(dp151
S'origin'
p152
V<PsychoPy2experiment version="1.81.03" encoding="utf-8">\u000a  <Settings>\u000a    <Param name="Show mouse" val="False" valType="bool" updates="None"/>\u000a    <Param name="Data filename" val="'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None"/>\u000a    <Param name="Monitor" val="testMonitor" valType="str" updates="None"/>\u000a    <Param name="Enable Escape" val="True" valType="bool" updates="None"/>\u000a    <Param name="color" val="$[-1,-1,-1]" valType="str" updates="None"/>\u000a    <Param name="Window size (pixels)" val="[1440, 900]" valType="code" updates="None"/>\u000a    <Param name="Full-screen window" val="True" valType="bool" updates="None"/>\u000a    <Param name="colorSpace" val="rgb" valType="str" updates="None"/>\u000a    <Param name="Experiment info" val="{u'session': u'001', u'participant': u''}" valType="code" updates="None"/>\u000a    <Param name="Save csv file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Show info dlg" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save wide csv file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Save psydat file" val="True" valType="bool" updates="None"/>\u000a    <Param name="expName" val="source_monitoring" valType="str" updates="None"/>\u000a    <Param name="logging level" val="exp" valType="code" updates="None"/>\u000a    <Param name="blendMode" val="avg" valType="str" updates="None"/>\u000a    <Param name="Save excel file" val="False" valType="bool" updates="None"/>\u000a    <Param name="Units" val="use prefs" valType="str" updates="None"/>\u000a    <Param name="Save log file" val="True" valType="bool" updates="None"/>\u000a    <Param name="Screen" val="1" valType="num" updates="None"/>\u000a  </Settings>\u000a  <Routines>\u000a    <Routine name="ok">\u000a      <CodeComponent name="code">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="code" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="if(trialtype == &quot;pitch&quot;): # pitch trial&#10;    mic = Input(chnl=0)&#10;    b = Harmonizer(mic, transpo=float(amount))&#10;    c = Gate(b, thresh=-90, falltime=0.02, lookahead=20.0).mix(2).out()&#10;    d = Follower2(b)&#10;    talkThresh = .08&#10;    talkStarted = False&#10;    stoppedTalking = False&#10;    stopTime = 100&#10;elif(trialtype == 'speed'): # speed trial&#10;    finished = 'not finished'&#10;    playback_speed = float(amount)&#10;    dur = 2&#10;    if playback_speed == 0:&#10;        playback_speed = pow(10,-100)&#10;    i = Input()&#10;&#10;    def start():&#10;        rec.play()&#10;        a.play().out()&#10;        tf.stop()&#10;&#10;    def stop():&#10;        i.stop()&#10;        global finished&#10;        finished = 'finished'&#10;        a.stop()&#10;        a.reset()&#10;        tf.play()&#10;&#10;    tab = NewTable(dur, chnls=2)&#10;    transpo_to_normal = math.log(1.0 / playback_speed, 2) * 12&#10;    j = Harmonizer(i, transpo=transpo_to_normal).mix(2)&#10;    k = Gate(j, thresh=-70, falltime=0.02, lookahead=20.0)&#10;    rec = TableRec(k, tab)&#10;    a = TableRead(table=tab, freq=playback_speed/dur).stop()&#10;    env = Follower(i)&#10;    th = Thresh(env, .2)&#10;    tf = TrigFunc(th, start)&#10;    tr = TrigFunc(rec['trig'], stop)&#10;else: # unmodified trial&#10;    mic = Input(chnl=0)&#10;    b = Gate(mic, thresh=-90, falltime=0.02, lookahead=20.0).mix(2).out()&#10;    d = Follower2(mic)&#10;    talkThresh = .08&#10;    talkStarted = False&#10;    stoppedTalking = False&#10;    stopTime = 100" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="if(trialtype == &quot;pitch&quot; or trialtype == &quot;unmodified&quot;):&#10;    if d.get() &gt; talkThresh:&#10;            talkStarted = True&#10;&#10;    if talkStarted and not stoppedTalking:&#10;        if d.get() &lt; talkThresh:&#10;            stoppedTalking = True&#10;            stopTime = globalClock.getTime() + 1&#10;&#10;    if stoppedTalking and globalClock.getTime() &gt;= stopTime:&#10;        mic.stop()&#10;        for thisComponent in trialComponents:&#10;            if hasattr(thisComponent, &quot;status&quot;):&#10;                thisComponent.status = FINISHED&#10;            continueRoutine = False&#10;else:&#10;    if(finished == 'finished'):&#10;        for thisComponent in trialComponents:&#10;            if hasattr(thisComponent, &quot;status&quot;):&#10;                thisComponent.status = FINISHED&#10;            continueRoutine = False" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="text_2">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_2" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$word" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="10" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="trial_setup">\u000a      <CodeComponent name="code_4">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="code_4" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="display_results">\u000a      <TextComponent name="results_text">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="results_text" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$results" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <KeyboardComponent name="key_resp_2">\u000a        <Param name="correctAns" val="" valType="str" updates="constant"/>\u000a        <Param name="storeCorrect" val="False" valType="bool" updates="constant"/>\u000a        <Param name="name" val="key_resp_2" valType="code" updates="None"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutine" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="discard previous" val="True" valType="bool" updates="constant"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="allowedKeys" val="'esc'" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="store" val="nothing" valType="str" updates="constant"/>\u000a      </KeyboardComponent>\u000a    </Routine>\u000a    <Routine name="trial">\u000a      <CodeComponent name="code_2">\u000a        <Param name="Begin Experiment" val="serv.start()&#10;mic = Input(chnl=0)" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="code_2" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="if(trialtype == &quot;pitch&quot;): # pitch trial&#10;    b = Harmonizer(mic, transpo=float(amount))&#10;    c = Gate(b, thresh=-90, falltime=0.02, lookahead=20.0).mix(2).out()&#10;    d = Follower2(b)&#10;    talkThresh = .08&#10;    talkStarted = False&#10;    stoppedTalking = False&#10;    stopTime = 100&#10;elif(trialtype == 'speed'): # speed trial&#10;    finished = 'not finished'&#10;    playback_speed = float(amount)&#10;    dur = 2&#10;    if playback_speed == 0:&#10;        playback_speed = pow(10,-100)&#10;&#10;    def start():&#10;        rec.play()&#10;        a.play().out()&#10;        tf.stop()&#10;&#10;    def stop():&#10;        k.stop()&#10;        global finished&#10;        finished = 'finished'&#10;        a.stop()&#10;        a.reset()&#10;        tf.play()&#10;&#10;    tab = NewTable(dur, chnls=2)&#10;    transpo_to_normal = math.log(1.0 / playback_speed, 2) * 12&#10;    j = Harmonizer(mic, transpo=transpo_to_normal).mix(2)&#10;    k = Gate(j, thresh=-70, falltime=0.02, lookahead=20.0)&#10;    rec = TableRec(k, tab)&#10;    a = TableRead(table=tab, freq=playback_speed/dur).stop()&#10;    env = Follower(mic)&#10;    th = Thresh(env, .1)&#10;    tf = TrigFunc(th, start)&#10;    tr = TrigFunc(rec['trig'], stop)&#10;else: # unmodified trial&#10;    b = Gate(mic, thresh=-90, falltime=0.02, lookahead=20.0).mix(2).out()&#10;    d = Follower2(mic)&#10;    talkThresh = .08&#10;    talkStarted = False&#10;    stoppedTalking = False&#10;    stopTime = 100" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="serv.stop()" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="if(trialtype == &quot;pitch&quot; or trialtype == &quot;unmodified&quot;):&#10;    if d.get() &gt; talkThresh:&#10;            talkStarted = True&#10;&#10;    if talkStarted and not stoppedTalking:&#10;        if d.get() &lt; talkThresh:&#10;            stoppedTalking = True&#10;            stopTime = globalClock.getTime() + 1&#10;&#10;    if stoppedTalking and globalClock.getTime() &gt;= stopTime:&#10;        b.stop()&#10;        for thisComponent in trialComponents:&#10;            if hasattr(thisComponent, &quot;status&quot;):&#10;                thisComponent.status = FINISHED&#10;            continueRoutine = False&#10;else:&#10;    if(finished == 'finished'):&#10;        for thisComponent in trialComponents:&#10;            if hasattr(thisComponent, &quot;status&quot;):&#10;                thisComponent.status = FINISHED&#10;            continueRoutine = False" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a      <TextComponent name="text">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="$word" valType="str" updates="set every repeat"/>\u000a        <Param name="stopVal" val="10" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="1" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a    <Routine name="choose_source">\u000a      <TextComponent name="question">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="question" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="2" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Whose voice did you hear?" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, .5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <PolygonComponent name="self_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="self_box" valType="code" updates="None"/>\u000a        <Param name="fillColor" val="$SELF_BOX_FILL_COLOR" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[-.5, -.5]" valType="code" updates="constant"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="lineWidth" val="5" valType="code" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="lineColor" val="$SELF_BOX_BORDER_COLOR" valType="str" updates="constant"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="nVertices" val="4" valType="int" updates="constant"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </PolygonComponent>\u000a      <TextComponent name="self_label">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="self_label" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="black" valType="str" updates="constant"/>\u000a        <Param name="text" val="Mine" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[-.5, -.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <PolygonComponent name="other_box">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="fillColorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="other_box" valType="code" updates="None"/>\u000a        <Param name="fillColor" val="$OTHER_BOX_FILL_COLOR" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[.5, -.5]" valType="code" updates="constant"/>\u000a        <Param name="interpolate" val="linear" valType="str" updates="constant"/>\u000a        <Param name="lineWidth" val="5" valType="code" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="lineColor" val="$OTHER_BOX_BORDER_COLOR" valType="str" updates="constant"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="lineColorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="nVertices" val="4" valType="int" updates="constant"/>\u000a        <Param name="size" val="[0.5, 0.5]" valType="code" updates="constant"/>\u000a      </PolygonComponent>\u000a      <TextComponent name="other_label">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="other_label" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="black" valType="str" updates="constant"/>\u000a        <Param name="text" val="Other" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[.5, -.5]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <MouseComponent name="mouse">\u000a        <Param name="name" val="mouse" valType="code" updates="None"/>\u000a        <Param name="timeRelativeTo" val="routine" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="forceEndRoutineOnPress" val="False" valType="bool" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="saveMouseState" val="never" valType="str" updates="None"/>\u000a      </MouseComponent>\u000a      <CodeComponent name="code_5">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="code_5" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="if mouse.isPressedIn(self_box, buttons=[0]):&#10;    trials.addData('choice', 'self')&#10;    choice_stats[trialtype_extended].append(1)&#10;    for thisComponent in trialComponents:&#10;            if hasattr(thisComponent, &quot;status&quot;):&#10;                thisComponent.status = FINISHED&#10;            continueRoutine = False&#10;elif mouse.isPressedIn(other_box, buttons=[0]):&#10;    trials.addData('choice','other')&#10;    choice_stats[trialtype_extended].append(0)&#10;    for thisComponent in trialComponents:&#10;            if hasattr(thisComponent, &quot;status&quot;):&#10;                thisComponent.status = FINISHED&#10;            continueRoutine = False&#10;&#10;if self_box.contains(mouse):&#10;    self_box.fillColor = SELF_BOX_BORDER_COLOR&#10;else:&#10;    self_box.fillColor = SELF_BOX_FILL_COLOR&#10;&#10;if other_box.contains(mouse):&#10;    other_box.fillColor = OTHER_BOX_BORDER_COLOR&#10;else:&#10;    other_box.fillColor = OTHER_BOX_FILL_COLOR" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="thankyou">\u000a      <TextComponent name="text_3">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_3" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Thank you for participating!" valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a      <CodeComponent name="code_6">\u000a        <Param name="Begin Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="code_6" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="# calculate mean of stats&#10;choice_means = OrderedDict()&#10;for ttype in choice_stats:&#10;    choice_means[ttype] = np.mean(choice_stats[ttype])" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="#win.close()&#10;#myDlg = gui.Dlg(title=&quot;Results&quot;, size=gui.wx.Size(-200,-200))&#10;#for ttype in choice_means:&#10;#    selfValue = &quot;%.2f&quot; % (choice_means[ttype] * 100.0)&#10;#    otherValue = &quot;%.2f&quot; % (100 - choice_means[ttype] * 100.0)&#10;#    myDlg.addText(ttype+': '+selfValue+'% self, '+otherValue+'% other')&#10;#myDlg.show()&#10;&#10;#core.quit()&#10;&#10;results = ''&#10;for ttype in choice_means:&#10;    selfValue = &quot;%.2f&quot; % (choice_means[ttype] * 100.0)&#10;    otherValue = &quot;%.2f&quot; % (100 - choice_means[ttype] * 100.0)&#10;    results += ttype+': '+selfValue+'% self, '+otherValue+'% other'+'\u005cn\u005cr'" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="initialize_code">\u000a      <CodeComponent name="code_3">\u000a        <Param name="Begin Experiment" val="from psychopy import gui&#10;from pyo import *&#10;import math, sys, csv, random&#10;from collections import OrderedDict&#10;serv = Server().boot()&#10;&#10;## SETTINGS ##&#10;&#10;SPEED_SMALL_AMOUNT = .9   #0.975&#10;SPEED_MEDIUM_AMOUNT = .8  #0.95&#10;SPEED_LARGE_AMOUNT = .7   #0.925&#10;PITCH_HIGHER_SMALL_AMOUNT = 1.5    #0.5&#10;PITCH_HIGHER_LARGE_AMOUNT = 2    #1.0&#10;PITCH_LOWER_SMALL_AMOUNT = -1.5 #-0.5&#10;PITCH_LOWER_LARGE_AMOUNT = -2 #-1.0&#10;&#10;SELF_BOX_FILL_COLOR = '#A6A9FF'&#10;SELF_BOX_BORDER_COLOR = '#3E45FA'&#10;OTHER_BOX_FILL_COLOR = '#FFFCA6'&#10;OTHER_BOX_BORDER_COLOR = '#FAF33E'&#10;&#10;## END SETTINGS ##&#10;&#10;&#10;&#10;&#10;&#10;# initialize this variable - it keeps track of whether &#10;# the subject is finished speaking during a time stretch trial&#10;finished = True&#10;&#10;##########################################################&#10;### read in the original word list file and save word list file for this subject&#10;##########################################################&#10;# container array for file contents&#10;orig_words = []&#10;# read csv file with the original word lists (in same directory as this experiment script)&#10;with open('orig_words.csv', 'rU') as csvfile:&#10;    test = csv.reader(csvfile)&#10;    for i in test:&#10;        orig_words.append(i)&#10;&#10;# for now, assignment of list to trial type is random&#10;# need to write method for letting experimenter choose assignment at run time&#10;assignment_order = random.sample([0,1,2,3,4,5,6,7,8], 9)&#10;&#10;# initialize word containers for the trial types&#10;unmodified_words1 = []&#10;unmodified_words2 = []&#10;slowed_small_words = []&#10;slowed_medium_words = []&#10;slowed_large_words = []&#10;pitch_higher_small_words = []&#10;pitch_higher_large_words = []&#10;pitch_lower_small_words = []&#10;pitch_lower_large_words = []&#10;&#10;# assign words to those containers&#10;for row in orig_words:&#10;    unmodified_words1.append(row[assignment_order[0]])&#10;    unmodified_words2.append(row[assignment_order[1]])&#10;    slowed_small_words.append(row[assignment_order[2]])&#10;    slowed_medium_words.append(row[assignment_order[3]])&#10;    slowed_large_words.append(row[assignment_order[4]])&#10;    pitch_higher_small_words.append(row[assignment_order[5]])&#10;    pitch_higher_large_words.append(row[assignment_order[6]])&#10;    pitch_lower_small_words.append(row[assignment_order[7]])&#10;    pitch_lower_large_words.append(row[assignment_order[8]])&#10;&#10;# this will be the name of the wordlist csv file for this subject&#10;wordlist_filename = filename+'_wordlist.csv'&#10;&#10;# build a big array with all the words and also attach trialtype and amount data,&#10;# like this: [word, trialtype, trialtype_extended, amount, list]&#10;master_list = []&#10;&#10;# add the words (CAREFUL! This assumes all of the categories are of equal length)&#10;for word_index in range(len(slowed_small_words)):&#10;    if word_index == 0:&#10;        continue&#10;    master_list.append([unmodified_words1[word_index], 'unmodified', 'unmodified',            'unmodified',                                        unmodified_words1[0]])&#10;    master_list.append([unmodified_words2[word_index], 'unmodified', 'unmodified',            'unmodified',                                        unmodified_words2[0]])&#10;    master_list.append([slowed_small_words[word_index],         'speed', 'slow_small',           SPEED_SMALL_AMOUNT,                slowed_small_words[0]])&#10;    master_list.append([slowed_medium_words[word_index],     'speed', 'slow_medium',       SPEED_MEDIUM_AMOUNT,             slowed_medium_words[0]])&#10;    master_list.append([slowed_large_words[word_index],         'speed', 'slow_large',             SPEED_LARGE_AMOUNT,               slowed_large_words[0]])&#10;    master_list.append([pitch_higher_small_words[word_index], 'pitch',  'pitch_higher_small', PITCH_HIGHER_SMALL_AMOUNT,  pitch_higher_small_words[0]])&#10;    master_list.append([pitch_higher_large_words[word_index], 'pitch',  'pitch_higher_large',  PITCH_HIGHER_LARGE_AMOUNT, pitch_higher_large_words[0]])&#10;    master_list.append([pitch_lower_small_words[word_index],  'pitch',  'pitch_lower_small',   PITCH_LOWER_SMALL_AMOUNT,  pitch_lower_small_words[0]])&#10;    master_list.append([pitch_lower_large_words[word_index],  'pitch',  'pitch_lower_large',    PITCH_LOWER_SMALL_AMOUNT,  pitch_lower_large_words[0]])&#10;&#10;# now randomize the list&#10;random.shuffle(master_list)&#10;&#10;# save csv file to disk&#10;with open(wordlist_filename,'wb') as w:&#10;    writer=csv.writer(w)&#10;    writer.writerow(['word','trialtype', 'trialtype_extended', 'amount', 'list'])&#10;    for row in master_list:&#10;        writer.writerow(row)&#10;&#10;# create container for stats&#10;choice_stats = OrderedDict()&#10;choice_stats['unmodified'] = []&#10;choice_stats['slow_small'] = []&#10;choice_stats['slow_medium'] = []&#10;choice_stats['slow_large'] = []&#10;choice_stats['pitch_higher_small'] = []&#10;choice_stats['pitch_higher_large'] = []&#10;choice_stats['pitch_lower_small'] = []&#10;choice_stats['pitch_lower_large'] = []" valType="extendedCode" updates="constant"/>\u000a        <Param name="name" val="code_3" valType="code" updates="None"/>\u000a        <Param name="Begin Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Routine" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="End Experiment" val="" valType="extendedCode" updates="constant"/>\u000a        <Param name="Each Frame" val="" valType="extendedCode" updates="constant"/>\u000a      </CodeComponent>\u000a    </Routine>\u000a    <Routine name="instructions">\u000a      <TextComponent name="text_4">\u000a        <Param name="opacity" val="1" valType="code" updates="constant"/>\u000a        <Param name="colorSpace" val="rgb" valType="str" updates="constant"/>\u000a        <Param name="name" val="text_4" valType="code" updates="None"/>\u000a        <Param name="wrapWidth" val="" valType="code" updates="constant"/>\u000a        <Param name="color" val="white" valType="str" updates="constant"/>\u000a        <Param name="text" val="Instructions will go here." valType="str" updates="constant"/>\u000a        <Param name="stopVal" val="5" valType="code" updates="constant"/>\u000a        <Param name="durationEstim" val="" valType="code" updates="None"/>\u000a        <Param name="pos" val="[0, 0]" valType="code" updates="constant"/>\u000a        <Param name="flip" val="" valType="str" updates="constant"/>\u000a        <Param name="startEstim" val="" valType="code" updates="None"/>\u000a        <Param name="units" val="from exp settings" valType="str" updates="None"/>\u000a        <Param name="startType" val="time (s)" valType="str" updates="None"/>\u000a        <Param name="ori" val="0" valType="code" updates="constant"/>\u000a        <Param name="stopType" val="duration (s)" valType="str" updates="None"/>\u000a        <Param name="startVal" val="0.0" valType="code" updates="None"/>\u000a        <Param name="font" val="Arial" valType="str" updates="constant"/>\u000a        <Param name="letterHeight" val="0.1" valType="code" updates="constant"/>\u000a      </TextComponent>\u000a    </Routine>\u000a  </Routines>\u000a  <Flow>\u000a    <Routine name="initialize_code"/>\u000a    <Routine name="instructions"/>\u000a    <LoopInitiator loopType="TrialHandler" name="trials">\u000a      <Param name="conditionsFile" val="$wordlist_filename" valType="str" updates="None"/>\u000a      <Param name="name" val="trials" valType="code" updates="None"/>\u000a      <Param name="isTrials" val="True" valType="bool" updates="None"/>\u000a      <Param name="random seed" val="" valType="code" updates="None"/>\u000a      <Param name="loopType" val="sequential" valType="str" updates="None"/>\u000a      <Param name="nReps" val="1" valType="code" updates="None"/>\u000a      <Param name="endPoints" val="[0, 1]" valType="num" updates="None"/>\u000a      <Param name="conditions" val="None" valType="str" updates="None"/>\u000a      <Param name="Selected rows" val="" valType="str" updates="None"/>\u000a    </LoopInitiator>\u000a    <Routine name="trial"/>\u000a    <Routine name="choose_source"/>\u000a    <LoopTerminator name="trials"/>\u000a    <Routine name="thankyou"/>\u000a    <Routine name="display_results"/>\u000a  </Flow>\u000a</PsychoPy2experiment>\u000a
p153
sS'thisTrial'
p154
(lp155
sS'_exp'
p156
I220098352
sg11
S'trials'
p157
sg6
g7
sS'thisRepN'
p158
I1
sg16
I01
sg17
g18
sS'data'
p159
g1
(cpsychopy.data
DataHandler
p160
c__builtin__
dict
p161
(dp162
S'ran'
p163
cnumpy.ma.core
_mareconstruct
p164
(cnumpy.ma.core
MaskedArray
p165
cnumpy
ndarray
p166
(I0
tp167
S'b'
tRp168
(I1
(I9
I1
tg23
(S'f4'
I0
I1
tRp169
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p170
g164
(g165
g166
g167
S'b'
tRp171
(I1
(I9
I1
tg169
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg15
cnumpy.core.multiarray
_reconstruct
p172
(g166
(I0
tS'b'
tRp173
(I1
(I9
I1
tg23
(S'O4'
I0
I1
tRp174
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp175
g58
ag70
ag58
ag70
ag70
ag58
ag70
ag58
ag70
atbstRp176
(dp177
S'isNumeric'
p178
(dp179
g163
I01
sg170
I01
sg15
I00
ssg157
g150
sS'dataTypes'
p180
(lp181
g163
ag170
ag15
asS'dataShape'
p182
(lp183
I9
aI1
asbsS'method'
p184
S'sequential'
p185
sS'sequenceIndices'
p186
g172
(g166
(I0
tS'b'
tRp187
(I1
(I9
I1
tg48
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00'
tbsS'finished'
p188
I01
sS'nReps'
p189
I1
sS'nRemaining'
p190
I-1
sS'trialList'
p191
(lp192
g1
(cpsychopy.data
TrialType
p193
g161
(dp194
g41
g52
sg40
g55
sg39
g50
sg42
g57
sg43
g53
stRp195
ag1
(g193
g161
(dp196
g41
g64
sg40
g67
sg39
g62
sg42
g69
sg43
g65
stRp197
ag1
(g193
g161
(dp198
g41
g76
sg40
g79
sg39
g74
sg42
g81
sg43
g77
stRp199
ag1
(g193
g161
(dp200
g41
g87
sg40
V2
sg39
g85
sg42
g91
sg43
g88
stRp201
ag1
(g193
g161
(dp202
g41
g97
sg40
g100
sg39
g95
sg42
g102
sg43
g98
stRp203
ag1
(g193
g161
(dp204
g41
g108
sg40
g111
sg39
g106
sg42
g113
sg43
g109
stRp205
ag1
(g193
g161
(dp206
g41
g119
sg40
g122
sg39
g117
sg42
g124
sg43
g120
stRp207
ag1
(g193
g161
(dp208
g41
g130
sg40
g133
sg39
g128
sg42
g135
sg43
g131
stRp209
ag1
(g193
g161
(dp210
g41
g141
sg40
g144
sg39
g139
sg42
g146
sg43
g142
stRp211
asS'seed'
p212
NsS'thisIndex'
p213
g138
sS'thisN'
p214
I9
sS'thisTrialN'
p215
I0
sS'nTotal'
p216
I9
sS'_warnUseOfNext'
p217
I01
sbasS'savePickle'
p218
I01
sb.