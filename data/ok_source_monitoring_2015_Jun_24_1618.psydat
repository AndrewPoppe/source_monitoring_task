ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
V/Volumes/Macintosh HD/Users/poppe076/Desktop/source_monitoring_task/data/ok_source_monitoring_2015_Jun_24_1618
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'source_monitoring'
p11
sS'dataNames'
p12
(lp13
S'choice'
p14
asS'autoLog'
p15
I01
sS'extraInfo'
p16
(dp17
S'pitch lower result amount'
p18
cnumpy.core.multiarray
scalar
p19
(cnumpy
dtype
p20
(S'f8'
I0
I1
tRp21
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00\x00\x00\xe0?'
tRp22
sS'participant'
p23
Vok
p24
sS'pitch lower result block'
p25
g19
(g20
(S'i8'
I0
I1
tRp26
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp27
sS'frameRate'
p28
g19
(g21
S'\x9b\xb0m)\xfd\x0eN@'
tRp29
sS'pitch higher result amount'
p30
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp31
sS'expName'
p32
g11
sS'date'
p33
V2015_Jun_24_1618
p34
sS'listMethod'
p35
Vrandom
p36
sS'pitch higher result block'
p37
g27
ssS'loopsUnfinished'
p38
(lp39
sS'saveWideText'
p40
I01
sS'thisEntry'
p41
(dp42
sS'version'
p43
S''
sS'_paramNamesSoFar'
p44
(lp45
S'word'
p46
aS'amount'
p47
aS'list'
p48
aS'trialtype'
p49
aS'block'
p50
asS'entries'
p51
(lp52
(dp53
S'trials.thisIndex'
p54
g19
(g20
(S'i4'
I0
I1
tRp55
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00'
tRp56
sg46
S'word2.11'
p57
sS'trials.thisRepN'
p58
I0
sg23
g24
sg48
S'list2'
p59
sg28
g29
sS'trials.thisN'
p60
I0
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp61
sg32
g11
sS'trials.thisTrialN'
p62
I0
sg49
S'pitch higher'
p63
sg33
g34
sg35
g36
sg14
S'other'
p64
sg50
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp65
sa(dp66
S'trials.thisIndex'
p67
g19
(g55
S'\x01\x00\x00\x00'
tRp68
sg46
S'word3.8'
p69
sS'trials.thisRepN'
p70
I0
sg23
g24
sg48
S'list3'
p71
sg28
g29
sS'trials.thisN'
p72
I1
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp73
sg32
g11
sS'trials.thisTrialN'
p74
I1
sg49
S'pitch lower'
p75
sg33
g34
sg35
g36
sg14
g64
sg50
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp76
sa(dp77
S'trials.thisIndex'
p78
g19
(g55
S'\x02\x00\x00\x00'
tRp79
sg46
S'word1.14'
p80
sS'trials.thisRepN'
p81
I0
sg23
g24
sg48
S'list1'
p82
sg28
g29
sS'trials.thisN'
p83
I2
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp84
sg32
g11
sS'trials.thisTrialN'
p85
I2
sg49
S'unmodified'
p86
sg33
g34
sg35
g36
sg14
g64
sg50
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp87
sa(dp88
S'trials.thisIndex'
p89
g19
(g55
S'\x03\x00\x00\x00'
tRp90
sg46
S'word2.1'
p91
sS'trials.thisRepN'
p92
I0
sg23
g24
sg48
g59
sg28
g29
sS'trials.thisN'
p93
I3
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp94
sg32
g11
sS'trials.thisTrialN'
p95
I3
sg49
g63
sg33
g34
sg35
g36
sg14
g64
sg50
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp96
sa(dp97
S'trials.thisIndex'
p98
g19
(g55
S'\x04\x00\x00\x00'
tRp99
sg46
S'word1.30'
p100
sS'trials.thisRepN'
p101
I0
sg23
g24
sg48
g82
sg28
g29
sS'trials.thisN'
p102
I4
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp103
sg32
g11
sS'trials.thisTrialN'
p104
I4
sg49
g86
sg33
g34
sg35
g36
sg14
g64
sg50
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp105
sa(dp106
S'trials.thisIndex'
p107
g19
(g55
S'\x05\x00\x00\x00'
tRp108
sg46
S'word3.25'
p109
sS'trials.thisRepN'
p110
I0
sg23
g24
sg48
g71
sg28
g29
sS'trials.thisN'
p111
I5
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp112
sg32
g11
sS'trials.thisTrialN'
p113
I5
sg49
g75
sg33
g34
sg35
g36
sg14
g64
sg50
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp114
sa(dp115
S'trials.thisIndex'
p116
g19
(g55
S'\x06\x00\x00\x00'
tRp117
sg46
S'word2.28'
p118
sS'trials.thisRepN'
p119
I0
sg23
g24
sg48
g59
sg28
g29
sS'trials.thisN'
p120
I6
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp121
sg32
g11
sS'trials.thisTrialN'
p122
I6
sg49
g63
sg33
g34
sg35
g36
sg14
g64
sg50
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp123
sa(dp124
S'trials.thisIndex'
p125
g19
(g55
S'\x07\x00\x00\x00'
tRp126
sg46
S'word1.12'
p127
sS'trials.thisRepN'
p128
I0
sg23
g24
sg48
g82
sg28
g29
sS'trials.thisN'
p129
I7
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp130
sg32
g11
sS'trials.thisTrialN'
p131
I7
sg49
g86
sg33
g34
sg35
g36
sg14
g64
sg50
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp132
sa(dp133
S'trials.thisIndex'
p134
g19
(g55
S'\x08\x00\x00\x00'
tRp135
sg46
S'word3.15'
p136
sg18
g22
sS'trials.thisRepN'
p137
I0
sg25
g27
sg48
g71
sg28
g29
sS'trials.thisN'
p138
I8
sg33
g34
sg47
g31
sg32
g11
sS'trials.thisTrialN'
p139
I8
sg49
g75
sg35
g36
sg30
g31
sg23
g24
sg14
g64
sg37
g27
sg50
g27
sasS'loops'
p140
(lp141
g1
(cpsychopy.data
TrialHandler
p142
g3
NtRp143
(dp144
S'origin'
p145
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things like STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000a\u000a# Ensure that relative paths start from the same directory as this script\u000a_thisDir = os.path.dirname(os.path.abspath(__file__))\u000aos.chdir(_thisDir)\u000a\u000a# Store info about the experiment session\u000aexpName = 'source_monitoring'  # from the Builder filename that created this script\u000aexpInfo = {}\u000a\u000amyDlg = gui.Dlg(title=expName, size=gui.wx.Size(-1,-75))\u000amyDlg.addField(u'participant: ', u'')\u000amyDlg.addField('word lists: ', choices=['random','set your own']) \u000amyDlg.show()\u000aif myDlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['participant'] = myDlg.data[0]\u000aexpInfo['listMethod'] = myDlg.data[1]\u000aprint expInfo['listMethod']\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a\u000aif expInfo['listMethod']=='set your own':\u000a    myDlg2 = gui.Dlg(title='Set Word Lists')\u000a    conditions = ['unmodified', 'pitch - higher', 'pitch - lower']\u000a    for cNum in range(len(conditions)):\u000a        myDlg2.addField(conditions[cNum], choices=[1,2,3], initial=cNum+1)\u000a    myDlg2.show()\u000a    if myDlg2.OK == False: core.quit()  # user pressed cancel\u000a    expInfo['listOrder'] = myDlg2.data\u000a    \u000afrom psychopy import visual\u000a\u000a\u000a# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc\u000afilename = _thisDir + os.sep + 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# Setup the Window\u000awin = visual.Window(size=(1440, 900), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color=[-1,-1,-1], colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a# Initialize components for Routine "initialize_code"\u000ainitialize_codeClock = core.Clock()\u000afrom psychopy import gui\u000afrom pyo import *\u000aimport math, sys, csv, random\u000afrom collections import OrderedDict\u000aserv = Server().boot()\u000a\u000a## SETTINGS ##\u000a\u000a# This is the amount to change the pitch on each block of trials (both higher and lower)\u000aPITCH_DELTA = 0.5\u000a\u000a# This is the word list file\u000aWORD_LIST_FILE = "wordlist.csv"\u000a\u000a# Colors of the choice buttons\u000aSELF_BOX_FILL_COLOR = '#A6A9FF'\u000aSELF_BOX_BORDER_COLOR = '#3E45FA'\u000aOTHER_BOX_FILL_COLOR = '#FFFCA6'\u000aOTHER_BOX_BORDER_COLOR = '#FAF33E'\u000a\u000a## END SETTINGS ##\u000a\u000a\u000a# this function ends a routine immediately\u000adef endRoutine():\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "status"):\u000a            thisComponent.status = FINISHED\u000a        continueRoutine = False\u000a\u000a\u000a# initialize this variable - it keeps track of whether \u000a# the subject is finished speaking during a time stretch trial\u000afinished = True\u000a\u000a##########################################################\u000a### read in the original word list file and save word list file for this subject\u000a##########################################################\u000a# container array for file contents\u000aorig_words = []\u000a# read csv file with the original word lists (in same directory as this experiment script)\u000awith open(WORD_LIST_FILE, 'rU') as csvfile:\u000a    test = csv.reader(csvfile)\u000a    for i in test:\u000a        orig_words.append(i)\u000a\u000a# depending on experiementer's selection at run time, either randomize word lists or\u000a# use the experimenter's order\u000adef fixList(x):\u000a    return int(x)-1\u000a\u000aif expInfo['listMethod']=='set your own':\u000a    assignment_order = map(fixList, expInfo['listOrder'])\u000aelse:\u000a    assignment_order = random.sample([0,1,2], 3)\u000a\u000a# initialize word containers for the trial types\u000aunmodified_words = []\u000apitch_higher_words = []\u000apitch_lower_words = []\u000a\u000a# assign words to those containers\u000afor row in orig_words:\u000a    unmodified_words.append(row[assignment_order[0]])\u000a    pitch_higher_words.append(row[assignment_order[1]])\u000a    pitch_lower_words.append(row[assignment_order[2]])\u000a\u000a# save word lists for each trial type\u000aunmodified_word_list = unmodified_words.pop(0)\u000apitch_higher_word_list = pitch_higher_words.pop(0)\u000apitch_lower_word_list = pitch_lower_words.pop(0)\u000a\u000a# randomize words in their lists\u000arandom.shuffle(unmodified_words)\u000arandom.shuffle(pitch_higher_words)\u000arandom.shuffle(pitch_lower_words)\u000a\u000a# this will be the name of the wordlist csv file for this subject\u000awordlist_filename = filename+'_wordlist.csv'\u000aresults_filename = filename+'_summarized_results.csv'\u000a\u000a# build a big array with all the words and also attach trialtype, block, and amount data,\u000a# like this: [block, word, trialtype, amount, list]\u000amaster_list = []\u000a\u000a# start pitch change at 0\u000apitch_amount = 0\u000a\u000a# create blocks of 9 words and add them to master list\u000afor block_num in range(10):\u000a    block_words = []\u000a    pitch_amount = pitch_amount + PITCH_DELTA\u000a    for i in range(3):\u000a        word_index = block_num * 3 + i\u000a        subgroup = []\u000a        subgroup.append([block_num+1, unmodified_words[word_index], 'unmodified', 0, unmodified_word_list])\u000a        subgroup.append([block_num+1, pitch_higher_words[word_index], 'pitch higher', pitch_amount, pitch_higher_word_list])\u000a        subgroup.append([block_num+1, pitch_lower_words[word_index], 'pitch lower', -1 * pitch_amount, pitch_lower_word_list])\u000a        random.shuffle(subgroup)\u000a        block_words += subgroup\u000a    master_list += block_words\u000a\u000a# save csv file to disk\u000awith open(wordlist_filename,'wb') as w:\u000a    writer=csv.writer(w)\u000a    writer.writerow(['block', 'word', 'trialtype', 'amount', 'list'])\u000a    for row in master_list:\u000a        writer.writerow(row)\u000a\u000a# create container for stats\u000a# this keeps track of how many times the subject chooses "other" for\u000a#   each trial type per block\u000a# it gets reset each block\u000achoice_stats = OrderedDict()\u000achoice_stats['unmodified'] = 0 # we shouldn't need this one\u000achoice_stats['pitch higher'] = 0\u000achoice_stats['pitch lower'] = 0\u000achoice_stats['pitch higher block'] = 0\u000achoice_stats['pitch lower block'] = 0\u000achoice_stats['pitch higher amount'] = 0\u000achoice_stats['pitch lower amount'] = 0\u000a\u000a# these hold the "done" status for each pitch trial type\u000apitch_higher_done = False\u000apitch_lower_done = False\u000a\u000a# start with block number = 0\u000athis_block = 0\u000a\u000a# Initialize components for Routine "instructions"\u000ainstructionsClock = core.Clock()\u000atext_4 = visual.TextStim(win=win, ori=0, name='text_4',\u000a    text='Instructions will go here.',    font='Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aserv.start()\u000amic = Input(chnl=0)\u000atext = visual.TextStim(win=win, ori=0, name='text',\u000a    text='default text',    font='Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=-1.0)\u000a\u000a# Initialize components for Routine "choose_source"\u000achoose_sourceClock = core.Clock()\u000aquestion = visual.TextStim(win=win, ori=0, name='question',\u000a    text='Whose voice did you hear?',    font='Arial',\u000a    pos=[0, .5], height=0.1, wrapWidth=2,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000aself_box = visual.Rect(win=win, name='self_box',\u000a    width=[0.5, 0.5][0], height=[0.5, 0.5][1],\u000a    ori=0, pos=[-.5, -.5],\u000a    lineWidth=5, lineColor=SELF_BOX_BORDER_COLOR, lineColorSpace='rgb',\u000a    fillColor=SELF_BOX_FILL_COLOR, fillColorSpace='rgb',\u000a    opacity=1,depth=-1.0, \u000ainterpolate=True)\u000aself_label = visual.TextStim(win=win, ori=0, name='self_label',\u000a    text='Mine',    font='Arial',\u000a    pos=[-.5, -.5], height=0.1, wrapWidth=None,\u000a    color='black', colorSpace='rgb', opacity=1,\u000a    depth=-2.0)\u000aother_box = visual.Rect(win=win, name='other_box',\u000a    width=[0.5, 0.5][0], height=[0.5, 0.5][1],\u000a    ori=0, pos=[.5, -.5],\u000a    lineWidth=5, lineColor=OTHER_BOX_BORDER_COLOR, lineColorSpace='rgb',\u000a    fillColor=OTHER_BOX_FILL_COLOR, fillColorSpace='rgb',\u000a    opacity=1,depth=-3.0, \u000ainterpolate=True)\u000aother_label = visual.TextStim(win=win, ori=0, name='other_label',\u000a    text='Other',    font='Arial',\u000a    pos=[.5, -.5], height=0.1, wrapWidth=None,\u000a    color='black', colorSpace='rgb', opacity=1,\u000a    depth=-4.0)\u000amouse = event.Mouse(win=win)\u000ax, y = [None, None]\u000a\u000a\u000a# Initialize components for Routine "thankyou"\u000athankyouClock = core.Clock()\u000atext_3 = visual.TextStim(win=win, ori=0, name='text_3',\u000a    text=u'Thank you for participating!',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a\u000a# Initialize components for Routine "display_results"\u000adisplay_resultsClock = core.Clock()\u000aresults_text = visual.TextStim(win=win, ori=0, name='results_text',\u000a    text='default text',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=2,\u000a    color=u'white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "initialize_code"-------\u000at = 0\u000ainitialize_codeClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000a\u000a# keep track of which components have finished\u000ainitialize_codeComponents = []\u000afor thisComponent in initialize_codeComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "initialize_code"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = initialize_codeClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in initialize_codeComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "initialize_code"-------\u000afor thisComponent in initialize_codeComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a\u000a# the Routine "initialize_code" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a#------Prepare to start Routine "instructions"-------\u000at = 0\u000ainstructionsClock.reset()  # clock \u000aframeN = -1\u000aroutineTimer.add(5.000000)\u000a# update component parameters for each repeat\u000a# keep track of which components have finished\u000ainstructionsComponents = []\u000ainstructionsComponents.append(text_4)\u000afor thisComponent in instructionsComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instructions"-------\u000acontinueRoutine = True\u000awhile continueRoutine and routineTimer.getTime() > 0:\u000a    # get current time\u000a    t = instructionsClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *text_4* updates\u000a    if t >= 0.0 and text_4.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        text_4.tStart = t  # underestimates by a little under one frame\u000a        text_4.frameNStart = frameN  # exact frame index\u000a        text_4.setAutoDraw(True)\u000a    if text_4.status == STARTED and t >= (0.0 + (5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a        text_4.setAutoDraw(False)\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instructionsComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "instructions"-------\u000afor thisComponent in instructionsComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a\u000a# set up handler to look after randomisation of conditions etc\u000atrials = data.TrialHandler(nReps=1, method='sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(wordlist_filename),\u000a    seed=None, name='trials')\u000athisExp.addLoop(trials)  # add the loop to the experiment\u000athisTrial = trials.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisTrial.rgb)\u000aif thisTrial != None:\u000a    for paramName in thisTrial.keys():\u000a        exec(paramName + '= thisTrial.' + paramName)\u000a\u000afor thisTrial in trials:\u000a    currentLoop = trials\u000a    # abbreviate parameter names if possible (e.g. rgb = thisTrial.rgb)\u000a    if thisTrial != None:\u000a        for paramName in thisTrial.keys():\u000a            exec(paramName + '= thisTrial.' + paramName)\u000a    \u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(11.000000)\u000a    # update component parameters for each repeat\u000a    \u000a    b = Harmonizer(mic, transpo=float(amount))\u000a    c = Gate(b, thresh=-90, falltime=0.02, lookahead=20.0).mix(2).out()\u000a    d = Follower2(b)\u000a    talkThresh = .08\u000a    talkStarted = False\u000a    stoppedTalking = False\u000a    stopTime = 100\u000a    \u000a    text.setText(word)\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(text)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        if d.get() > talkThresh:\u000a                talkStarted = True\u000a        \u000a        if talkStarted and not stoppedTalking:\u000a            if d.get() < talkThresh:\u000a                stoppedTalking = True\u000a                stopTime = globalClock.getTime() + 1\u000a        \u000a        if stoppedTalking and globalClock.getTime() >= stopTime:\u000a            b.stop()\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        \u000a        \u000a        # *text* updates\u000a        if t >= 1 and text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            text.tStart = t  # underestimates by a little under one frame\u000a            text.frameNStart = frameN  # exact frame index\u000a            text.setAutoDraw(True)\u000a        if text.status == STARTED and t >= (1 + (10-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            text.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    \u000a    \u000a    #------Prepare to start Routine "choose_source"-------\u000a    t = 0\u000a    choose_sourceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # setup some python lists for storing info about the mouse\u000a    if(pitch_lower_done and pitch_higher_done):\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status"):\u000a                thisComponent.status = FINISHED\u000a            continueRoutine = False\u000a    # keep track of which components have finished\u000a    choose_sourceComponents = []\u000a    choose_sourceComponents.append(question)\u000a    choose_sourceComponents.append(self_box)\u000a    choose_sourceComponents.append(self_label)\u000a    choose_sourceComponents.append(other_box)\u000a    choose_sourceComponents.append(other_label)\u000a    choose_sourceComponents.append(mouse)\u000a    for thisComponent in choose_sourceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choose_source"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choose_sourceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *question* updates\u000a        if t >= 0.0 and question.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            question.tStart = t  # underestimates by a little under one frame\u000a            question.frameNStart = frameN  # exact frame index\u000a            question.setAutoDraw(True)\u000a        \u000a        # *self_box* updates\u000a        if t >= 0.0 and self_box.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            self_box.tStart = t  # underestimates by a little under one frame\u000a            self_box.frameNStart = frameN  # exact frame index\u000a            self_box.setAutoDraw(True)\u000a        \u000a        # *self_label* updates\u000a        if t >= 0.0 and self_label.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            self_label.tStart = t  # underestimates by a little under one frame\u000a            self_label.frameNStart = frameN  # exact frame index\u000a            self_label.setAutoDraw(True)\u000a        \u000a        # *other_box* updates\u000a        if t >= 0.0 and other_box.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            other_box.tStart = t  # underestimates by a little under one frame\u000a            other_box.frameNStart = frameN  # exact frame index\u000a            other_box.setAutoDraw(True)\u000a        \u000a        # *other_label* updates\u000a        if t >= 0.0 and other_label.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            other_label.tStart = t  # underestimates by a little under one frame\u000a            other_label.frameNStart = frameN  # exact frame index\u000a            other_label.setAutoDraw(True)\u000a        if mouse.isPressedIn(self_box, buttons=[0]):\u000a            trials.addData('choice', 'self')\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        elif mouse.isPressedIn(other_box, buttons=[0]):\u000a            trials.addData('choice','other')\u000a            choice_stats[trialtype] += 1\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        \u000a        if self_box.contains(mouse):\u000a            self_box.fillColor = SELF_BOX_BORDER_COLOR\u000a        else:\u000a            self_box.fillColor = SELF_BOX_FILL_COLOR\u000a        \u000a        if other_box.contains(mouse):\u000a            other_box.fillColor = OTHER_BOX_BORDER_COLOR\u000a        else:\u000a            other_box.fillColor = OTHER_BOX_FILL_COLOR\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choose_sourceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choose_source"-------\u000a    for thisComponent in choose_sourceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for trials (TrialHandler)\u000a    # check if next trial is a new block. \u000a    # if it's a new block, check if current block had 3 "other" votes for either pitch type\u000a    # if so,  1) record appropriate block number for that type\u000a    #  2) set "done" flag to true for that type\u000a    # if both pitch types are done, end the trials loop\u000a    next_block = trials.getFutureTrial(1).block\u000a    if(block != next_block):\u000a        if(choice_stats['pitch higher'] == 3):\u000a            expInfo['pitch higher result block'] = block\u000a            expInfo['pitch higher result amount'] = amount\u000a            choice_stats['pitch higher block'] = block\u000a            choice_stats['pitch higher amount'] = amount\u000a            pitch_higher_done = True\u000a        if(choice_stats['pitch lower'] == 3):\u000a            expInfo['pitch lower result block'] = block\u000a            expInfo['pitch lower result amount'] = -1 * amount\u000a            choice_stats['pitch lower block'] = block\u000a            choice_stats['pitch lower amount'] = amount\u000a            pitch_lower_done = True\u000a        if(pitch_lower_done and pitch_higher_done):\u000a            trials.finished = True\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        choice_stats['pitch higher'] = 0\u000a        choice_stats['pitch lower'] = 0\u000a    \u000a    \u000a    # the Routine "choose_source" was not non-slip safe, so reset the non-slip timer\u000a    routineTimer.reset()\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'trials'\u000a\u000a\u000a#------Prepare to start Routine "thankyou"-------\u000at = 0\u000athankyouClock.reset()  # clock \u000aframeN = -1\u000aroutineTimer.add(5.000000)\u000a# update component parameters for each repeat\u000a\u000a\u000a\u000a# keep track of which components have finished\u000athankyouComponents = []\u000athankyouComponents.append(text_3)\u000afor thisComponent in thankyouComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "thankyou"-------\u000acontinueRoutine = True\u000awhile continueRoutine and routineTimer.getTime() > 0:\u000a    # get current time\u000a    t = thankyouClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *text_3* updates\u000a    if t >= 0.0 and text_3.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        text_3.tStart = t  # underestimates by a little under one frame\u000a        text_3.frameNStart = frameN  # exact frame index\u000a        text_3.setAutoDraw(True)\u000a    if text_3.status == STARTED and t >= (0.0 + (5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a        text_3.setAutoDraw(False)\u000a    \u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in thankyouComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "thankyou"-------\u000afor thisComponent in thankyouComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000aresults = '\u005cn\u005cr'\u000a\u000aresults += 'Pitch (higher) block = ' + str(choice_stats['pitch higher block']) + '\u005cn\u005cr'\u000aresults += 'Pitch (lower) block = ' + str(choice_stats['pitch lower block']) + '\u005cn\u005cr'\u000aresults += '\u005cn\u005cr'\u000aresults += 'Pitch (higher) amount = ' + str(choice_stats['pitch higher amount']) + '\u005cn\u005cr'\u000aresults += 'Pitch (lower) amount = ' + str(choice_stats['pitch lower amount']) + '\u005cn\u005cr'\u000a\u000a\u000a\u000a\u000a#------Prepare to start Routine "display_results"-------\u000at = 0\u000adisplay_resultsClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000aresults_text.setText(results)\u000akey_resp_2 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_2.status = NOT_STARTED\u000a# keep track of which components have finished\u000adisplay_resultsComponents = []\u000adisplay_resultsComponents.append(results_text)\u000adisplay_resultsComponents.append(key_resp_2)\u000afor thisComponent in display_resultsComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "display_results"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = display_resultsClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *results_text* updates\u000a    if t >= 0.0 and results_text.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        results_text.tStart = t  # underestimates by a little under one frame\u000a        results_text.frameNStart = frameN  # exact frame index\u000a        results_text.setAutoDraw(True)\u000a    \u000a    # *key_resp_2* updates\u000a    if t >= 0.0 and key_resp_2.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_2.tStart = t  # underestimates by a little under one frame\u000a        key_resp_2.frameNStart = frameN  # exact frame index\u000a        key_resp_2.status = STARTED\u000a        # keyboard checking is just starting\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_2.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['esc'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in display_resultsComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "display_results"-------\u000afor thisComponent in display_resultsComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# the Routine "display_results" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000aserv.stop()\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p146
sS'thisTrial'
p147
g1
(cpsychopy.data
TrialType
p148
c__builtin__
dict
p149
(dp150
g48
g71
sg47
g31
sg46
g136
sg49
g75
sg50
g27
stRp151
sS'_exp'
p152
I170486288
sg10
S'trials'
p153
sg6
S'/Volumes/Macintosh HD/Users/poppe076/Desktop/source_monitoring_task/source_monitoring.py'
p154
sS'thisRepN'
p155
I0
sg15
I01
sg16
g17
sS'data'
p156
g1
(cpsychopy.data
DataHandler
p157
g149
(dp158
S'ran'
p159
cnumpy.ma.core
_mareconstruct
p160
(cnumpy.ma.core
MaskedArray
p161
cnumpy
ndarray
p162
(I0
tp163
S'b'
tRp164
(I1
(I90
I1
tg20
(S'f4'
I0
I1
tRp165
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p166
g160
(g161
g162
g163
S'b'
tRp167
(I1
(I90
I1
tg165
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
Ntbsg14
cnumpy.core.multiarray
_reconstruct
p168
(g162
(I0
tS'b'
tRp169
(I1
(I90
I1
tg20
(S'O4'
I0
I1
tRp170
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp171
g64
ag64
ag64
ag64
ag64
ag64
ag64
ag64
ag64
aS'--'
p172
aS'--'
p173
aS'--'
p174
aS'--'
p175
aS'--'
p176
aS'--'
p177
aS'--'
p178
aS'--'
p179
aS'--'
p180
aS'--'
p181
aS'--'
p182
aS'--'
p183
aS'--'
p184
aS'--'
p185
aS'--'
p186
aS'--'
p187
aS'--'
p188
aS'--'
p189
aS'--'
p190
aS'--'
p191
aS'--'
p192
aS'--'
p193
aS'--'
p194
aS'--'
p195
aS'--'
p196
aS'--'
p197
aS'--'
p198
aS'--'
p199
aS'--'
p200
aS'--'
p201
aS'--'
p202
aS'--'
p203
aS'--'
p204
aS'--'
p205
aS'--'
p206
aS'--'
p207
aS'--'
p208
aS'--'
p209
aS'--'
p210
aS'--'
p211
aS'--'
p212
aS'--'
p213
aS'--'
p214
aS'--'
p215
aS'--'
p216
aS'--'
p217
aS'--'
p218
aS'--'
p219
aS'--'
p220
aS'--'
p221
aS'--'
p222
aS'--'
p223
aS'--'
p224
aS'--'
p225
aS'--'
p226
aS'--'
p227
aS'--'
p228
aS'--'
p229
aS'--'
p230
aS'--'
p231
aS'--'
p232
aS'--'
p233
aS'--'
p234
aS'--'
p235
aS'--'
p236
aS'--'
p237
aS'--'
p238
aS'--'
p239
aS'--'
p240
aS'--'
p241
aS'--'
p242
aS'--'
p243
aS'--'
p244
aS'--'
p245
aS'--'
p246
aS'--'
p247
aS'--'
p248
aS'--'
p249
aS'--'
p250
aS'--'
p251
aS'--'
p252
atbstRp253
(dp254
S'isNumeric'
p255
(dp256
g159
I01
sg166
I01
sg14
I00
ssg153
g143
sS'dataTypes'
p257
(lp258
g159
ag166
ag14
asS'dataShape'
p259
(lp260
I90
aI1
asbsS'method'
p261
S'sequential'
p262
sS'sequenceIndices'
p263
g168
(g162
(I0
tS'b'
tRp264
(I1
(I90
I1
tg55
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00'
tbsS'finished'
p265
I01
sS'nReps'
p266
I1
sS'nRemaining'
p267
I80
sS'trialList'
p268
(lp269
g1
(g148
g149
(dp270
g48
g59
sg47
g61
sg46
g57
sg49
g63
sg50
g65
stRp271
ag1
(g148
g149
(dp272
g48
g71
sg47
g73
sg46
g69
sg49
g75
sg50
g76
stRp273
ag1
(g148
g149
(dp274
g48
g82
sg47
g84
sg46
g80
sg49
g86
sg50
g87
stRp275
ag1
(g148
g149
(dp276
g48
g59
sg47
g94
sg46
g91
sg49
g63
sg50
g96
stRp277
ag1
(g148
g149
(dp278
g48
g82
sg47
g103
sg46
g100
sg49
g86
sg50
g105
stRp279
ag1
(g148
g149
(dp280
g48
g71
sg47
g112
sg46
g109
sg49
g75
sg50
g114
stRp281
ag1
(g148
g149
(dp282
g48
g59
sg47
g121
sg46
g118
sg49
g63
sg50
g123
stRp283
ag1
(g148
g149
(dp284
g48
g82
sg47
g130
sg46
g127
sg49
g86
sg50
g132
stRp285
ag151
ag1
(g148
g149
(dp286
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp287
sg46
S'word2.26'
p288
sg49
g63
sg50
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp289
stRp290
ag1
(g148
g149
(dp291
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp292
sg46
S'word1.8'
p293
sg49
g86
sg50
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp294
stRp295
ag1
(g148
g149
(dp296
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp297
sg46
S'word3.17'
p298
sg49
g75
sg50
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp299
stRp300
ag1
(g148
g149
(dp301
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp302
sg46
S'word1.20'
p303
sg49
g86
sg50
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp304
stRp305
ag1
(g148
g149
(dp306
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp307
sg46
S'word2.19'
p308
sg49
g63
sg50
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp309
stRp310
ag1
(g148
g149
(dp311
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp312
sg46
S'word3.5'
p313
sg49
g75
sg50
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp314
stRp315
ag1
(g148
g149
(dp316
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp317
sg46
S'word2.27'
p318
sg49
g63
sg50
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp319
stRp320
ag1
(g148
g149
(dp321
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp322
sg46
S'word3.6'
p323
sg49
g75
sg50
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp324
stRp325
ag1
(g148
g149
(dp326
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp327
sg46
S'word1.29'
p328
sg49
g86
sg50
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp329
stRp330
ag1
(g148
g149
(dp331
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp332
sg46
S'word1.2'
p333
sg49
g86
sg50
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp334
stRp335
ag1
(g148
g149
(dp336
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp337
sg46
S'word3.4'
p338
sg49
g75
sg50
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp339
stRp340
ag1
(g148
g149
(dp341
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp342
sg46
S'word2.9'
p343
sg49
g63
sg50
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp344
stRp345
ag1
(g148
g149
(dp346
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp347
sg46
S'word1.3'
p348
sg49
g86
sg50
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp349
stRp350
ag1
(g148
g149
(dp351
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp352
sg46
S'word2.21'
p353
sg49
g63
sg50
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp354
stRp355
ag1
(g148
g149
(dp356
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp357
sg46
S'word3.27'
p358
sg49
g75
sg50
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp359
stRp360
ag1
(g148
g149
(dp361
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp362
sg46
S'word1.4'
p363
sg49
g86
sg50
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp364
stRp365
ag1
(g148
g149
(dp366
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp367
sg46
S'word2.2'
p368
sg49
g63
sg50
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp369
stRp370
ag1
(g148
g149
(dp371
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp372
sg46
S'word3.7'
p373
sg49
g75
sg50
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp374
stRp375
ag1
(g148
g149
(dp376
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp377
sg46
S'word2.14'
p378
sg49
g63
sg50
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp379
stRp380
ag1
(g148
g149
(dp381
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp382
sg46
S'word3.20'
p383
sg49
g75
sg50
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp384
stRp385
ag1
(g148
g149
(dp386
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp387
sg46
S'word1.6'
p388
sg49
g86
sg50
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp389
stRp390
ag1
(g148
g149
(dp391
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp392
sg46
S'word2.13'
p393
sg49
g63
sg50
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp394
stRp395
ag1
(g148
g149
(dp396
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp397
sg46
S'word3.23'
p398
sg49
g75
sg50
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp399
stRp400
ag1
(g148
g149
(dp401
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp402
sg46
S'word1.1'
p403
sg49
g86
sg50
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp404
stRp405
ag1
(g148
g149
(dp406
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp407
sg46
S'word3.18'
p408
sg49
g75
sg50
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp409
stRp410
ag1
(g148
g149
(dp411
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp412
sg46
S'word1.15'
p413
sg49
g86
sg50
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp414
stRp415
ag1
(g148
g149
(dp416
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp417
sg46
S'word2.7'
p418
sg49
g63
sg50
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp419
stRp420
ag1
(g148
g149
(dp421
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp422
sg46
S'word2.25'
p423
sg49
g63
sg50
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp424
stRp425
ag1
(g148
g149
(dp426
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp427
sg46
S'word1.26'
p428
sg49
g86
sg50
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp429
stRp430
ag1
(g148
g149
(dp431
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp432
sg46
S'word3.19'
p433
sg49
g75
sg50
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp434
stRp435
ag1
(g148
g149
(dp436
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp437
sg46
S'word1.13'
p438
sg49
g86
sg50
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp439
stRp440
ag1
(g148
g149
(dp441
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp442
sg46
S'word2.5'
p443
sg49
g63
sg50
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp444
stRp445
ag1
(g148
g149
(dp446
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp447
sg46
S'word3.3'
p448
sg49
g75
sg50
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp449
stRp450
ag1
(g148
g149
(dp451
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp452
sg46
S'word2.10'
p453
sg49
g63
sg50
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp454
stRp455
ag1
(g148
g149
(dp456
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp457
sg46
S'word3.16'
p458
sg49
g75
sg50
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp459
stRp460
ag1
(g148
g149
(dp461
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp462
sg46
S'word1.11'
p463
sg49
g86
sg50
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp464
stRp465
ag1
(g148
g149
(dp466
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp467
sg46
S'word1.21'
p468
sg49
g86
sg50
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp469
stRp470
ag1
(g148
g149
(dp471
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp472
sg46
S'word2.15'
p473
sg49
g63
sg50
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp474
stRp475
ag1
(g148
g149
(dp476
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp477
sg46
S'word3.22'
p478
sg49
g75
sg50
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp479
stRp480
ag1
(g148
g149
(dp481
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp482
sg46
S'word1.24'
p483
sg49
g86
sg50
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp484
stRp485
ag1
(g148
g149
(dp486
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp487
sg46
S'word2.24'
p488
sg49
g63
sg50
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp489
stRp490
ag1
(g148
g149
(dp491
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp492
sg46
S'word3.10'
p493
sg49
g75
sg50
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp494
stRp495
ag1
(g148
g149
(dp496
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp497
sg46
S'word3.30'
p498
sg49
g75
sg50
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp499
stRp500
ag1
(g148
g149
(dp501
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp502
sg46
S'word1.25'
p503
sg49
g86
sg50
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp504
stRp505
ag1
(g148
g149
(dp506
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp507
sg46
S'word2.6'
p508
sg49
g63
sg50
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp509
stRp510
ag1
(g148
g149
(dp511
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp512
sg46
S'word1.27'
p513
sg49
g86
sg50
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp514
stRp515
ag1
(g148
g149
(dp516
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp517
sg46
S'word2.22'
p518
sg49
g63
sg50
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp519
stRp520
ag1
(g148
g149
(dp521
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp522
sg46
S'word3.12'
p523
sg49
g75
sg50
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp524
stRp525
ag1
(g148
g149
(dp526
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp527
sg46
S'word1.18'
p528
sg49
g86
sg50
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp529
stRp530
ag1
(g148
g149
(dp531
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp532
sg46
S'word2.16'
p533
sg49
g63
sg50
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp534
stRp535
ag1
(g148
g149
(dp536
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp537
sg46
S'word3.1'
p538
sg49
g75
sg50
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp539
stRp540
ag1
(g148
g149
(dp541
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp542
sg46
S'word2.4'
p543
sg49
g63
sg50
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp544
stRp545
ag1
(g148
g149
(dp546
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp547
sg46
S'word3.21'
p548
sg49
g75
sg50
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp549
stRp550
ag1
(g148
g149
(dp551
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp552
sg46
S'word1.5'
p553
sg49
g86
sg50
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp554
stRp555
ag1
(g148
g149
(dp556
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp557
sg46
S'word3.9'
p558
sg49
g75
sg50
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp559
stRp560
ag1
(g148
g149
(dp561
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp562
sg46
S'word1.22'
p563
sg49
g86
sg50
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp564
stRp565
ag1
(g148
g149
(dp566
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp567
sg46
S'word2.8'
p568
sg49
g63
sg50
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp569
stRp570
ag1
(g148
g149
(dp571
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp572
sg46
S'word2.3'
p573
sg49
g63
sg50
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp574
stRp575
ag1
(g148
g149
(dp576
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp577
sg46
S'word3.13'
p578
sg49
g75
sg50
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp579
stRp580
ag1
(g148
g149
(dp581
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp582
sg46
S'word1.7'
p583
sg49
g86
sg50
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp584
stRp585
ag1
(g148
g149
(dp586
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp587
sg46
S'word3.2'
p588
sg49
g75
sg50
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp589
stRp590
ag1
(g148
g149
(dp591
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp592
sg46
S'word1.19'
p593
sg49
g86
sg50
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp594
stRp595
ag1
(g148
g149
(dp596
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp597
sg46
S'word2.12'
p598
sg49
g63
sg50
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp599
stRp600
ag1
(g148
g149
(dp601
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp602
sg46
S'word3.11'
p603
sg49
g75
sg50
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp604
stRp605
ag1
(g148
g149
(dp606
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp607
sg46
S'word2.20'
p608
sg49
g63
sg50
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp609
stRp610
ag1
(g148
g149
(dp611
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp612
sg46
S'word1.10'
p613
sg49
g86
sg50
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp614
stRp615
ag1
(g148
g149
(dp616
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp617
sg46
S'word1.17'
p618
sg49
g86
sg50
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp619
stRp620
ag1
(g148
g149
(dp621
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp622
sg46
S'word3.14'
p623
sg49
g75
sg50
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp624
stRp625
ag1
(g148
g149
(dp626
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp627
sg46
S'word2.30'
p628
sg49
g63
sg50
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp629
stRp630
ag1
(g148
g149
(dp631
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp632
sg46
S'word3.26'
p633
sg49
g75
sg50
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp634
stRp635
ag1
(g148
g149
(dp636
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp637
sg46
S'word2.23'
p638
sg49
g63
sg50
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp639
stRp640
ag1
(g148
g149
(dp641
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp642
sg46
S'word1.16'
p643
sg49
g86
sg50
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp644
stRp645
ag1
(g148
g149
(dp646
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp647
sg46
S'word2.18'
p648
sg49
g63
sg50
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp649
stRp650
ag1
(g148
g149
(dp651
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp652
sg46
S'word1.28'
p653
sg49
g86
sg50
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp654
stRp655
ag1
(g148
g149
(dp656
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp657
sg46
S'word3.28'
p658
sg49
g75
sg50
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp659
stRp660
ag1
(g148
g149
(dp661
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp662
sg46
S'word3.24'
p663
sg49
g75
sg50
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp664
stRp665
ag1
(g148
g149
(dp666
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp667
sg46
S'word2.17'
p668
sg49
g63
sg50
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp669
stRp670
ag1
(g148
g149
(dp671
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp672
sg46
S'word1.9'
p673
sg49
g86
sg50
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp674
stRp675
ag1
(g148
g149
(dp676
g48
g71
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp677
sg46
S'word3.29'
p678
sg49
g75
sg50
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp679
stRp680
ag1
(g148
g149
(dp681
g48
g82
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp682
sg46
S'word1.23'
p683
sg49
g86
sg50
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp684
stRp685
ag1
(g148
g149
(dp686
g48
g59
sg47
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp687
sg46
S'word2.29'
p688
sg49
g63
sg50
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp689
stRp690
asS'seed'
p691
NsS'thisIndex'
p692
g135
sS'thisN'
p693
I9
sS'thisTrialN'
p694
I9
sS'nTotal'
p695
I90
sS'_warnUseOfNext'
p696
I01
sbasS'savePickle'
p697
I00
sb.