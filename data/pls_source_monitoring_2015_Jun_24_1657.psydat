ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
V/Volumes/Macintosh HD/Users/poppe076/Desktop/source_monitoring_task/data/pls_source_monitoring_2015_Jun_24_1657
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'source_monitoring'
p11
sS'dataNames'
p12
(lp13
S'choice'
p14
asS'autoLog'
p15
I01
sS'extraInfo'
p16
(dp17
S'pitch lower result amount'
p18
cnumpy.core.multiarray
scalar
p19
(cnumpy
dtype
p20
(S'f8'
I0
I1
tRp21
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp22
sS'participant'
p23
Vpls
p24
sS'pitch lower result block'
p25
g19
(g20
(S'i8'
I0
I1
tRp26
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp27
sS'frameRate'
p28
g19
(g21
S'1\x94\xdfV\x02\x98N@'
tRp29
sS'pitch higher result amount'
p30
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp31
sS'expName'
p32
g11
sS'date'
p33
V2015_Jun_24_1657
p34
sS'listMethod'
p35
Vrandom
p36
sS'pitch higher result block'
p37
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp38
ssS'loopsUnfinished'
p39
(lp40
sS'saveWideText'
p41
I01
sS'thisEntry'
p42
(dp43
sS'version'
p44
S''
sS'_paramNamesSoFar'
p45
(lp46
S'word'
p47
aS'amount'
p48
aS'list'
p49
aS'trialtype'
p50
aS'block'
p51
asS'entries'
p52
(lp53
(dp54
S'trials.thisIndex'
p55
g19
(g20
(S'i4'
I0
I1
tRp56
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x00\x00\x00\x00'
tRp57
sg47
S'word3.16'
p58
sS'trials.thisRepN'
p59
I0
sg23
g24
sg49
S'list3'
p60
sg28
g29
sS'trials.thisN'
p61
I0
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp62
sg32
g11
sS'trials.thisTrialN'
p63
I0
sg50
S'pitch higher'
p64
sg33
g34
sg35
g36
sg14
S'other'
p65
sg51
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp66
sa(dp67
S'trials.thisIndex'
p68
g19
(g56
S'\x01\x00\x00\x00'
tRp69
sg47
S'word1.20'
p70
sS'trials.thisRepN'
p71
I0
sg23
g24
sg49
S'list1'
p72
sg28
g29
sS'trials.thisN'
p73
I1
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp74
sg32
g11
sS'trials.thisTrialN'
p75
I1
sg50
S'pitch lower'
p76
sg33
g34
sg35
g36
sg14
S'self'
p77
sg51
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp78
sa(dp79
S'trials.thisIndex'
p80
g19
(g56
S'\x02\x00\x00\x00'
tRp81
sg47
S'word2.3'
p82
sS'trials.thisRepN'
p83
I0
sg23
g24
sg49
S'list2'
p84
sg28
g29
sS'trials.thisN'
p85
I2
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp86
sg32
g11
sS'trials.thisTrialN'
p87
I2
sg50
S'unmodified'
p88
sg33
g34
sg35
g36
sg14
g77
sg51
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp89
sa(dp90
S'trials.thisIndex'
p91
g19
(g56
S'\x03\x00\x00\x00'
tRp92
sg47
S'word3.28'
p93
sS'trials.thisRepN'
p94
I0
sg23
g24
sg49
g60
sg28
g29
sS'trials.thisN'
p95
I3
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp96
sg32
g11
sS'trials.thisTrialN'
p97
I3
sg50
g64
sg33
g34
sg35
g36
sg14
g65
sg51
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp98
sa(dp99
S'trials.thisIndex'
p100
g19
(g56
S'\x04\x00\x00\x00'
tRp101
sg47
S'word1.9'
p102
sS'trials.thisRepN'
p103
I0
sg23
g24
sg49
g72
sg28
g29
sS'trials.thisN'
p104
I4
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp105
sg32
g11
sS'trials.thisTrialN'
p106
I4
sg50
g76
sg33
g34
sg35
g36
sg14
g77
sg51
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp107
sa(dp108
S'trials.thisIndex'
p109
g19
(g56
S'\x05\x00\x00\x00'
tRp110
sg47
S'word2.6'
p111
sS'trials.thisRepN'
p112
I0
sg23
g24
sg49
g84
sg28
g29
sS'trials.thisN'
p113
I5
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp114
sg32
g11
sS'trials.thisTrialN'
p115
I5
sg50
g88
sg33
g34
sg35
g36
sg14
g77
sg51
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp116
sa(dp117
S'trials.thisIndex'
p118
g19
(g56
S'\x06\x00\x00\x00'
tRp119
sg47
S'word3.7'
p120
sS'trials.thisRepN'
p121
I0
sg23
g24
sg49
g60
sg28
g29
sS'trials.thisN'
p122
I6
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0?'
tRp123
sg32
g11
sS'trials.thisTrialN'
p124
I6
sg50
g64
sg33
g34
sg35
g36
sg14
g65
sg51
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp125
sa(dp126
S'trials.thisIndex'
p127
g19
(g56
S'\x07\x00\x00\x00'
tRp128
sg47
S'word1.24'
p129
sS'trials.thisRepN'
p130
I0
sg23
g24
sg49
g72
sg28
g29
sS'trials.thisN'
p131
I7
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xe0\xbf'
tRp132
sg32
g11
sS'trials.thisTrialN'
p133
I7
sg50
g76
sg33
g34
sg35
g36
sg14
g77
sg51
g19
(g26
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp134
sa(dp135
S'trials.thisIndex'
p136
g19
(g56
S'\x08\x00\x00\x00'
tRp137
sg47
S'word2.11'
p138
sS'trials.thisRepN'
p139
I0
sg49
g84
sg28
g29
sS'trials.thisN'
p140
I8
sg33
g34
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp141
sg32
g11
sS'trials.thisTrialN'
p142
I8
sg50
g88
sg35
g36
sg30
g31
sg23
g24
sg14
g77
sg37
g38
sg51
g38
sa(dp143
S'trials.thisIndex'
p144
g19
(g56
S'\t\x00\x00\x00'
tRp145
sg47
S'word2.22'
p146
sS'trials.thisRepN'
p147
I0
sg49
g84
sg28
g29
sS'trials.thisN'
p148
I9
sg33
g34
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp149
sg32
g11
sS'trials.thisTrialN'
p150
I9
sg50
g88
sg35
g36
sg30
g31
sg23
g24
sg14
g77
sg37
g38
sg51
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp151
sa(dp152
S'trials.thisIndex'
p153
g19
(g56
S'\n\x00\x00\x00'
tRp154
sg47
S'word1.21'
p155
sS'trials.thisRepN'
p156
I0
sg49
g72
sg28
g29
sS'trials.thisN'
p157
I10
sg33
g34
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp158
sg32
g11
sS'trials.thisTrialN'
p159
I10
sg50
g76
sg35
g36
sg30
g31
sg23
g24
sg14
g65
sg37
g38
sg51
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp160
sa(dp161
S'trials.thisIndex'
p162
g19
(g56
S'\x0b\x00\x00\x00'
tRp163
sg47
S'word3.30'
p164
sS'trials.thisRepN'
p165
I0
sg49
g60
sg28
g29
sS'trials.thisN'
p166
I11
sg33
g34
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp167
sg32
g11
sS'trials.thisTrialN'
p168
I11
sg50
g64
sg35
g36
sg30
g31
sg23
g24
sg14
g77
sg37
g38
sg51
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp169
sa(dp170
S'trials.thisIndex'
p171
g19
(g56
S'\x0c\x00\x00\x00'
tRp172
sg47
S'word1.3'
p173
sS'trials.thisRepN'
p174
I0
sg49
g72
sg28
g29
sS'trials.thisN'
p175
I12
sg33
g34
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp176
sg32
g11
sS'trials.thisTrialN'
p177
I12
sg50
g76
sg35
g36
sg30
g31
sg23
g24
sg14
g65
sg37
g38
sg51
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp178
sa(dp179
S'trials.thisIndex'
p180
g19
(g56
S'\r\x00\x00\x00'
tRp181
sg47
S'word3.22'
p182
sS'trials.thisRepN'
p183
I0
sg49
g60
sg28
g29
sS'trials.thisN'
p184
I13
sg33
g34
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp185
sg32
g11
sS'trials.thisTrialN'
p186
I13
sg50
g64
sg35
g36
sg30
g31
sg23
g24
sg14
g77
sg37
g38
sg51
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp187
sa(dp188
S'trials.thisIndex'
p189
g19
(g56
S'\x0e\x00\x00\x00'
tRp190
sg47
S'word2.24'
p191
sS'trials.thisRepN'
p192
I0
sg49
g84
sg28
g29
sS'trials.thisN'
p193
I14
sg33
g34
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp194
sg32
g11
sS'trials.thisTrialN'
p195
I14
sg50
g88
sg35
g36
sg30
g31
sg23
g24
sg14
g77
sg37
g38
sg51
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp196
sa(dp197
S'trials.thisIndex'
p198
g19
(g56
S'\x0f\x00\x00\x00'
tRp199
sg47
S'word1.18'
p200
sS'trials.thisRepN'
p201
I0
sg49
g72
sg28
g29
sS'trials.thisN'
p202
I15
sg33
g34
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
tRp203
sg32
g11
sS'trials.thisTrialN'
p204
I15
sg50
g76
sg35
g36
sg30
g31
sg23
g24
sg14
g65
sg37
g38
sg51
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp205
sa(dp206
S'trials.thisIndex'
p207
g19
(g56
S'\x10\x00\x00\x00'
tRp208
sg47
S'word2.26'
p209
sS'trials.thisRepN'
p210
I0
sg49
g84
sg28
g29
sS'trials.thisN'
p211
I16
sg33
g34
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp212
sg32
g11
sS'trials.thisTrialN'
p213
I16
sg50
g88
sg35
g36
sg30
g31
sg23
g24
sg14
g77
sg37
g38
sg51
g19
(g26
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp214
sa(dp215
S'trials.thisIndex'
p216
g19
(g56
S'\x11\x00\x00\x00'
tRp217
sg47
S'word3.13'
p218
sg18
g22
sS'trials.thisRepN'
p219
I0
sg25
g27
sg49
g60
sg28
g29
sS'trials.thisN'
p220
I17
sg33
g34
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf0?'
tRp221
sg32
g11
sS'trials.thisTrialN'
p222
I17
sg50
g64
sg35
g36
sg30
g31
sg23
g24
sg14
g77
sg37
g38
sg51
g27
sasS'loops'
p223
(lp224
g1
(cpsychopy.data
TrialHandler
p225
g3
NtRp226
(dp227
S'origin'
p228
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things like STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000a\u000a# Ensure that relative paths start from the same directory as this script\u000a_thisDir = os.path.dirname(os.path.abspath(__file__))\u000aos.chdir(_thisDir)\u000a\u000a# Store info about the experiment session\u000aexpName = 'source_monitoring'  # from the Builder filename that created this script\u000aexpInfo = {}\u000a\u000amyDlg = gui.Dlg(title=expName, size=gui.wx.Size(-1,-75))\u000amyDlg.addField(u'participant: ', u'')\u000amyDlg.addField('word lists: ', choices=['random','set your own']) \u000amyDlg.show()\u000aif myDlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['participant'] = myDlg.data[0]\u000aexpInfo['listMethod'] = myDlg.data[1]\u000aprint expInfo['listMethod']\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a\u000aif expInfo['listMethod']=='set your own':\u000a    myDlg2 = gui.Dlg(title='Set Word Lists')\u000a    conditions = ['unmodified', 'pitch - higher', 'pitch - lower']\u000a    for cNum in range(len(conditions)):\u000a        myDlg2.addField(conditions[cNum], choices=[1,2,3], initial=cNum+1)\u000a    myDlg2.show()\u000a    if myDlg2.OK == False: core.quit()  # user pressed cancel\u000a    expInfo['listOrder'] = myDlg2.data\u000a    \u000afrom psychopy import visual\u000a\u000a\u000a# Data file name stem = absolute path + name; later add .psyexp, .csv, .log, etc\u000afilename = _thisDir + os.sep + 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# Setup the Window\u000awin = visual.Window(size=(1440, 900), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color=[-1,-1,-1], colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a# Initialize components for Routine "initialize_code"\u000ainitialize_codeClock = core.Clock()\u000afrom psychopy import gui\u000afrom pyo import *\u000aimport math, sys, csv, random\u000afrom collections import OrderedDict\u000aserv = Server().boot()\u000a\u000a## SETTINGS ##\u000a\u000a# This is the amount to change the pitch on each block of trials (both higher and lower)\u000aPITCH_DELTA = 0.5\u000a\u000a# This is the word list file\u000aWORD_LIST_FILE = "wordlist.csv"\u000a\u000a# Colors of the choice buttons\u000aSELF_BOX_FILL_COLOR = '#A6A9FF'\u000aSELF_BOX_BORDER_COLOR = '#3E45FA'\u000aOTHER_BOX_FILL_COLOR = '#FFFCA6'\u000aOTHER_BOX_BORDER_COLOR = '#FAF33E'\u000a\u000a## END SETTINGS ##\u000a\u000a\u000a# this function ends a routine immediately\u000adef endRoutine():\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "status"):\u000a            thisComponent.status = FINISHED\u000a        continueRoutine = False\u000a\u000a\u000a# initialize this variable - it keeps track of whether \u000a# the subject is finished speaking during a time stretch trial\u000afinished = True\u000a\u000a##########################################################\u000a### read in the original word list file and save word list file for this subject\u000a##########################################################\u000a# container array for file contents\u000aorig_words = []\u000a# read csv file with the original word lists (in same directory as this experiment script)\u000awith open(WORD_LIST_FILE, 'rU') as csvfile:\u000a    test = csv.reader(csvfile)\u000a    for i in test:\u000a        orig_words.append(i)\u000a\u000a# depending on experiementer's selection at run time, either randomize word lists or\u000a# use the experimenter's order\u000adef fixList(x):\u000a    return int(x)-1\u000a\u000aif expInfo['listMethod']=='set your own':\u000a    assignment_order = map(fixList, expInfo['listOrder'])\u000aelse:\u000a    assignment_order = random.sample([0,1,2], 3)\u000a\u000a# initialize word containers for the trial types\u000aunmodified_words = []\u000apitch_higher_words = []\u000apitch_lower_words = []\u000a\u000a# assign words to those containers\u000afor row in orig_words:\u000a    unmodified_words.append(row[assignment_order[0]])\u000a    pitch_higher_words.append(row[assignment_order[1]])\u000a    pitch_lower_words.append(row[assignment_order[2]])\u000a\u000a# save word lists for each trial type\u000aunmodified_word_list = unmodified_words.pop(0)\u000apitch_higher_word_list = pitch_higher_words.pop(0)\u000apitch_lower_word_list = pitch_lower_words.pop(0)\u000a\u000a# randomize words in their lists\u000arandom.shuffle(unmodified_words)\u000arandom.shuffle(pitch_higher_words)\u000arandom.shuffle(pitch_lower_words)\u000a\u000a# this will be the name of the wordlist csv file for this subject\u000awordlist_filename = filename+'_wordlist.csv'\u000aresults_filename = filename+'_summarized_results.csv'\u000a\u000a# build a big array with all the words and also attach trialtype, block, and amount data,\u000a# like this: [block, word, trialtype, amount, list]\u000amaster_list = []\u000a\u000a# start pitch change at 0\u000apitch_amount = 0\u000a\u000a# create blocks of 9 words and add them to master list\u000afor block_num in range(10):\u000a    block_words = []\u000a    pitch_amount = pitch_amount + PITCH_DELTA\u000a    for i in range(3):\u000a        word_index = block_num * 3 + i\u000a        subgroup = []\u000a        subgroup.append([block_num+1, unmodified_words[word_index], 'unmodified', 0, unmodified_word_list])\u000a        subgroup.append([block_num+1, pitch_higher_words[word_index], 'pitch higher', pitch_amount, pitch_higher_word_list])\u000a        subgroup.append([block_num+1, pitch_lower_words[word_index], 'pitch lower', -1 * pitch_amount, pitch_lower_word_list])\u000a        random.shuffle(subgroup)\u000a        block_words += subgroup\u000a    master_list += block_words\u000a\u000a# save csv file to disk\u000awith open(wordlist_filename,'wb') as w:\u000a    writer=csv.writer(w)\u000a    writer.writerow(['block', 'word', 'trialtype', 'amount', 'list'])\u000a    for row in master_list:\u000a        writer.writerow(row)\u000a\u000a# create container for stats\u000a# this keeps track of how many times the subject chooses "other" for\u000a#   each trial type per block\u000a# it gets reset each block\u000achoice_stats = OrderedDict()\u000achoice_stats['unmodified'] = 0 # we shouldn't need this one\u000achoice_stats['pitch higher'] = 0\u000achoice_stats['pitch lower'] = 0\u000achoice_stats['pitch higher block'] = 0\u000achoice_stats['pitch lower block'] = 0\u000achoice_stats['pitch higher amount'] = 0\u000achoice_stats['pitch lower amount'] = 0\u000a\u000a# these hold the "done" status for each pitch trial type\u000apitch_higher_done = False\u000apitch_lower_done = False\u000a\u000a# start with block number = 0\u000athis_block = 0\u000a\u000a# Initialize components for Routine "instructions"\u000ainstructionsClock = core.Clock()\u000atext_4 = visual.TextStim(win=win, ori=0, name='text_4',\u000a    text='Instructions will go here.',    font='Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aserv.start()\u000amic = Input(chnl=0)\u000atext = visual.TextStim(win=win, ori=0, name='text',\u000a    text='default text',    font='Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=-1.0)\u000a\u000a# Initialize components for Routine "choose_source"\u000achoose_sourceClock = core.Clock()\u000aquestion = visual.TextStim(win=win, ori=0, name='question',\u000a    text='Whose voice did you hear?',    font='Arial',\u000a    pos=[0, .5], height=0.1, wrapWidth=2,\u000a    color='white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000aself_box = visual.Rect(win=win, name='self_box',\u000a    width=[0.5, 0.5][0], height=[0.5, 0.5][1],\u000a    ori=0, pos=[-.5, -.5],\u000a    lineWidth=5, lineColor=SELF_BOX_BORDER_COLOR, lineColorSpace='rgb',\u000a    fillColor=SELF_BOX_FILL_COLOR, fillColorSpace='rgb',\u000a    opacity=1,depth=-1.0, \u000ainterpolate=True)\u000aself_label = visual.TextStim(win=win, ori=0, name='self_label',\u000a    text='Mine',    font='Arial',\u000a    pos=[-.5, -.5], height=0.1, wrapWidth=None,\u000a    color='black', colorSpace='rgb', opacity=1,\u000a    depth=-2.0)\u000aother_box = visual.Rect(win=win, name='other_box',\u000a    width=[0.5, 0.5][0], height=[0.5, 0.5][1],\u000a    ori=0, pos=[.5, -.5],\u000a    lineWidth=5, lineColor=OTHER_BOX_BORDER_COLOR, lineColorSpace='rgb',\u000a    fillColor=OTHER_BOX_FILL_COLOR, fillColorSpace='rgb',\u000a    opacity=1,depth=-3.0, \u000ainterpolate=True)\u000aother_label = visual.TextStim(win=win, ori=0, name='other_label',\u000a    text='Other',    font='Arial',\u000a    pos=[.5, -.5], height=0.1, wrapWidth=None,\u000a    color='black', colorSpace='rgb', opacity=1,\u000a    depth=-4.0)\u000amouse = event.Mouse(win=win)\u000ax, y = [None, None]\u000a\u000a\u000a# Initialize components for Routine "thankyou"\u000athankyouClock = core.Clock()\u000atext_3 = visual.TextStim(win=win, ori=0, name='text_3',\u000a    text=u'Thank you for participating!',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a\u000a# Initialize components for Routine "display_results"\u000adisplay_resultsClock = core.Clock()\u000aresults_text = visual.TextStim(win=win, ori=0, name='results_text',\u000a    text='default text',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=2,\u000a    color=u'white', colorSpace='rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "initialize_code"-------\u000at = 0\u000ainitialize_codeClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000a\u000a# keep track of which components have finished\u000ainitialize_codeComponents = []\u000afor thisComponent in initialize_codeComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "initialize_code"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = initialize_codeClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in initialize_codeComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "initialize_code"-------\u000afor thisComponent in initialize_codeComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a\u000a# the Routine "initialize_code" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000a#------Prepare to start Routine "instructions"-------\u000at = 0\u000ainstructionsClock.reset()  # clock \u000aframeN = -1\u000aroutineTimer.add(5.000000)\u000a# update component parameters for each repeat\u000a# keep track of which components have finished\u000ainstructionsComponents = []\u000ainstructionsComponents.append(text_4)\u000afor thisComponent in instructionsComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instructions"-------\u000acontinueRoutine = True\u000awhile continueRoutine and routineTimer.getTime() > 0:\u000a    # get current time\u000a    t = instructionsClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *text_4* updates\u000a    if t >= 0.0 and text_4.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        text_4.tStart = t  # underestimates by a little under one frame\u000a        text_4.frameNStart = frameN  # exact frame index\u000a        text_4.setAutoDraw(True)\u000a    if text_4.status == STARTED and t >= (0.0 + (5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a        text_4.setAutoDraw(False)\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instructionsComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "instructions"-------\u000afor thisComponent in instructionsComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a\u000a# set up handler to look after randomisation of conditions etc\u000atrials = data.TrialHandler(nReps=1, method='sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(wordlist_filename),\u000a    seed=None, name='trials')\u000athisExp.addLoop(trials)  # add the loop to the experiment\u000athisTrial = trials.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisTrial.rgb)\u000aif thisTrial != None:\u000a    for paramName in thisTrial.keys():\u000a        exec(paramName + '= thisTrial.' + paramName)\u000a\u000afor thisTrial in trials:\u000a    currentLoop = trials\u000a    # abbreviate parameter names if possible (e.g. rgb = thisTrial.rgb)\u000a    if thisTrial != None:\u000a        for paramName in thisTrial.keys():\u000a            exec(paramName + '= thisTrial.' + paramName)\u000a    \u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(11.000000)\u000a    # update component parameters for each repeat\u000a    \u000a    b = Harmonizer(mic, transpo=float(amount))\u000a    c = Gate(b, thresh=-90, falltime=0.02, lookahead=20.0).mix(2).out()\u000a    d = Follower2(b)\u000a    talkThresh = .08\u000a    talkStarted = False\u000a    stoppedTalking = False\u000a    stopTime = 100\u000a    \u000a    text.setText(word)\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(text)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        if d.get() > talkThresh:\u000a                talkStarted = True\u000a        \u000a        if talkStarted and not stoppedTalking:\u000a            if d.get() < talkThresh:\u000a                stoppedTalking = True\u000a                stopTime = globalClock.getTime() + 1\u000a        \u000a        if stoppedTalking and globalClock.getTime() >= stopTime:\u000a            b.stop()\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        \u000a        \u000a        # *text* updates\u000a        if t >= 1 and text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            text.tStart = t  # underestimates by a little under one frame\u000a            text.frameNStart = frameN  # exact frame index\u000a            text.setAutoDraw(True)\u000a        if text.status == STARTED and t >= (1 + (10-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            text.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    \u000a    \u000a    #------Prepare to start Routine "choose_source"-------\u000a    t = 0\u000a    choose_sourceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # setup some python lists for storing info about the mouse\u000a    if(pitch_lower_done and pitch_higher_done):\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status"):\u000a                thisComponent.status = FINISHED\u000a            continueRoutine = False\u000a    # keep track of which components have finished\u000a    choose_sourceComponents = []\u000a    choose_sourceComponents.append(question)\u000a    choose_sourceComponents.append(self_box)\u000a    choose_sourceComponents.append(self_label)\u000a    choose_sourceComponents.append(other_box)\u000a    choose_sourceComponents.append(other_label)\u000a    choose_sourceComponents.append(mouse)\u000a    for thisComponent in choose_sourceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choose_source"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choose_sourceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *question* updates\u000a        if t >= 0.0 and question.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            question.tStart = t  # underestimates by a little under one frame\u000a            question.frameNStart = frameN  # exact frame index\u000a            question.setAutoDraw(True)\u000a        \u000a        # *self_box* updates\u000a        if t >= 0.0 and self_box.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            self_box.tStart = t  # underestimates by a little under one frame\u000a            self_box.frameNStart = frameN  # exact frame index\u000a            self_box.setAutoDraw(True)\u000a        \u000a        # *self_label* updates\u000a        if t >= 0.0 and self_label.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            self_label.tStart = t  # underestimates by a little under one frame\u000a            self_label.frameNStart = frameN  # exact frame index\u000a            self_label.setAutoDraw(True)\u000a        \u000a        # *other_box* updates\u000a        if t >= 0.0 and other_box.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            other_box.tStart = t  # underestimates by a little under one frame\u000a            other_box.frameNStart = frameN  # exact frame index\u000a            other_box.setAutoDraw(True)\u000a        \u000a        # *other_label* updates\u000a        if t >= 0.0 and other_label.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            other_label.tStart = t  # underestimates by a little under one frame\u000a            other_label.frameNStart = frameN  # exact frame index\u000a            other_label.setAutoDraw(True)\u000a        if mouse.isPressedIn(self_box, buttons=[0]):\u000a            trials.addData('choice', 'self')\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        elif mouse.isPressedIn(other_box, buttons=[0]):\u000a            trials.addData('choice','other')\u000a            choice_stats[trialtype] += 1\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        \u000a        if self_box.contains(mouse):\u000a            self_box.fillColor = SELF_BOX_BORDER_COLOR\u000a        else:\u000a            self_box.fillColor = SELF_BOX_FILL_COLOR\u000a        \u000a        if other_box.contains(mouse):\u000a            other_box.fillColor = OTHER_BOX_BORDER_COLOR\u000a        else:\u000a            other_box.fillColor = OTHER_BOX_FILL_COLOR\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choose_sourceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choose_source"-------\u000a    for thisComponent in choose_sourceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for trials (TrialHandler)\u000a    # check if next trial is a new block. \u000a    # if it's a new block, check if current block had 3 "other" votes for either pitch type\u000a    # if so,  1) record appropriate block number for that type\u000a    #  2) set "done" flag to true for that type\u000a    # if both pitch types are done, end the trials loop\u000a    next_block = trials.getFutureTrial(1).block\u000a    this_amount = block * PITCH_DELTA\u000a    if(block != next_block):\u000a        if(choice_stats['pitch higher'] == 3):\u000a            expInfo['pitch higher result block'] = block\u000a            expInfo['pitch higher result amount'] = this_amount\u000a            choice_stats['pitch higher block'] = block\u000a            choice_stats['pitch higher amount'] = this_amount\u000a            pitch_higher_done = True\u000a        if(choice_stats['pitch lower'] == 3):\u000a            expInfo['pitch lower result block'] = block\u000a            expInfo['pitch lower result amount'] = -1 * this_amount\u000a            choice_stats['pitch lower block'] = block\u000a            choice_stats['pitch lower amount'] = this_amount\u000a            pitch_lower_done = True\u000a        if(pitch_lower_done and pitch_higher_done):\u000a            trials.finished = True\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status"):\u000a                    thisComponent.status = FINISHED\u000a                continueRoutine = False\u000a        choice_stats['pitch higher'] = 0\u000a        choice_stats['pitch lower'] = 0\u000a    \u000a    \u000a    # the Routine "choose_source" was not non-slip safe, so reset the non-slip timer\u000a    routineTimer.reset()\u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeats of 'trials'\u000a\u000a\u000a#------Prepare to start Routine "thankyou"-------\u000at = 0\u000athankyouClock.reset()  # clock \u000aframeN = -1\u000aroutineTimer.add(5.000000)\u000a# update component parameters for each repeat\u000a\u000a\u000a\u000a# keep track of which components have finished\u000athankyouComponents = []\u000athankyouComponents.append(text_3)\u000afor thisComponent in thankyouComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "thankyou"-------\u000acontinueRoutine = True\u000awhile continueRoutine and routineTimer.getTime() > 0:\u000a    # get current time\u000a    t = thankyouClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *text_3* updates\u000a    if t >= 0.0 and text_3.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        text_3.tStart = t  # underestimates by a little under one frame\u000a        text_3.frameNStart = frameN  # exact frame index\u000a        text_3.setAutoDraw(True)\u000a    if text_3.status == STARTED and t >= (0.0 + (5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a        text_3.setAutoDraw(False)\u000a    \u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in thankyouComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "thankyou"-------\u000afor thisComponent in thankyouComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000aresults = '\u005cn\u005cr'\u000a\u000aresults += 'Pitch (higher) block = ' + str(choice_stats['pitch higher block']) + '\u005cn\u005cr'\u000aresults += 'Pitch (lower) block = ' + str(choice_stats['pitch lower block']) + '\u005cn\u005cr'\u000aresults += '\u005cn\u005cr'\u000aresults += 'Pitch (higher) amount = ' + str(choice_stats['pitch higher amount']) + '\u005cn\u005cr'\u000aresults += 'Pitch (lower) amount = ' + str(choice_stats['pitch lower amount']) + '\u005cn\u005cr'\u000a\u000a\u000a\u000a\u000a#------Prepare to start Routine "display_results"-------\u000at = 0\u000adisplay_resultsClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000aresults_text.setText(results)\u000akey_resp_2 = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000akey_resp_2.status = NOT_STARTED\u000a# keep track of which components have finished\u000adisplay_resultsComponents = []\u000adisplay_resultsComponents.append(results_text)\u000adisplay_resultsComponents.append(key_resp_2)\u000afor thisComponent in display_resultsComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "display_results"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = display_resultsClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *results_text* updates\u000a    if t >= 0.0 and results_text.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        results_text.tStart = t  # underestimates by a little under one frame\u000a        results_text.frameNStart = frameN  # exact frame index\u000a        results_text.setAutoDraw(True)\u000a    \u000a    # *key_resp_2* updates\u000a    if t >= 0.0 and key_resp_2.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        key_resp_2.tStart = t  # underestimates by a little under one frame\u000a        key_resp_2.frameNStart = frameN  # exact frame index\u000a        key_resp_2.status = STARTED\u000a        # keyboard checking is just starting\u000a        event.clearEvents(eventType='keyboard')\u000a    if key_resp_2.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['esc'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in display_resultsComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a\u000a#-------Ending Routine "display_results"-------\u000afor thisComponent in display_resultsComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# the Routine "display_results" was not non-slip safe, so reset the non-slip timer\u000aroutineTimer.reset()\u000a\u000aserv.stop()\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p229
sS'thisTrial'
p230
g1
(cpsychopy.data
TrialType
p231
c__builtin__
dict
p232
(dp233
g49
g60
sg48
g221
sg47
g218
sg50
g64
sg51
g27
stRp234
sS'_exp'
p235
I180013616
sg10
S'trials'
p236
sg6
S'/Volumes/Macintosh HD/Users/poppe076/Desktop/source_monitoring_task/source_monitoring.py'
p237
sS'thisRepN'
p238
I0
sg15
I01
sg16
g17
sS'data'
p239
g1
(cpsychopy.data
DataHandler
p240
g232
(dp241
S'ran'
p242
cnumpy.ma.core
_mareconstruct
p243
(cnumpy.ma.core
MaskedArray
p244
cnumpy
ndarray
p245
(I0
tp246
S'b'
tRp247
(I1
(I90
I1
tg20
(S'f4'
I0
I1
tRp248
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p249
g243
(g244
g245
g246
S'b'
tRp250
(I1
(I90
I1
tg248
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
Ntbsg14
cnumpy.core.multiarray
_reconstruct
p251
(g245
(I0
tS'b'
tRp252
(I1
(I90
I1
tg20
(S'O4'
I0
I1
tRp253
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp254
g65
ag77
ag77
ag65
ag77
ag77
ag65
ag77
ag77
ag77
ag65
ag77
ag65
ag77
ag77
ag65
ag77
ag77
aS'--'
p255
aS'--'
p256
aS'--'
p257
aS'--'
p258
aS'--'
p259
aS'--'
p260
aS'--'
p261
aS'--'
p262
aS'--'
p263
aS'--'
p264
aS'--'
p265
aS'--'
p266
aS'--'
p267
aS'--'
p268
aS'--'
p269
aS'--'
p270
aS'--'
p271
aS'--'
p272
aS'--'
p273
aS'--'
p274
aS'--'
p275
aS'--'
p276
aS'--'
p277
aS'--'
p278
aS'--'
p279
aS'--'
p280
aS'--'
p281
aS'--'
p282
aS'--'
p283
aS'--'
p284
aS'--'
p285
aS'--'
p286
aS'--'
p287
aS'--'
p288
aS'--'
p289
aS'--'
p290
aS'--'
p291
aS'--'
p292
aS'--'
p293
aS'--'
p294
aS'--'
p295
aS'--'
p296
aS'--'
p297
aS'--'
p298
aS'--'
p299
aS'--'
p300
aS'--'
p301
aS'--'
p302
aS'--'
p303
aS'--'
p304
aS'--'
p305
aS'--'
p306
aS'--'
p307
aS'--'
p308
aS'--'
p309
aS'--'
p310
aS'--'
p311
aS'--'
p312
aS'--'
p313
aS'--'
p314
aS'--'
p315
aS'--'
p316
aS'--'
p317
aS'--'
p318
aS'--'
p319
aS'--'
p320
aS'--'
p321
aS'--'
p322
aS'--'
p323
aS'--'
p324
aS'--'
p325
aS'--'
p326
atbstRp327
(dp328
S'isNumeric'
p329
(dp330
g242
I01
sg249
I01
sg14
I00
ssg236
g226
sS'dataTypes'
p331
(lp332
g242
ag249
ag14
asS'dataShape'
p333
(lp334
I90
aI1
asbsS'method'
p335
S'sequential'
p336
sS'sequenceIndices'
p337
g251
(g245
(I0
tS'b'
tRp338
(I1
(I90
I1
tg56
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00'
tbsS'finished'
p339
I01
sS'nReps'
p340
I1
sS'nRemaining'
p341
I71
sS'trialList'
p342
(lp343
g1
(g231
g232
(dp344
g49
g60
sg48
g62
sg47
g58
sg50
g64
sg51
g66
stRp345
ag1
(g231
g232
(dp346
g49
g72
sg48
g74
sg47
g70
sg50
g76
sg51
g78
stRp347
ag1
(g231
g232
(dp348
g49
g84
sg48
g86
sg47
g82
sg50
g88
sg51
g89
stRp349
ag1
(g231
g232
(dp350
g49
g60
sg48
g96
sg47
g93
sg50
g64
sg51
g98
stRp351
ag1
(g231
g232
(dp352
g49
g72
sg48
g105
sg47
g102
sg50
g76
sg51
g107
stRp353
ag1
(g231
g232
(dp354
g49
g84
sg48
g114
sg47
g111
sg50
g88
sg51
g116
stRp355
ag1
(g231
g232
(dp356
g49
g60
sg48
g123
sg47
g120
sg50
g64
sg51
g125
stRp357
ag1
(g231
g232
(dp358
g49
g72
sg48
g132
sg47
g129
sg50
g76
sg51
g134
stRp359
ag1
(g231
g232
(dp360
g49
g84
sg48
g141
sg47
g138
sg50
g88
sg51
g38
stRp361
ag1
(g231
g232
(dp362
g49
g84
sg48
g149
sg47
g146
sg50
g88
sg51
g151
stRp363
ag1
(g231
g232
(dp364
g49
g72
sg48
g158
sg47
g155
sg50
g76
sg51
g160
stRp365
ag1
(g231
g232
(dp366
g49
g60
sg48
g167
sg47
g164
sg50
g64
sg51
g169
stRp367
ag1
(g231
g232
(dp368
g49
g72
sg48
g176
sg47
g173
sg50
g76
sg51
g178
stRp369
ag1
(g231
g232
(dp370
g49
g60
sg48
g185
sg47
g182
sg50
g64
sg51
g187
stRp371
ag1
(g231
g232
(dp372
g49
g84
sg48
g194
sg47
g191
sg50
g88
sg51
g196
stRp373
ag1
(g231
g232
(dp374
g49
g72
sg48
g203
sg47
g200
sg50
g76
sg51
g205
stRp375
ag1
(g231
g232
(dp376
g49
g84
sg48
g212
sg47
g209
sg50
g88
sg51
g214
stRp377
ag234
ag1
(g231
g232
(dp378
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp379
sg47
S'word3.14'
p380
sg50
g64
sg51
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp381
stRp382
ag1
(g231
g232
(dp383
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp384
sg47
S'word1.15'
p385
sg50
g76
sg51
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp386
stRp387
ag1
(g231
g232
(dp388
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp389
sg47
S'word2.17'
p390
sg50
g88
sg51
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp391
stRp392
ag1
(g231
g232
(dp393
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp394
sg47
S'word2.7'
p395
sg50
g88
sg51
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp396
stRp397
ag1
(g231
g232
(dp398
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp399
sg47
S'word3.2'
p400
sg50
g64
sg51
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp401
stRp402
ag1
(g231
g232
(dp403
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp404
sg47
S'word1.2'
p405
sg50
g76
sg51
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp406
stRp407
ag1
(g231
g232
(dp408
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8?'
tRp409
sg47
S'word3.29'
p410
sg50
g64
sg51
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp411
stRp412
ag1
(g231
g232
(dp413
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp414
sg47
S'word2.5'
p415
sg50
g88
sg51
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp416
stRp417
ag1
(g231
g232
(dp418
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\xf8\xbf'
tRp419
sg47
S'word1.26'
p420
sg50
g76
sg51
g19
(g26
S'\x03\x00\x00\x00\x00\x00\x00\x00'
tRp421
stRp422
ag1
(g231
g232
(dp423
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp424
sg47
S'word1.30'
p425
sg50
g76
sg51
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp426
stRp427
ag1
(g231
g232
(dp428
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp429
sg47
S'word2.8'
p430
sg50
g88
sg51
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp431
stRp432
ag1
(g231
g232
(dp433
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp434
sg47
S'word3.18'
p435
sg50
g64
sg51
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp436
stRp437
ag1
(g231
g232
(dp438
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp439
sg47
S'word1.1'
p440
sg50
g76
sg51
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp441
stRp442
ag1
(g231
g232
(dp443
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp444
sg47
S'word2.20'
p445
sg50
g88
sg51
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp446
stRp447
ag1
(g231
g232
(dp448
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp449
sg47
S'word3.10'
p450
sg50
g64
sg51
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp451
stRp452
ag1
(g231
g232
(dp453
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp454
sg47
S'word2.30'
p455
sg50
g88
sg51
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp456
stRp457
ag1
(g231
g232
(dp458
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00@'
tRp459
sg47
S'word3.21'
p460
sg50
g64
sg51
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp461
stRp462
ag1
(g231
g232
(dp463
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\xc0'
tRp464
sg47
S'word1.23'
p465
sg50
g76
sg51
g19
(g26
S'\x04\x00\x00\x00\x00\x00\x00\x00'
tRp466
stRp467
ag1
(g231
g232
(dp468
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp469
sg47
S'word3.20'
p470
sg50
g64
sg51
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp471
stRp472
ag1
(g231
g232
(dp473
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp474
sg47
S'word2.23'
p475
sg50
g88
sg51
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp476
stRp477
ag1
(g231
g232
(dp478
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp479
sg47
S'word1.17'
p480
sg50
g76
sg51
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp481
stRp482
ag1
(g231
g232
(dp483
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp484
sg47
S'word3.27'
p485
sg50
g64
sg51
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp486
stRp487
ag1
(g231
g232
(dp488
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp489
sg47
S'word2.14'
p490
sg50
g88
sg51
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp491
stRp492
ag1
(g231
g232
(dp493
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp494
sg47
S'word1.14'
p495
sg50
g76
sg51
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp496
stRp497
ag1
(g231
g232
(dp498
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp499
sg47
S'word2.10'
p500
sg50
g88
sg51
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp501
stRp502
ag1
(g231
g232
(dp503
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04@'
tRp504
sg47
S'word3.26'
p505
sg50
g64
sg51
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp506
stRp507
ag1
(g231
g232
(dp508
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x04\xc0'
tRp509
sg47
S'word1.7'
p510
sg50
g76
sg51
g19
(g26
S'\x05\x00\x00\x00\x00\x00\x00\x00'
tRp511
stRp512
ag1
(g231
g232
(dp513
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp514
sg47
S'word3.3'
p515
sg50
g64
sg51
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp516
stRp517
ag1
(g231
g232
(dp518
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp519
sg47
S'word1.5'
p520
sg50
g76
sg51
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp521
stRp522
ag1
(g231
g232
(dp523
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp524
sg47
S'word2.27'
p525
sg50
g88
sg51
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp526
stRp527
ag1
(g231
g232
(dp528
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp529
sg47
S'word3.9'
p530
sg50
g64
sg51
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp531
stRp532
ag1
(g231
g232
(dp533
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp534
sg47
S'word1.19'
p535
sg50
g76
sg51
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp536
stRp537
ag1
(g231
g232
(dp538
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp539
sg47
S'word2.9'
p540
sg50
g88
sg51
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp541
stRp542
ag1
(g231
g232
(dp543
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08@'
tRp544
sg47
S'word3.12'
p545
sg50
g64
sg51
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp546
stRp547
ag1
(g231
g232
(dp548
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x08\xc0'
tRp549
sg47
S'word1.16'
p550
sg50
g76
sg51
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp551
stRp552
ag1
(g231
g232
(dp553
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp554
sg47
S'word2.15'
p555
sg50
g88
sg51
g19
(g26
S'\x06\x00\x00\x00\x00\x00\x00\x00'
tRp556
stRp557
ag1
(g231
g232
(dp558
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp559
sg47
S'word3.11'
p560
sg50
g64
sg51
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp561
stRp562
ag1
(g231
g232
(dp563
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp564
sg47
S'word1.8'
p565
sg50
g76
sg51
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp566
stRp567
ag1
(g231
g232
(dp568
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp569
sg47
S'word2.25'
p570
sg50
g88
sg51
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp571
stRp572
ag1
(g231
g232
(dp573
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp574
sg47
S'word2.2'
p575
sg50
g88
sg51
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp576
stRp577
ag1
(g231
g232
(dp578
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp579
sg47
S'word3.24'
p580
sg50
g64
sg51
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp581
stRp582
ag1
(g231
g232
(dp583
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp584
sg47
S'word1.27'
p585
sg50
g76
sg51
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp586
stRp587
ag1
(g231
g232
(dp588
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp589
sg47
S'word2.28'
p590
sg50
g88
sg51
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp591
stRp592
ag1
(g231
g232
(dp593
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c@'
tRp594
sg47
S'word3.6'
p595
sg50
g64
sg51
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp596
stRp597
ag1
(g231
g232
(dp598
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x0c\xc0'
tRp599
sg47
S'word1.13'
p600
sg50
g76
sg51
g19
(g26
S'\x07\x00\x00\x00\x00\x00\x00\x00'
tRp601
stRp602
ag1
(g231
g232
(dp603
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp604
sg47
S'word2.13'
p605
sg50
g88
sg51
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp606
stRp607
ag1
(g231
g232
(dp608
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp609
sg47
S'word1.12'
p610
sg50
g76
sg51
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp611
stRp612
ag1
(g231
g232
(dp613
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp614
sg47
S'word3.4'
p615
sg50
g64
sg51
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp616
stRp617
ag1
(g231
g232
(dp618
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp619
sg47
S'word2.16'
p620
sg50
g88
sg51
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp621
stRp622
ag1
(g231
g232
(dp623
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp624
sg47
S'word1.6'
p625
sg50
g76
sg51
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp626
stRp627
ag1
(g231
g232
(dp628
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp629
sg47
S'word3.19'
p630
sg50
g64
sg51
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp631
stRp632
ag1
(g231
g232
(dp633
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp634
sg47
S'word2.1'
p635
sg50
g88
sg51
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp636
stRp637
ag1
(g231
g232
(dp638
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10@'
tRp639
sg47
S'word3.5'
p640
sg50
g64
sg51
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp641
stRp642
ag1
(g231
g232
(dp643
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x10\xc0'
tRp644
sg47
S'word1.4'
p645
sg50
g76
sg51
g19
(g26
S'\x08\x00\x00\x00\x00\x00\x00\x00'
tRp646
stRp647
ag1
(g231
g232
(dp648
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp649
sg47
S'word3.15'
p650
sg50
g64
sg51
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp651
stRp652
ag1
(g231
g232
(dp653
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp654
sg47
S'word2.29'
p655
sg50
g88
sg51
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp656
stRp657
ag1
(g231
g232
(dp658
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp659
sg47
S'word1.11'
p660
sg50
g76
sg51
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp661
stRp662
ag1
(g231
g232
(dp663
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp664
sg47
S'word2.12'
p665
sg50
g88
sg51
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp666
stRp667
ag1
(g231
g232
(dp668
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp669
sg47
S'word1.22'
p670
sg50
g76
sg51
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp671
stRp672
ag1
(g231
g232
(dp673
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp674
sg47
S'word3.23'
p675
sg50
g64
sg51
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp676
stRp677
ag1
(g231
g232
(dp678
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12@'
tRp679
sg47
S'word3.25'
p680
sg50
g64
sg51
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp681
stRp682
ag1
(g231
g232
(dp683
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp684
sg47
S'word2.21'
p685
sg50
g88
sg51
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp686
stRp687
ag1
(g231
g232
(dp688
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x12\xc0'
tRp689
sg47
S'word1.29'
p690
sg50
g76
sg51
g19
(g26
S'\t\x00\x00\x00\x00\x00\x00\x00'
tRp691
stRp692
ag1
(g231
g232
(dp693
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp694
sg47
S'word1.10'
p695
sg50
g76
sg51
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp696
stRp697
ag1
(g231
g232
(dp698
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp699
sg47
S'word2.4'
p700
sg50
g88
sg51
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp701
stRp702
ag1
(g231
g232
(dp703
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp704
sg47
S'word3.17'
p705
sg50
g64
sg51
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp706
stRp707
ag1
(g231
g232
(dp708
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp709
sg47
S'word3.8'
p710
sg50
g64
sg51
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp711
stRp712
ag1
(g231
g232
(dp713
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp714
sg47
S'word2.19'
p715
sg50
g88
sg51
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp716
stRp717
ag1
(g231
g232
(dp718
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp719
sg47
S'word1.28'
p720
sg50
g76
sg51
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp721
stRp722
ag1
(g231
g232
(dp723
g49
g60
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14@'
tRp724
sg47
S'word3.1'
p725
sg50
g64
sg51
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp726
stRp727
ag1
(g231
g232
(dp728
g49
g72
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x14\xc0'
tRp729
sg47
S'word1.25'
p730
sg50
g76
sg51
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp731
stRp732
ag1
(g231
g232
(dp733
g49
g84
sg48
g19
(g21
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp734
sg47
S'word2.18'
p735
sg50
g88
sg51
g19
(g26
S'\n\x00\x00\x00\x00\x00\x00\x00'
tRp736
stRp737
asS'seed'
p738
NsS'thisIndex'
p739
g217
sS'thisN'
p740
I18
sS'thisTrialN'
p741
I18
sS'nTotal'
p742
I90
sS'_warnUseOfNext'
p743
I01
sbasS'savePickle'
p744
I00
sb.